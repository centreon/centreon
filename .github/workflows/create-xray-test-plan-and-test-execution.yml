name: create-xray-test-plan-and-test-execution

on:
  workflow_call:
    inputs:
      major_version:
        required: true
        type: string
      minor_version:
        required: true
        type: string
      os:
        required: true
        type: string
    outputs:
      test_plan_key_alma8:
        value: ${{ jobs.create-xray-test-plan-and-test-execution.outputs.test_plan_key_alma8 }}
      test_plan_id_alma8:
        value: ${{ jobs.create-xray-test-plan-and-test-execution.outputs.test_plan_id_alma8 }}
      test_execution_key_alma8:
        value: ${{ jobs.create-xray-test-plan-and-test-execution.outputs.test_execution_key_alma8 }}
      test_execution_id_alma8:
        value: ${{ jobs.create-xray-test-plan-and-test-execution.outputs.test_execution_id_alma8 }}
      test_plan_key_alma9:
        value: ${{ jobs.create-xray-test-plan-and-test-execution.outputs.test_plan_key_alma9 }}
      test_plan_id_alma9:
        value: ${{ jobs.create-xray-test-plan-and-test-execution.outputs.test_plan_id_alma9 }}
      test_execution_key_alma9:
        value: ${{ jobs.create-xray-test-plan-and-test-execution.outputs.test_execution_key_alma9 }}
      test_execution_id_alma9:
        value: ${{ jobs.create-xray-test-plan-and-test-execution.outputs.test_execution_id_alma9 }}
      test_plan_key_bullseye:
        value: ${{ jobs.create-xray-test-plan-and-test-execution.outputs.test_plan_key_bullseye }}
      test_plan_id_bullseye:
        value: ${{ jobs.create-xray-test-plan-and-test-execution.outputs.test_plan_id_bullseye }}
      test_execution_key_bullseye:
        value: ${{ jobs.create-xray-test-plan-and-test-execution.outputs.test_execution_key_bullseye }}
      test_execution_id_bullseye:
        value: ${{ jobs.create-xray-test-plan-and-test-execution.outputs.test_execution_id_bullseye }}
      test_plan_key_bookworm:
        value: ${{ jobs.create-xray-test-plan-and-test-execution.outputs.test_plan_key_bookworm }}
      test_plan_id_bookworm:
        value: ${{ jobs.create-xray-test-plan-and-test-execution.outputs.test_plan_id_bookworm }}
      test_execution_key_bookworm:
        value: ${{ jobs.create-xray-test-plan-and-test-execution.outputs.test_execution_key_bookworm }}
      test_execution_id_bookworm:
        value: ${{ jobs.create-xray-test-plan-and-test-execution.outputs.test_execution_id_bookworm }}
    secrets:
      xray_jira_user_email:
        required: true
      xray_jira_token:
        required: true
      xray_client_id:
        required: true
      xray_client_secret:
        required: true

# NIGHTLY <OSS|MODULES|COLLECT> <MAJOR_VERSION> (e.g., NIGHTLY OSS 23.10)
jobs:
  create-xray-test-plan-and-test-execution:
    runs-on: ubuntu-22.04
    outputs:
      test_plan_key_alma8: ${{ steps.get_test_plan_key.outputs.test_plan_key_alma8 }}
      test_plan_id_alma8: ${{ steps.get_test_plan_id.outputs.test_plan_id_alma8 }}
      test_execution_key_alma8: ${{ steps.get_test_execution_key.outputs.test_execution_key_alma8 }}
      test_execution_id_alma8: ${{ steps.get_test_execution_id.outputs.test_execution_id_alma8 }}
      test_plan_key_alma9: ${{ steps.get_test_plan_key.outputs.test_plan_key_alma9 }}
      test_plan_id_alma9: ${{ steps.get_test_plan_id.outputs.test_plan_id_alma9 }}
      test_execution_key_alma9: ${{ steps.get_test_execution_key.outputs.test_execution_key_alma9 }}
      test_execution_id_alma9: ${{ steps.get_test_execution_id.outputs.test_execution_id_alma9 }}
      test_plan_key_bullseye: ${{ steps.get_test_plan_key.outputs.test_plan_key_bullseye }}
      test_plan_id_bullseye: ${{ steps.get_test_plan_id.outputs.test_plan_id_bullseye }}
      test_execution_key_bullseye: ${{ steps.get_test_execution_key.outputs.test_execution_key_bullseye }}
      test_execution_id_bullseye: ${{ steps.get_test_execution_id.outputs.test_execution_id_bullseye }}
      test_plan_key_bookworm: ${{ steps.get_test_plan_key.outputs.test_plan_key_bookworm }}
      test_plan_id_bookworm: ${{ steps.get_test_plan_id.outputs.test_plan_id_bookworm }}
      test_execution_key_bookworm: ${{ steps.get_test_execution_key.outputs.test_execution_key_bookworm }}
      test_execution_id_bookworm: ${{ steps.get_test_execution_id.outputs.test_execution_id_bookworm }}

    steps:
      - name: Generate Xray Token
        id: generate_xray_token
        run: |
          token_response=$(curl -H "Content-Type: application/json" -X POST --data "{\"client_id\": \"${{ secrets.xray_client_id }}\", \"client_secret\": \"${{ secrets.xray_client_secret }}\"}" "https://xray.cloud.getxray.app/api/v1/authenticate")
          xray_token=$(echo "$token_response" | sed -n 's/.*"\(.*\)".*/\1/p')
          echo "xray_token=$xray_token" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create or Get the TestPlanKey
        id: get_test_plan_key
        run: |
          # Use a GraphQL query to get all test plans matching the JQL
          graphql_query='{
          "query":"query GetTestPlans($jql: String, $limit: Int!) { getTestPlans(jql: $jql, limit: $limit) { total results { issueId jira(fields: [\"summary\", \"key\"]) } } }",
          "variables":{"jql": "project = MON","limit": 100}}'

          # Execute the GraphQL query and parse the results
          response=$(curl -H "Content-Type: application/json" -X POST -H "Authorization: Bearer ${{ steps.generate_xray_token.outputs.xray_token }}" --data "$graphql_query" "https://xray.cloud.getxray.app/api/v2/graphql")

          test_plan_key=''
          test_plans=$(echo "$response" | jq -c '.data.getTestPlans.results[].jira')

          echo "Those are the existent TPs: $test_plans"

          # Determine the summary's prefix
          summary_prefix=''
          if [[ ${{ github.event_name }} == 'schedule' ]]; then
            summary_prefix="NIGHTLY"
          else
            echo "The github_ref_name is: $GITHUB_REF_NAME"
            case "$GITHUB_REF_NAME" in
              hotfix*)
                summary_prefix="HOTFIX"
                ;;
              release*)
                summary_prefix="RLZ"
                ;;
            esac
          fi

          input_summary="$summary_prefix OSS ${{ inputs.major_version }}"
          echo "The summary to search is: $input_summary"

          # Extract the key of the existent test plan
          while read row; do
          summary=$(echo "$row" | jq -r '.summary')
          if [[ "$summary" == "$input_summary" ]]; then
            test_plan_key=$(echo "$row" | jq -r '.key')
            echo "The test_plan_key is $test_plan_key and the summary is $summary"
            break
          fi
          done <<< "$test_plans"

          echo "The test plan key for now is: $test_plan_key"

          # If no matching test plan was found, create one
          if [[ -z "$test_plan_key" ]]; then
            echo "TestPlan doesn't exist yet"

            # Create the test plan using a GraphQL mutation
            create_test_plan_mutation="{
              \"query\": \"mutation CreateTestPlan(\$testIssueIds: [String], \$jira: JSON!) { createTestPlan(testIssueIds: \$testIssueIds, jira: \$jira) { testPlan { issueId jira(fields: [\\\"key\\\"]) }warnings } }\",
              \"variables\": {
                \"testIssueIds\": [],
                \"jira\": {
                  \"fields\": {
                    \"summary\": \"$input_summary\",
                    \"project\": { \"key\": \"MON\" }
                  }
                }
              }
            }"
            create_result=$(curl -H "Content-Type: application/json" -X POST -H "Authorization: Bearer ${{ steps.generate_xray_token.outputs.xray_token }}" -d "$create_test_plan_mutation" "https://xray.cloud.getxray.app/api/v2/graphql")
            echo "API response: $create_result "

            # Extract the key of the created test plan
            test_plan_key=$(echo "$create_result" | jq -r '.data.createTestPlan.testPlan.jira.key')
            echo "New TP created with key: $test_plan_key"
          fi

          # Set the testPlanKey as an output
          echo "test_plan_key_${{ inputs.os }}=$test_plan_key" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get TestPlanID
        id: get_test_plan_id
        run: |
          test_plan_key=$(echo '${{ toJSON(steps.get_test_plan_key.outputs) }}' | jq -r '.test_plan_key_'${{ inputs.os }})
          echo "getting the testPlanId for the testPlanKey: $test_plan_key"
          jira_url="https://centreon.atlassian.net/rest/api/2/issue/$test_plan_key"

          test_plan_id=$(curl -u "${{ secrets.xray_jira_user_email }}:${{ secrets.xray_jira_token }}" -X GET -s "$jira_url" | jq -r '.id')
          echo "this is the testPlan ID : $test_plan_id"
          echo "test_plan_id_${{ inputs.os }}=$test_plan_id" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create TestExecution and Get the TestExecutionID
        id: get_test_execution_id
        run: |
          # Determine the summary's prefix
          summary_prefix=''
          if [[ ${{ github.event_name }} == 'schedule' ]]; then
            summary_prefix="NIGHTLY"
          else
            echo "The github_ref_name is: $GITHUB_REF_NAME"
            case "$GITHUB_REF_NAME" in
              hotfix*)
                summary_prefix="HOTFIX"
                ;;
              release*)
                summary_prefix="RLZ"
                ;;
            esac
          fi

          current_date=$(date +'%d/%m/%Y')

          workflow_run_url="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

          input_summary="$summary_prefix WEB ${{ inputs.major_version }}.${{ inputs.minor_version }} $current_date"
          echo "The summary of the TE is: $input_summary"

          linux_distribution=''
          case "${{ inputs.os }}" in
            alma8)
              linux_distribution="ALMA8"
              mariadb_version="MARIADB_10_5"
              ;;
            alma9)
              linux_distribution="ALMA9"
              mariadb_version="MARIADB_10_5"
              ;;
            bullseye)
              linux_distribution="DEBIAN11"
              mariadb_version="MARIADB_10_5"
              ;;
            bookworm)
              linux_distribution="DEBIAN12"
              mariadb_version="MARIADB_10_11"
            ;;
          esac

          xray_graphql_createTestExecution="{
            \"query\": \"mutation CreateTestExecution(\$testEnvironments: [String], \$jira: JSON!) { createTestExecution(testEnvironments: \$testEnvironments, jira: \$jira) { testExecution { issueId jira(fields: [\\\"key\\\"]) } warnings createdTestEnvironments } }\",
            \"variables\": {
              \"testEnvironments\": [\"$linux_distribution\",\"$mariadb_version\",\"CHROME\"],
              \"jira\": {
                \"fields\": {
                  \"summary\": \"$input_summary\",
                  \"description\": \"$workflow_run_url\",
                  \"project\": { \"key\": \"MON\" },
                  \"components\": [{\"name\": \"centreon-web\"}],
                  \"priority\":{\"name\":\"Low\"}
                }
              }
            }
          }"

          echo "this is the graphql mutation : $xray_graphql_createTestExecution"

          response=$(curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${{ steps.generate_xray_token.outputs.xray_token }}" --data "$xray_graphql_createTestExecution" "https://xray.cloud.getxray.app/api/v2/graphql")

          echo -e "Response from Create Test Execution:\n$response"

          # Extract the ID of the created TE
          test_execution_id=$(echo "$response" | jq -r '.data.createTestExecution.testExecution.issueId')
          echo "test_execution_id_${{ inputs.os }}=$test_execution_id" >> $GITHUB_OUTPUT

          echo "TestExecution created with ID:  $test_execution_id"
        shell: bash

      - name: Get TestExecutionKey
        id: get_test_execution_key
        run: |
          test_execution_id=$(echo '${{ toJSON(steps.get_test_execution_id.outputs) }}' | jq -r '.test_execution_id_'${{ inputs.os }})
          jira_url="https://centreon.atlassian.net/rest/api/2/issue/$test_execution_id"

          test_execution_key=$(curl -u "${{ secrets.xray_jira_user_email }}:${{ secrets.xray_jira_token }}" -X GET -s "$jira_url" | jq -r '.key')
          echo "this is the TestExecutionKey: $test_execution_key"
          echo "test_execution_key_${{ inputs.os }}=$test_execution_key" >> $GITHUB_OUTPUT
        shell: bash

      - name: Update the status of the TestExecution Issue
        run: |
          test_execution_key=$(echo '${{ toJSON(steps.get_test_execution_key.outputs) }}' | jq -r '.test_execution_key_'${{ inputs.os }})
          curl -D- -u "${{ secrets.xray_jira_user_email }}:${{ secrets.xray_jira_token }}" -X POST --data '{"transition":{"id":"5"}}' -H "Content-Type: application/json" https://centreon.atlassian.net/rest/api/2/issue/$test_execution_key/transitions?expand=transitions.fields

      - name: Add the TestExecution Issue to the TestPlan
        run: |
          test_plan_id=$(echo '${{ toJSON(steps.get_test_plan_id.outputs) }}' | jq -r '.test_plan_id_'${{ inputs.os }})
          test_execution_id=$(echo '${{ toJSON(steps.get_test_execution_id.outputs) }}' | jq -r '.test_execution_id_'${{ inputs.os }})
          xray_graphql_mutation="{
            \"query\": \"mutation AddTestExecution(\$issueId: String!, \$testExecIssueIds: [String]!) { addTestExecutionsToTestPlan(issueId: \$issueId, testExecIssueIds: \$testExecIssueIds) { addedTestExecutions warning } }\",
            \"variables\": {
              \"issueId\": \"$test_plan_id\",
              \"testExecIssueIds\": [\"$test_execution_id\"]
            }
          }"
          curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${{ steps.generate_xray_token.outputs.xray_token }}" --data "${xray_graphql_mutation}" "https://xray.cloud.getxray.app/api/v2/graphql"
