on:
  workflow_call:
    inputs:
      version_file:
        required: true
        type: string
    outputs:
      major_version:
        description: "major version"
        value: ${{ jobs.get-environment.outputs.major_version }}
      minor_version:
        description: "minor version"
        value: ${{ jobs.get-environment.outputs.minor_version }}
      release:
        description: "release"
        value: ${{ jobs.get-environment.outputs.release }}
      stability:
        description: "branch stability (stable, testing, unstable, canary)"
        value: ${{ jobs.get-environment.outputs.stability }}
      os_and_database_matrix:
        description: "matrix to use for dockerize and test jobs"
        value: ${{ jobs.get-environment.outputs.os_and_database_matrix }}
      release_type:
        description: "type of release (hotfix, release)"
        value: ${{ jobs.get-environment.outputs.release_type }}
      # release_cloud:
      #   description: "context of release (cloud or not cloud)"
      #   value: ${{ jobs.get-environment.outputs.release_cloud }}

jobs:
  get-environment:
    runs-on: ubuntu-24.04
    outputs:
      major_version: ${{ steps.get_version.outputs.major_version }}
      minor_version: ${{ steps.get_version.outputs.minor_version }}
      release: ${{ steps.get_release.outputs.release }}
      stability: ${{ steps.get_stability.outputs.stability }}
      os_and_database_matrix: ${{ steps.get_os_database_matrix.outputs.result }}
      release_type: ${{ steps.get_release_type.outputs.release_type }}
      # release_cloud: ${{ steps.get_version_bis.outputs.release_cloud}}

    steps:
      - name: Checkout sources (current branch)
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0

      # get latest major version to detect cloud / on-prem versions
      - name: Checkout sources (develop branch)
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
        with:
          ref: develop
          path: centreon-develop
          sparse-checkout: .version

      - name: Store latest major version
        id: latest_major_version
        run: |
          . centreon-develop/.version
          echo "latest_major_version=$MAJOR" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get stability
        id: get_stability
        run: |
          case "$BRANCHNAME" in
            develop | dev-[2-9][0-9].[0-9][0-9].x | prepare-release-cloud*)
              STABILITY="unstable"
              ;;
            release* | hotfix*)
              STABILITY="testing"
              ;;
            master | [2-9][0-9].[0-9][0-9].x)
              STABILITY="stable"
              ;;
            *)
              STABILITY="canary"
              ;;
          esac

          echo "stability=$STABILITY" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get version from ${{ inputs.version_file }}
        id: get_version
        run: |
          if [[ "${{ inputs.version_file }}" == */.version ]]; then
            . .version
            . ${{ inputs.version_file }}
            VERSION="$MAJOR.$MINOR"
          elif [[ "${{ inputs.version_file }}" == */insertBaseConf.sql ]]; then
            VERSION=$(grep version ${{ inputs.version_file }} | cut -d "'" -f 4 | awk 'NR==2')
          elif [[ "${{ inputs.version_file }}" == */conf.php ]]; then
            VERSION=$(cat ${{ inputs.version_file }}| grep mod_release | cut -d'=' -f2 | cut -d'"' -f2 | cut -d"'" -f2)
          elif [[ "${{ inputs.version_file }}" == */configs.xml ]]; then
            VERSION=$(sed -n 's|\s*<version>\(.*\)</version>|\1|p' ${{ inputs.version_file }} 2>/dev/null)
          elif [[ "${{ inputs.version_file }}" == */pom.xml ]]; then
            VERSION=$(grep '<revision>.*</revision>' ${{ inputs.version_file }} | cut -d '>' -f 2 | cut -d - -f 1)
          elif [[ "${{ inputs.version_file }}" == */*.spectemplate ]]; then
            VERSION=$(grep 'Version: ' ${{ inputs.version_file }} | rev | cut -d' ' -f1 | rev)
          elif [[ "${{ inputs.version_file }}" == */.env ]]; then
            VERSION=$(sed -e '/\[[2-9][0-9].[0-9][0-9].[0-9]+\]/p' ${{ inputs.version_file }} | cut -d '=' -f 2)
          else
            echo "Unable to parse version file ${{ inputs.version_file }}"
            exit 1
          fi

          if egrep '^[2-9][0-9]\.[0-9][0-9]\.[0-9]+' <<<"$VERSION" >/dev/null 2>&1 ; then
            n=${VERSION//[!0-9]/ }
            a=(${n//\./ })
            echo "major_version=${a[0]}.${a[1]}" >> $GITHUB_OUTPUT
            MAJOR=${a[0]}.${a[1]}
            echo "minor_version=${a[2]}" >> $GITHUB_OUTPUT
          else
            echo "Cannot parse version number from ${{ inputs.version_file }}"
            exit 1
          fi
        shell: bash

      - name: "Get release: 1 for testing / stable, <date>.<commit_sha> for others"
        id: get_release
        run: |
          if [[ "${{ steps.get_stability.outputs.stability }}" == "testing" || "${{ steps.get_stability.outputs.stability }}" == "stable" ]]; then
            RELEASE="1"
          else
            RELEASE="$(date +%s).$(echo ${{ github.sha }} | cut -c -7)"
          fi

          echo "release=$RELEASE" >> $GITHUB_OUTPUT
        shell: bash

      - name: "Get release type: hotfix, release or not defined if not a release"
        id: get_release_type
        run: |
          RELEASE_TYPE=$(echo "${{ github.head_ref || github.ref_name }}" | cut -d '-' -f 1)
          if [[ "$RELEASE_TYPE" == "hotfix" || "$RELEASE_TYPE" == "release" ]]; then
            echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          VERSION_FILE: ${{ inputs.version_file }}
        with:
          script: |
            const fs = require('fs');
            const versionFileContent = fs.readFileSync('${{ env.VERSION_FILE }}');

      # - id: get_version_bis
      #   run: |
      #     set -x

      #     # Set default release values
      #     GITHUB_RELEASE_CLOUD=0

      #     # if current branch major version is greater or equal than the develop branch major version ==> cloud version
      #     if [[ "$(printf '%s\n' "${{ steps.latest_major_version.outputs.latest_major_version }}" "$MAJOR" | sort -V | head -n1)" == "${{ steps.latest_major_version.outputs.latest_major_version }}" ]]; then
      #       GITHUB_RELEASE_CLOUD=1
      #     fi

      #     case "$BRANCHNAME" in
      #       master)
      #         GITHUB_RELEASE_CLOUD=1
      #         ;;
      #       [2-9][0-9].[0-9][0-9].x)
      #         ;;
      #       develop)
      #         GITHUB_RELEASE_CLOUD=1
      #         ;;
      #       dev-[2-9][0-9].[0-9][0-9].x)
      #         ;;
      #       release* | hotfix*)
      #         # Handle workflow_dispatch run triggers and run a dispatch ONLY for cloud release
      #         GITHUB_RELEASE_BRANCH_BASE_REF_NAME="$(gh pr view $BRANCHNAME -q .baseRefName --json headRefName,baseRefName,state)"
      #         echo "GITHUB_RELEASE_BRANCH_BASE_REF_NAME is: $GITHUB_RELEASE_BRANCH_BASE_REF_NAME"
      #         GITHUB_RELEASE_BRANCH_PR_STATE="$(gh pr view $BRANCHNAME -q .state --json headRefName,baseRefName,state)"
      #         echo "GITHUB_RELEASE_BRANCH_PR_STATE is: $GITHUB_RELEASE_BRANCH_PR_STATE"

      #         # Check if the release context (cloud and hotfix or cloud and release)
      #         if [[ "$GITHUB_RELEASE_BRANCH_BASE_REF_NAME" == "master" ]] && [[ "$GITHUB_RELEASE_BRANCH_PR_STATE" == "OPEN" ]]; then
      #           # Get release pull request ID
      #           GITHUB_RELEASE_BRANCH_PR_NUMBER="$(gh pr view $BRANCHNAME -q .[] --json number)"
      #           # Set release cloud to 1 (0=not-cloud, 1=cloud)
      #           GITHUB_RELEASE_CLOUD=1
      #           # Debug
      #           echo "GITHUB_RELEASE_BRANCH_PR_NUMBER is: $GITHUB_RELEASE_BRANCH_PR_NUMBER" # We do leave this here as a debug help.
      #           echo "GITHUB_RELEASE_CLOUD is: $GITHUB_RELEASE_CLOUD"
      #         fi
      #         ;;
      #       prepare-release-cloud*)
      #         # Set release cloud to 1 (0=not-cloud, 1=cloud)
      #         GITHUB_RELEASE_CLOUD=1
      #         # Debug
      #         echo "GITHUB_RELEASE_CLOUD is: $GITHUB_RELEASE_CLOUD"
      #         ;;
      #       *)
      #         # Any branch name
      #         GITHUB_BRANCH_BASE_REF_NAME="$(gh pr view $BRANCHNAME -q .baseRefName --json headRefName,baseRefName,state)"
      #         GITHUB_BRANCH_PR_STATE="$(gh pr view $BRANCHNAME -q .state --json headRefName,baseRefName,state)"

      #         # Check if pull request branch targeting develop
      #         if [[ "$GITHUB_BRANCH_BASE_REF_NAME" == "develop" ]] && [[ "$GITHUB_BRANCH_PR_STATE" == "OPEN" ]]; then
      #           GITHUB_RELEASE_CLOUD=1
      #         fi
      #         ;;
      #     esac

      #     echo "release_cloud=$GITHUB_RELEASE_CLOUD" >> $GITHUB_OUTPUT
      #   shell: bash
      #   env:
      #     GH_TOKEN: ${{ github.token }}

      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: get_os_database_matrix
        with:
          script: |
            const alma9_mariadb = {
              "operating_system": "alma9",
              "database": "mariadb:10.11",
              "test_tags": "not @ignore"
            };
            const alma8_mariadb = {
              "operating_system": "alma8",
              "database": "mariadb:10.11",
              "test_tags": "not @ignore and @system"
            };
            const bookworm_mysql = {
              "operating_system": "bookworm",
              "database": "mysql:8.3",
              "test_tags": "not @ignore"
            };

            let matrix = {
              "main": [alma9_mariadb],
              "operating_systems": [alma9_mariadb],
              "databases": [alma9_mariadb],
            };

            if (context.eventName === 'schedule') {
              matrix = {
                "main": [alma9_mariadb],
                "operating_systems": [alma9_mariadb, alma8_mariadb, bookworm_mysql],
                "databases": [alma9_mariadb, bookworm_mysql],
              };
            }

            console.log(matrix);

            return matrix;

      - name: Display info in job summary
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          VERSION_FILE: ${{ inputs.version_file }}
        with:
          script: |
            core.summary
              .addHeading(`${context.workflow} environment outputs`)
              .addTable([
                [{data: 'Name', header: true}, {data: 'Value', header: true}],
                ['major_version', '${{ steps.get_version.outputs.major_version }}'],
                ['minor_version', '${{ steps.get_version.outputs.minor_version }}'],
                ['release', '${{ steps.get_release.outputs.release }}'],
                ['stability', '${{ steps.get_stability.outputs.stability }}']
              ]);

            if ("${{ github.head_ref || github.ref_name }}" !== "${{ github.ref_name }}") {
              core.summary.addCodeBlock(
                `flowchart LR; ${{ github.base_ref }} --> ${{ github.head_ref }};`,
                "mermaid"
              );
              core.summary.addCodeBlock(
                `
                  %%{ init: { 'gitGraph': { 'mainBranchName': '${{ github.base_ref }}', showCommitLabel: false } } }%%
                  gitGraph
                    commit
                    branch ${{ github.head_ref }}
                    checkout ${{ github.head_ref }}
                    commit
                `,
                "mermaid"
              );
            }

            core.summary.write();