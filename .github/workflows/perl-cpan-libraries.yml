name: perl-cpan-libraries

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  pull_request:
    paths:
      - ".github/workflows/perl-cpan-libraries.yml"
  push:
    branches:
      - develop
      - dev-[2-9][0-9].[0-9][0-9].x
      - master
      - "[2-9][0-9].[0-9][0-9].x"
    paths:
      - ".github/workflows/perl-cpan-libraries.yml"
    tags:
      - perl-cpan-libraries-*

jobs:
  get-version:
    uses: ./.github/workflows/get-version.yml
    with:
      version_file: centreon/www/install/insertBaseConf.sql

  package:
    needs: [get-version]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        distrib: [el8, el9, bullseye]
        name:
          [
            "boolean",
            "Carp::Assert",
            "Clone",
            "Clone::Choose",
            "common::sense",
            "Convert::EBCDIC",
            "Crypt::Argon2",
            "Crypt::Blowfish_PP",
            "Device::Modbus",
            "Device::Modbus::RTU::Client",
            "Device::Modbus::TCP::Client",
            "Digest::MD5::File",
            "Digest::SHA1",
            "Email::Send::SMTP::Gmail",
            "EV",
            "FFI::CheckLib",
            "FFI::Platypus",
            "File::SearchPath",
            "Hash::Merge",
            "HTTP::Daemon",
            "HTTP::Daemon::SSL",
            "HTTP::ProxyPAC",
            "JMX::Jmx4Perl",
            "JSON::Parse",
            "JSON::Path",
            "JSON::WebToken",
            "Libssh::Session",
            "LV",
            "Net::Curl::Easy",
            "Net::FTPSSL",
            "Net::HTTPTunnel",
            "Net::NTP",
            "Net::SMTPS",
            "Net::SMTP_auth",
            "Net::Subnet",
            "Net::TFTP",
            "Schedule::Cron",
            "Statistics::Descriptive",
            "Statistics::Regression",
            "Sys::SigAction",
            "Term::Clui",
            "Term::ShellUI",
            "URI::Encode",
            "URI::Template",
            "URL::Encode",
            "UUID",
            "UUID::URandom",
            "XML::Filter::BufferText",
            "XML::LibXML::Simple",
            "XML::SAX::Writer",
            "ZMQ::FFI",
          ]
        include:
          - build_rpm: "true"
          - build_deb: "true"
          - rpm_dependencies: ""
          - deb_dependencies: ""
          - rpm_provides: ""
          - version: ""
          - use_dh_make_perl: "true"
          - spec_file: ""
          - distrib: el8
            package_extension: rpm
            image: packaging-alma8
          - distrib: el9
            package_extension: rpm
            image: packaging-alma9
          - distrib: bullseye
            package_extension: deb
            image: packaging-bullseye
          - name: "EV"
            build_deb: "false"
          - name: "FFI::CheckLib"
            build_deb: "false"
          - name: "FFI::Platypus"
            build_deb: "false"
            rpm_provides: "perl(FFI::Platypus::Buffer) perl(FFI::Platypus::Memory)"
          - name: "JSON::Path"
            version: "1.0.3"
          - name: "ZMQ::FFI"
            build_deb: "false"
            rpm_dependencies: "zeromq"
          - name: "Libssh::Session"
            rpm_dependencies: "libssh"
            deb_dependencies: "libssh2-1"
          - name: "Device::Modbus::RTU::Client"
            version: "0.022"
          - name: "Device::Modbus::TCP::Client"
            version: "0.026"
          - name: "Statistics::Regression"
            version: "0.53"
          - name: "UUID"
            use_dh_make_perl: "false"
    name: package ${{ matrix.distrib }} ${{ matrix.name }}
    container:
      image: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}/${{ matrix.image }}:${{ needs.get-version.outputs.major_version }}
      credentials:
        username: ${{ secrets.DOCKER_REGISTRY_ID }}
        password: ${{ secrets.DOCKER_REGISTRY_PASSWD }}

    steps:
      - uses: actions/checkout@v3

      - if: ${{ matrix.build_rpm == 'true' && matrix.package_extension == 'rpm' }}
        run: |
          yum install -y yum-utils epel-release git
          yum config-manager --set-enabled crb || true # alma 9
          yum config-manager --set-enabled powertools || true # alma 8
          yum install -y cpanminus rpm-build libcurl-devel libssh-devel expat-devel gcc ruby libuuid-devel zeromq-devel libxml2-devel libffi-devel
        shell: bash

      - if: ${{ matrix.build_rpm == 'true' && matrix.package_extension == 'rpm' && matrix.spec_file == '' }}
        run: |
          if [ -z "${{ matrix.version }}" ]; then
            PACKAGE_VERSION=""
          else
            PACKAGE_VERSION=" -v ${{ matrix.version }}"
          fi

          if [ -z "${{ matrix.rpm_dependencies }}" ]; then
            PACKAGE_DEPENDENCIES=""
          else
            for PACKAGE_DEPENDENCY in `echo ${{ matrix.rpm_dependencies }}`; do
              PACKAGE_DEPENDENCIES="$PACKAGE_DEPENDENCIES --depends $PACKAGE_DEPENDENCY"
            done
          fi

          if [ -z "${{ matrix.rpm_provides }}" ]; then
            PACKAGE_PROVIDES=""
          else
            for PACKAGE_PROVIDE in `echo "${{ matrix.rpm_provides }}"`; do
              PACKAGE_PROVIDES="$PACKAGE_PROVIDES --provides $PACKAGE_PROVIDE"
            done
          fi

          cpanm Module::Build::Tiny
          cpanm Module::Install

          gem install fpm
          fpm -s cpan -t ${{ matrix.package_extension }} --rpm-dist ${{ matrix.distrib }} --verbose --cpan-verbose --no-cpan-test$PACKAGE_DEPENDENCIES$PACKAGE_PROVIDES$PACKAGE_VERSION ${{ matrix.name }}
        shell: bash

      - if: ${{ matrix.build_rpm == 'true' && matrix.package_extension == 'rpm' && matrix.spec_file != '' }}
        run: |
          mkdir -p ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}

          rpmbuild --undefine=_disable_source_fetch -ba ${{ matrix.spec_file }}

          cp -r ~/rpmbuild/RPMS/noarch/*.rpm .
        shell: bash

      - if: ${{ matrix.build_deb == 'true' && matrix.package_extension == 'deb' && matrix.use_dh_make_perl == 'false' }}
        run: |
          apt update
          apt install -y cpanminus ruby libcurl4-openssl-dev libssh-dev uuid-dev libczmq-dev

          PACKAGE_NAME=`echo ${{ matrix.name }} | sed -e 's/::/-/g' | tr '[A-Z]' '[a-z]' | sed -e 's/^/lib/g' | sed -e 's/$/-perl/g' | sed -e 's/liblib/lib/g'`
          if [ -z "${{ matrix.version }}" ]; then
            PACKAGE_VERSION=""
          else
            PACKAGE_VERSION=" -v ${{ matrix.version }}"
          fi

          if [ -z "${{ matrix.deb_dependencies }}" ]; then
            PACKAGE_DEPENDENCIES=""
          else
            for PACKAGE_DEPENDENCY in `echo ${{ matrix.deb_dependencies }}`; do
              PACKAGE_DEPENDENCIES="$PACKAGE_DEPENDENCIES --depends $PACKAGE_DEPENDENCY"
            done
          fi

          cpanm Module::Build::Tiny
          cpanm Module::Install

          gem install fpm
          fpm -s cpan -t ${{ matrix.package_extension }} --deb-dist ${{ matrix.distrib }} --verbose --cpan-verbose --no-cpan-test -n $PACKAGE_NAME$PACKAGE_DEPENDENCIES$PACKAGE_VERSION ${{ matrix.name }}
        shell: bash

      - if: ${{ matrix.build_deb == 'true' && matrix.package_extension == 'deb' && matrix.use_dh_make_perl == 'true' }}
        run: |
          apt update
          apt install -y cpanminus libcurl4-openssl-dev dh-make-perl libssh-dev uuid-dev libczmq-dev libmodule-install-perl

          if [ -z "${{ matrix.version }}" ]; then
            PACKAGE_VERSION=""
          else
            PACKAGE_VERSION="--version ${{ matrix.version }}-${{ matrix.distrib }}"
          fi

          DEB_BUILD_OPTIONS="nocheck nodocs notest" dh-make-perl make --build $PACKAGE_VERSION --cpan ${{ matrix.name }}
        shell: bash

      - uses: actions/upload-artifact@v3
        with:
          name: packages-${{ matrix.package_extension }}-${{ matrix.distrib }}
          path: ./*.${{ matrix.package_extension }}
          retention-days: 1

  sign-rpm:
    needs: [package]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        distrib: [el8, el9]
    name: sign rpm ${{ matrix.distrib }}
    container:
      image: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}/rpm-signing:ubuntu
      options: -t
      credentials:
        username: ${{ secrets.DOCKER_REGISTRY_ID }}
        password: ${{ secrets.DOCKER_REGISTRY_PASSWD }}

    steps:
      - run: apt-get install -y zstd
        shell: bash

      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: packages-rpm-${{ matrix.distrib }}
          path: ./

      - run: echo "HOME=/root" >> $GITHUB_ENV
        shell: bash

      - run: rpmsign --addsign ./*.rpm
        shell: bash

      - uses: actions/cache@v3
        with:
          path: ./*.rpm
          key: ${{ github.sha }}-${{ github.run_id }}-rpm-${{ matrix.distrib }}

  download-and-cache-deb:
    needs: [package]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: packages-deb-bullseye
          path: ./

      - uses: actions/cache@v3
        with:
          path: ./*.deb
          key: ${{ github.sha }}-${{ github.run_id }}-deb-bullseye

  deliver-rpm:
    needs: [get-version, sign-rpm]
    if: ${{ contains(fromJson('["stable", "testing", "unstable"]'), needs.get-version.outputs.stability) }}
    runs-on: [self-hosted, common]
    strategy:
      matrix:
        distrib: [el8, el9]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Delivery
        uses: ./.github/actions/rpm-delivery
        with:
          distrib: ${{ matrix.distrib }}
          version: ${{ needs.get-version.outputs.major_version }}
          artifactory_token: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}
          cache_key: ${{ github.sha }}-${{ github.run_id }}-rpm-${{ matrix.distrib }}
          update_repo_path: ${{ secrets.UPDATE_REPO_PATH }}
          cloudfront_id: ${{ secrets.CLOUDFRONT_ID }}
          yum_repo_address: ${{ secrets.YUM_REPO_ADDRESS }}
          yum_repo_key: ${{ secrets.YUM_REPO_KEY }}
          stability: ${{ needs.get-version.outputs.stability }}

  deliver-deb:
    needs: [get-version, download-and-cache-deb]
    if: ${{ contains(fromJson('["stable", "testing", "unstable"]'), needs.get-version.outputs.stability) }}
    runs-on: [self-hosted, common]
    strategy:
      matrix:
        distrib: [bullseye]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Delivery
        uses: ./.github/actions/deb-delivery
        with:
          distrib: ${{ matrix.distrib }}
          version: ${{ needs.get-version.outputs.major_version }}
          nexus_username: ${{ secrets.NEXUS_USERNAME }}
          nexus_password: ${{ secrets.NEXUS_PASSWORD }}
          artifactory_token: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}
          cache_key: ${{ github.sha }}-${{ github.run_id }}-deb-${{ matrix.distrib }}
          stability: ${{ needs.get-version.outputs.stability }}
