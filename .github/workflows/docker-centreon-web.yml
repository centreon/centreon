name: docker-centreon-web

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  pull_request:

env:
  base_directory: centreon
  widgets_directory: centreon/www/widgets

jobs:
  get-environment:
    uses: ./.github/workflows/get-environment.yml
    with:
      version_file: centreon/www/install/insertBaseConf.sql

  frontend-web-build:
    needs: [get-environment]
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: ./.github/actions/frontend-build
        with:
          base_directory: ${{ env.base_directory }}
          dependencies_lock_file: ${{ env.base_directory }}/pnpm-lock.yaml
          index_file: ${{ env.base_directory }}/www/index.html
          static_directory: ${{ env.base_directory }}/www/static
          index_cache_key: ${{ github.sha }}-${{ github.run_id }}-index
          static_cache_key: ${{ github.sha }}-${{ github.run_id }}-static
          build_command: pnpm centreon:build

      - name: Create Jira ticket on nightly build failure
        if: |
          needs.get-environment.outputs.is_nightly == 'true' && github.run_attempt == 1 &&
          failure() &&
          startsWith(github.ref_name, 'dev') &&
          github.repository == 'centreon/centreon'
        uses: ./.github/actions/create-jira-ticket
        with:
          jira_base_url: ${{ secrets.JIRA_BASE_URL }}
          jira_user_email: ${{ secrets.XRAY_JIRA_USER_EMAIL }}
          jira_api_token: ${{ secrets.XRAY_JIRA_TOKEN }}
          module_name: "centreon-web"
          ticket_labels: '["Nightly", "Pipeline", "nightly-${{ github.ref_name }}", "${{ github.job }}"]'
          ticket_squad: "Product Backlog"

  backend-dependencies:
    needs: [get-environment]
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup PHP
        uses: shivammathur/setup-php@c541c155eee45413f5b09a52248675b1a2575231 # v2.31.1
        with:
          php-version: 8.2
        env:
          runner: ubuntu-24.04

      - name: Install Dependencies
        run: composer install --no-dev --optimize-autoloader
        working-directory: ${{ env.base_directory }}
        shell: bash

      - name: Cache vendor directory
        uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ${{ env.base_directory }}/vendor
          key: ${{ github.sha }}-${{ github.run_id }}-vendor

  translation-build:
    needs: [get-environment]
    if: ${{ needs.get-environment.outputs.skip_workflow == 'false' }}

    runs-on: ubuntu-24.04
    container:
      image: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}/translation:${{ needs.get-environment.outputs.major_version }}
      credentials:
        username: ${{ secrets.HARBOR_CENTREON_PULL_USERNAME }}
        password: ${{ secrets.HARBOR_CENTREON_PULL_TOKEN }}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.head_ref || github.ref_name }}
          fetch-depth: 10

      - name: Build translations
        id: build-translations
        env:
          IS_NIGHTLY: ${{ needs.get-environment.outputs.is_nightly }}
          EVENT_NAME: ${{ github.event_name }}
          HAS_UPDATE_TRANSLATIONS_LABEL: ${{ contains(needs.get-environment.outputs.labels, 'update-translations') }}
        run: |
          TRANSLATIONS_PATCH_FILE=""

          git config --global --add safe.directory $GITHUB_WORKSPACE

          cd centreon

          for i in lang/*.UTF-8 ; do
            localefull="$(basename "$i")"
            langName="$(echo "$localefull" | cut -d . -f 1)"
            langShortName="$(echo "$localefull" | cut -d _ -f 1)"
            mkdir -p "www/locale/$localefull/LC_MESSAGES"
            bash ../.github/scripts/translation/make_translation.sh centreon $langName
            msgfmt "lang/$localefull/LC_MESSAGES/messages.po" -o "www/locale/$localefull/LC_MESSAGES/messages.mo" || exit 1
            msgfmt "lang/$localefull/LC_MESSAGES/help.po" -o "www/locale/$localefull/LC_MESSAGES/help.mo" || exit 1
            php bin/centreon-translations.php "$langShortName" "lang/$localefull/LC_MESSAGES/messages.po" "www/locale/$localefull/LC_MESSAGES/messages.ser"
          done

          mkdir -p www/locale/en_US.UTF-8/LC_MESSAGES
          php bin/centreon-translations.php en lang/fr_FR.UTF-8/LC_MESSAGES/messages.po www/locale/en_US.UTF-8/LC_MESSAGES/messages.ser

          if [[ `git status --porcelain` ]]; then
            if [[ "$IS_NIGHTLY" == "true" || ( "$EVENT_NAME" == 'pull_request' && "$HAS_UPDATE_TRANSLATIONS_LABEL" == "true" ) ]]; then
              git config user.name "github-actions[bot]"
              git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
              git status
              git add .
              git commit -m "chore(lang): update translations"
              git push
            else
              echo "::notice::Translations have been updated, but the workflow is not a nightly run or does not have the update-translations label. Skipping commit. Git patch will be available as artifact."
              cd ..
              git diff > translations.patch
              TRANSLATIONS_PATCH_FILE="translations.patch"
            fi
          else
            echo "No changes in translations"
          fi

          echo "translations_patch_file=$TRANSLATIONS_PATCH_FILE" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload translations patch
        if: ${{ steps.build-translations.outputs.translations_patch_file != '' }}
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: translations-patch
          path: ${{ steps.build-translations.outputs.translations_patch_file }}
          retention-days: 1

      - uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ${{ env.base_directory }}/www/locale
          key: ${{ github.sha }}-${{ github.run_id }}-translation

  package:
    needs:
      [
        get-environment,
        translation-build,
        backend-dependencies,
        frontend-web-build,
      ]

    strategy:
      fail-fast: false
      matrix:
        include:
          - package_extension: deb
            image: packaging-nfpm-bookworm
            distrib: bookworm

    runs-on: ubuntu-24.04

    container:
      image: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}/${{ matrix.image }}:${{ needs.get-environment.outputs.major_version }}
      credentials:
        username: ${{ secrets.HARBOR_CENTREON_PULL_USERNAME }}
        password: ${{ secrets.HARBOR_CENTREON_PULL_TOKEN }}

    name: package ${{ matrix.distrib }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Restore translation from cache
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: centreon/www/locale
          key: ${{ github.sha }}-${{ github.run_id }}-translation
          fail-on-cache-miss: true

      - name: Restore web index.html from cache
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: centreon/www/index.html
          key: ${{ github.sha }}-${{ github.run_id }}-index
          fail-on-cache-miss: true

      - name: Restore web frontend from cache
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: centreon/www/static
          key: ${{ github.sha }}-${{ github.run_id }}-static
          fail-on-cache-miss: true

      - name: Restore vendor directory from cache
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: centreon/vendor
          key: ${{ github.sha }}-${{ github.run_id }}-vendor
          fail-on-cache-miss: true

      - name: Set perl vendor lib path according to distrib
        run: |
          if [[ "${{ matrix.package_extension }}" == "deb" ]]; then
            PERL_VENDORLIB="/usr/share/perl5"
          else
            PERL_VENDORLIB="/usr/share/perl5/vendor_perl"
          fi
          echo "PERL_VENDORLIB=$PERL_VENDORLIB" >> $GITHUB_ENV
        shell: bash

      - name: Create centreon web configuration file
        run: mv centreon/config/centreon.config.php.template centreon/config/centreon.config.php
        shell: bash

      - name: Remove compilation related files
        run: |
          rm -rf centreon/www/front_src
          rm -rf centreon/www/widgets/src
          find centreon/www/widgets/ -maxdepth 1 -type f ! -name "*.php" ! -name "*.ts" -delete
        shell: bash

      - name: Replace macros in source code
        run: |
          MACRO_REPLACEMENT_FILE="centreon/packaging/src/centreon-macroreplacement.txt"
          if [[ "${{ matrix.package_extension }}" == "rpm" ]]; then
            APACHE_USER="apache"
          else
            APACHE_USER="www-data"
          fi
          echo "s#@WEB_USER@#$APACHE_USER#g" >> $MACRO_REPLACEMENT_FILE

          find ./centreon -type f -not -path "./vendor/*" | grep -v $MACRO_REPLACEMENT_FILE | xargs --delimiter='\n' sed -i -f $MACRO_REPLACEMENT_FILE
        shell: bash

      - name: Generate selinux binaries
        if: ${{ matrix.package_extension == 'rpm' }}
        run: |
          cd centreon/selinux
          sed -i "s/@VERSION@/${{ needs.get-environment.outputs.major_version }}.${{ needs.get-environment.outputs.minor_version }}/g" *.te
          make -f /usr/share/selinux/devel/Makefile
        shell: bash

      - name: Remove selinux packaging files on debian
        if: ${{ matrix.package_extension == 'deb' }}
        run: rm -f centreon/packaging/*-selinux.yaml
        shell: bash

      - name: Package Centreon
        uses: ./.github/actions/package-nfpm
        with:
          nfpm_file_pattern: "centreon/packaging/*.yaml"
          module_name: centreon
          distrib: ${{ matrix.distrib }}
          package_extension: ${{ matrix.package_extension }}
          major_version: ${{ needs.get-environment.outputs.major_version }}
          minor_version: ${{ needs.get-environment.outputs.minor_version }}
          release: ${{ needs.get-environment.outputs.release }}
          arch: all
          commit_hash: ${{ github.sha }}
          cache_key: ${{ github.sha }}-${{ github.run_id }}-${{ matrix.package_extension }}-${{ matrix.distrib }}
          rpm_gpg_key: ${{ secrets.RPM_GPG_SIGNING_KEY }}
          rpm_gpg_signing_key_id: ${{ secrets.RPM_GPG_SIGNING_KEY_ID }}
          rpm_gpg_signing_passphrase: ${{ secrets.RPM_GPG_SIGNING_PASSPHRASE }}
          stability: ${{ needs.get-environment.outputs.stability }}
          is_nightly: ${{ needs.get-environment.outputs.is_nightly }}

      - name: Create Jira ticket on nightly build failure
        if: |
          needs.get-environment.outputs.is_nightly == 'true' && github.run_attempt == 1 &&
          failure() &&
          startsWith(github.ref_name, 'dev') &&
          github.repository == 'centreon/centreon'
        uses: ./.github/actions/create-jira-ticket
        with:
          jira_base_url: ${{ secrets.JIRA_BASE_URL }}
          jira_user_email: ${{ secrets.XRAY_JIRA_USER_EMAIL }}
          jira_api_token: ${{ secrets.XRAY_JIRA_TOKEN }}
          module_name: "centreon-web"
          ticket_labels: '["Nightly", "Pipeline", "nightly-${{ github.ref_name }}", "${{ github.job }}"]'
          ticket_squad: "DevSecOps"

  dockerize:
    runs-on: ubuntu-24.04
    needs: [get-environment, package]
    if: ${{ needs.get-environment.outputs.skip_workflow == 'false' && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') && needs.get-environment.outputs.stability != 'stable' && github.repository == 'centreon/centreon' }}

    env:
      project: centreon-web
    strategy:
      fail-fast: false
      matrix:
        include:
          - operating_system: "bookworm"
            database: "mysql:8.0"

    name: dockerize ${{ matrix.operating_system }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Generate information according to matrix os
        id: matrix_include
        run: |
          if [ "${{ matrix.operating_system }}" = "alma8" ]; then
            DISTRIB=el8
            PACKAGE_EXTENSION=rpm
          elif [ "${{ matrix.operating_system }}" = "alma9" ]; then
            DISTRIB=el9
            PACKAGE_EXTENSION=rpm
          elif [ "${{ matrix.operating_system }}" = "bookworm" ]; then
            DISTRIB=bookworm
            PACKAGE_EXTENSION=deb
          elif [ "${{ matrix.operating_system }}" = "jammy" ]; then
            DISTRIB=jammy
            PACKAGE_EXTENSION=deb
          else
            echo "::error::${{ matrix.operating_system }} is not managed"
            exit 1
          fi

          echo "distrib=$DISTRIB" >> $GITHUB_OUTPUT
          echo "package_extension=$PACKAGE_EXTENSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Login to registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}
          username: ${{ secrets.HARBOR_CENTREON_PUSH_USERNAME }}
          password: ${{ secrets.HARBOR_CENTREON_PUSH_TOKEN }}

      - name: Get FROM image tag
        id: from_image_version
        run: |
          FROM_IMAGE_VERSION="${{ needs.get-environment.outputs.major_version }}"
          FROM_IMAGE="centreon-web-dependencies-collect-${{ matrix.operating_system }}"
          IMAGE_TAG_EXISTS=$(docker manifest inspect ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}/${FROM_IMAGE}:${{ github.head_ref || github.ref_name }} >/dev/null 2>&1 && echo yes || echo no)
          if [[ "$IMAGE_TAG_EXISTS" == "yes" ]]; then
            FROM_IMAGE_VERSION="${{ github.head_ref || github.ref_name }}"
            echo "::notice::FROM image $FROM_IMAGE:$FROM_IMAGE_VERSION will be used to build docker image ${{ env.project }}-${{ matrix.operating_system }}."
          else
            IMAGE_TAG_EXISTS=$(docker manifest inspect ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}/${FROM_IMAGE}:${{ github.base_ref || github.ref_name }} >/dev/null 2>&1 && echo yes || echo no)
            if [[ "$IMAGE_TAG_EXISTS" == "yes" ]]; then
              FROM_IMAGE_VERSION="${{ github.base_ref || github.ref_name }}"
              echo "::notice::FROM image $FROM_IMAGE:$FROM_IMAGE_VERSION will be used to build docker image ${{ env.project }}-${{ matrix.operating_system }}."
            fi
          fi

          echo "from_image_version=$FROM_IMAGE_VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Restore ${{ steps.matrix_include.outputs.package_extension }} files
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ./*.${{ steps.matrix_include.outputs.package_extension }}
          key: ${{ github.sha }}-${{ github.run_id }}-${{ steps.matrix_include.outputs.package_extension }}-${{ steps.matrix_include.outputs.distrib }}
          fail-on-cache-miss: true

      - run: |
          if [ "${{ steps.matrix_include.outputs.package_extension }}" = "rpm" ]; then
            rm -f centreon{,-central,-mariadb,-mysql,-web-selinux}-${{ needs.get-environment.outputs.major_version }}*.rpm
          else
            rm -f centreon{,-central,-mariadb,-mysql}_${{ needs.get-environment.outputs.major_version }}*.deb
          fi

          mkdir packages-centreon
          mv *.${{ steps.matrix_include.outputs.package_extension }} packages-centreon/
        shell: bash

      - uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Build and push web image
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        env:
          DOCKER_BUILD_CHECKS_ANNOTATIONS: false
          DOCKER_BUILD_SUMMARY: false
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          file: .github/docker/${{ env.project }}/${{ matrix.operating_system }}/Dockerfile
          context: .
          build-args: |
            "REGISTRY_URL=${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}"
            "VERSION=${{ needs.get-environment.outputs.major_version }}"
            "FROM_IMAGE_VERSION=${{ steps.from_image_version.outputs.from_image_version }}"
            "STABILITY=${{ needs.get-environment.outputs.stability }}"
            "IS_CLOUD=${{ needs.get-environment.outputs.is_cloud }}"
          secrets: |
            "ARTIFACTORY_INTERNAL_REPO_USERNAME=${{ secrets.ARTIFACTORY_INTERNAL_REPO_USERNAME }}"
            "ARTIFACTORY_INTERNAL_REPO_PASSWORD=${{ secrets.ARTIFACTORY_INTERNAL_REPO_PASSWORD }}"
          pull: true
          push: true
          tags: |
            ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}/${{ env.project }}-${{ matrix.operating_system }}:${{ github.head_ref || github.ref_name }}
