on:
  workflow_call:
    inputs:
      version_file:
        required: true
        type: string
    outputs:
      major_version:
        description: "major version"
        value: ${{ jobs.get-version.outputs.major_version }}
      minor_version:
        description: "minor version"
        value: ${{ jobs.get-version.outputs.minor_version }}
      release:
        description: "release"
        value: ${{ jobs.get-version.outputs.release }}
      stability:
        description: "branch stability (stable, testing, unstable, canary)"
        value: ${{ jobs.get-version.outputs.stability }}
      environment:
        description: "environment deployed"
        value: ${{ jobs.get-version.outputs.environment }}
      os_and_database_matrix:
        description: "matrix to use for dockerize and test jobs"
        value: ${{ jobs.get-version.outputs.os_and_database_matrix }}
      release_type:
        description: "type of release (hotfix, release)"
        value: ${{ jobs.get-version.outputs.release_type }}
      release_cloud:
        description: "context of release (cloud or not cloud)"
        value: ${{ jobs.get-version.outputs.release_cloud }}

jobs:
  get-version:
    runs-on: ubuntu-22.04
    outputs:
      major_version: ${{ steps.get_version.outputs.major_version }}
      minor_version: ${{ steps.get_version.outputs.minor_version }}
      release: ${{ steps.get_version.outputs.release }}
      stability: ${{ steps.get_version.outputs.stability }}
      environment: ${{ steps.get_version.outputs.env }}
      os_and_database_matrix: ${{ steps.get_os_database_matrix.outputs.result }}
      release_type: ${{ steps.get_version.outputs.release_type }}
      release_cloud: ${{ steps.get_version.outputs.release_cloud}}

    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - uses: shivammathur/setup-php@c541c155eee45413f5b09a52248675b1a2575231 # v2.31.1
        if: ${{ endsWith(inputs.version_file, '.php') }}
        with:
          php-version: 8.1
          extensions: none
          tools: none

      - name: install gh cli on self-hosted runner
        run: |
          if ! command -v gh &> /dev/null; then
            echo "Installing GH CLI."
            type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
          else
            echo "GH CLI is already installed."
          fi
        shell: bash

      - id: get_version
        run: |
          set -x
          if [[ "${{ inputs.version_file }}" == */.version ]]; then
            . .version
            . ${{ inputs.version_file }}
            VERSION="$MAJOR.$MINOR"
          elif [[ "${{ inputs.version_file }}" == */insertBaseConf.sql ]]; then
            VERSION=`grep version ${{ inputs.version_file }} | cut -d "'" -f 4 | awk 'NR==2'`
          elif [[ "${{ inputs.version_file }}" == */conf.php ]]; then
            VERSION=`echo 'var_export($module_conf);' | cat ${{ inputs.version_file }} - | php | grep mod_release | cut -d "'" -f 4`
          elif [[ "${{ inputs.version_file }}" == */configs.xml ]]; then
            VERSION=`sed -n 's|\s*<version>\(.*\)</version>|\1|p' ${{ inputs.version_file }} 2>/dev/null`
          elif [[ "${{ inputs.version_file }}" == */pom.xml ]]; then
            VERSION=`grep '<revision>.*</revision>' ${{ inputs.version_file }} | cut -d '>' -f 2 | cut -d - -f 1`
          elif [[ "${{ inputs.version_file }}" == */*.spectemplate ]]; then
            VERSION=`grep 'Version: ' ${{ inputs.version_file }} | rev | cut -d' ' -f1 | rev`
          elif [[ "${{ inputs.version_file }}" == */.env ]]; then
            VERSION=`sed -e '/\[[2-9][0-9].[0-9][0-9].[0-9]+\]/p' ${{ inputs.version_file }} | cut -d '=' -f 2`
          else
            echo "Unable to parse ${{ inputs.version_file }}"
            exit 1
          fi

          echo "VERSION=$VERSION"

          if egrep '^[2-9][0-9]\.[0-9][0-9]\.[0-9]+' <<<"$VERSION" >/dev/null 2>&1 ; then
            n=${VERSION//[!0-9]/ }
            a=(${n//\./ })
            echo "major_version=${a[0]}.${a[1]}" >> $GITHUB_OUTPUT
            MAJOR=${a[0]}.${a[1]}
            echo "minor_version=${a[2]}" >> $GITHUB_OUTPUT
          else
            echo "Cannot parse version number from ${{ inputs.version_file }}"
            exit 1
          fi

          if [[ -z "$GITHUB_HEAD_REF" ]]; then
            BRANCHNAME="$GITHUB_REF_NAME"
          else
            BRANCHNAME="$GITHUB_HEAD_REF"
          fi

          echo "BRANCHNAME is: $BRANCHNAME"

          # Set default release values
          GITHUB_RELEASE_CLOUD=0
          GITHUB_RELEASE_TYPE=$(echo $BRANCHNAME |cut -d '-' -f 1)

          case "$BRANCHNAME" in
            master)
              echo "release=1" >> $GITHUB_OUTPUT
              echo "release_cloud=1" >> $GITHUB_OUTPUT
              echo "release_type=$GITHUB_RELEASE_TYPE" >> $GITHUB_OUTPUT
              ;;
            [2-9][0-9].[0-9][0-9].x)
              echo "release=1" >> $GITHUB_OUTPUT
              echo "release_cloud=0" >> $GITHUB_OUTPUT
              echo "release_type=$GITHUB_RELEASE_TYPE" >> $GITHUB_OUTPUT
              ;;
            develop)
              echo "release=`date +%s`.`echo ${{ github.sha }} | cut -c -7`" >> $GITHUB_OUTPUT
              echo "release_cloud=1" >> $GITHUB_OUTPUT
              echo "release_type=$GITHUB_RELEASE_TYPE" >> $GITHUB_OUTPUT
              ;;
            dev-[2-9][0-9].[0-9][0-9].x)
              echo "release=`date +%s`.`echo ${{ github.sha }} | cut -c -7`" >> $GITHUB_OUTPUT
              echo "release_cloud=0" >> $GITHUB_OUTPUT
              echo "release_type=$GITHUB_RELEASE_TYPE" >> $GITHUB_OUTPUT
              ;;
            release* | hotfix*)
              # Handle workflow_dispatch run triggers and run a dispatch ONLY for cloud release
              GITHUB_RELEASE_BRANCH_BASE_REF_NAME="$(gh pr view $BRANCHNAME -q .baseRefName --json headRefName,baseRefName,state)"
              echo "GITHUB_RELEASE_BRANCH_BASE_REF_NAME is: $GITHUB_RELEASE_BRANCH_BASE_REF_NAME"
              GITHUB_RELEASE_BRANCH_PR_STATE="$(gh pr view $BRANCHNAME -q .state --json headRefName,baseRefName,state)"
              echo "GITHUB_RELEASE_BRANCH_PR_STATE is: $GITHUB_RELEASE_BRANCH_PR_STATE"

              # Check if the release context (cloud and hotfix or cloud and release)
              if [[ "$GITHUB_RELEASE_BRANCH_BASE_REF_NAME" == "master" ]] && [[ "$GITHUB_RELEASE_BRANCH_PR_STATE" == "OPEN" ]]; then
                # Get release pull request ID
                GITHUB_RELEASE_BRANCH_PR_NUMBER="$(gh pr view $BRANCHNAME -q .[] --json number)"
                # Set release cloud to 1 (0=not-cloud, 1=cloud)
                GITHUB_RELEASE_CLOUD=1
                # Debug
                echo "GITHUB_RELEASE_TYPE is: $GITHUB_RELEASE_TYPE"
                echo "GITHUB_RELEASE_BRANCH_PR_NUMBER is: $GITHUB_RELEASE_BRANCH_PR_NUMBER" # We do leave this here as a debug help.
                echo "GITHUB_RELEASE_CLOUD is: $GITHUB_RELEASE_CLOUD"
                # Github ouputs
                echo "release=`date +%s`.`echo ${{ github.sha }} | cut -c -7`" >> $GITHUB_OUTPUT
                echo "release_type=$GITHUB_RELEASE_TYPE" >> $GITHUB_OUTPUT
                echo "release_cloud=$GITHUB_RELEASE_CLOUD" >> $GITHUB_OUTPUT
              else
                echo "release=1" >> $GITHUB_OUTPUT
                echo "release_cloud=$GITHUB_RELEASE_CLOUD" >> $GITHUB_OUTPUT
                echo "release_type=$GITHUB_RELEASE_TYPE" >> $GITHUB_OUTPUT
              fi
              ;;
            prepare-release-cloud*)
              # Set release cloud to 1 (0=not-cloud, 1=cloud)
              GITHUB_RELEASE_CLOUD=1
              # Debug
              echo "GITHUB_RELEASE_TYPE is: $GITHUB_RELEASE_TYPE"
              echo "GITHUB_RELEASE_CLOUD is: $GITHUB_RELEASE_CLOUD"
              # Github ouputs
              echo "release=`date +%s`.`echo ${{ github.sha }} | cut -c -7`" >> $GITHUB_OUTPUT
              echo "release_type=$GITHUB_RELEASE_TYPE" >> $GITHUB_OUTPUT
              echo "release_cloud=$GITHUB_RELEASE_CLOUD" >> $GITHUB_OUTPUT
              ;;
            *)
              # Any branch name
              GITHUB_BRANCH_BASE_REF_NAME="$(gh pr view $BRANCHNAME -q .baseRefName --json headRefName,baseRefName,state)"
              GITHUB_BRANCH_PR_STATE="$(gh pr view $BRANCHNAME -q .state --json headRefName,baseRefName,state)"
              echo "release=`date +%s`.`echo ${{ github.sha }} | cut -c -7`" >> $GITHUB_OUTPUT

              # Check if pull request branch targeting develop
              if [[ "$GITHUB_BRANCH_BASE_REF_NAME" == "develop" ]] && [[ "$GITHUB_BRANCH_PR_STATE" == "OPEN" ]]; then
                echo "release_cloud=1" >> $GITHUB_OUTPUT
                echo "release_type=$GITHUB_RELEASE_TYPE" >> $GITHUB_OUTPUT
              else
                echo "release_cloud=$GITHUB_RELEASE_CLOUD" >> $GITHUB_OUTPUT
                echo "release_type=$GITHUB_RELEASE_TYPE" >> $GITHUB_OUTPUT
              fi
              ;;
          esac

          case "$BRANCHNAME" in
            develop | dev-[2-9][0-9].[0-9][0-9].x)
              STABILITY="unstable"
              ENV="development"
              ;;
            release* | hotfix*)
              STABILITY="testing"
              ENV="testing"
              ;;
            master | [2-9][0-9].[0-9][0-9].x)
              STABILITY="stable"
              ENV="production"
              ;;
            pkgtest-*)
              STABILITY="pkgtest"
              ENV="development"
              ;;
            *)
              STABILITY="canary"
              ENV="development"
              ;;
          esac
          echo "stability=$STABILITY" >> $GITHUB_OUTPUT
          echo "env=$MAJOR-$ENV" >> $GITHUB_OUTPUT
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}

      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: get_os_database_matrix
        with:
          script: |
            const alma9_mariadb = {
              "operating_system": "alma9",
              "database": "mariadb:10.11",
              "test_tags": "not @ignore"
            };
            const alma8_mariadb = {
              "operating_system": "alma8",
              "database": "mariadb:10.11",
              "test_tags": "not @ignore and @system"
            };
            const bookworm_mysql = {
              "operating_system": "bookworm",
              "database": "mysql:8.3",
              "test_tags": "not @ignore"
            };
            const bullseye_mysql = {
              "operating_system": "bullseye",
              "database": "mysql:8.3",
              "test_tags": "not @ignore and @system"
            };

            let matrix = {
              "main": [alma9_mariadb],
              "operating_systems": [alma9_mariadb],
              "databases": [alma9_mariadb],
            };

            if (context.eventName === 'schedule') {
              matrix = {
                "main": [alma9_mariadb],
                "operating_systems": [alma9_mariadb, alma8_mariadb, bookworm_mysql, bullseye_mysql],
                "databases": [alma9_mariadb, bookworm_mysql],
              };
            }

            console.log(matrix);

            return matrix;
