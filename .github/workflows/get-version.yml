on:
  workflow_call:
    inputs:
      version_file:
        required: true
        type: string
    outputs:
      major_version:
        description: "major version"
        value: ${{ jobs.get-version.outputs.major_version }}
      minor_version:
        description: "minor version"
        value: ${{ jobs.get-version.outputs.minor_version }}
      release:
        description: "release"
        value: ${{ jobs.get-version.outputs.release }}

jobs:
  get-version:
    runs-on: [self-hosted, common]
    outputs:
      major_version: ${{ steps.get_version.outputs.major_version }}
      minor_version: ${{ steps.get_version.outputs.minor_version }}
      release: ${{ steps.get_version.outputs.release }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: shivammathur/setup-php@v2
        if: ${{ endsWith(inputs.version_file, '.php') }}
        with:
          php-version: 8.1
        env:
          runner: self-hosted

      - id: get_version
        run: |
          if [[ "${{ inputs.version_file }}" == */insertBaseConf.sql ]]; then
            VERSION=`grep version ${{ inputs.version_file }} | cut -d "'" -f 4 | awk 'NR==2'`
          elif [[ "${{ inputs.version_file }}" == */conf.php ]]; then
            VERSION=`echo 'var_export($module_conf);' | cat ${{ inputs.version_file }} - | php | grep mod_release | cut -d "'" -f 4`
          elif [[ "${{ inputs.version_file }}" == */configs.xml ]]; then
            VERSION=`sed -n 's|\s*<version>\(.*\)</version>|\1|p' ${{ inputs.version_file }} 2>/dev/null`
          elif [[ "${{ inputs.version_file }}" == */pom.xml ]]; then
            VERSION=`grep '<revision>.*</revision>' ${{ inputs.version_file }} | cut -d '>' -f 2 | cut -d - -f 1`
          elif [[ "${{ inputs.version_file }}" == */*.spectemplate ]]; then
            VERSION=`grep 'Version: ' ${{ inputs.version_file }} | rev | cut -d' ' -f1 | rev`
          else
            echo "Unable to parse ${{ inputs.version_file }}"
            exit 1
          fi

          echo "VERSION=$VERSION"

          if egrep '^[2-9][0-9]\.[0-9][0-9]\.[0-9]+' <<<"$VERSION" >/dev/null 2>&1 ; then
            n=${VERSION//[!0-9]/ }
            a=(${n//\./ })
            echo "major_version=${a[0]}.${a[1]}" >> $GITHUB_OUTPUT
            echo "minor_version=${a[2]}" >> $GITHUB_OUTPUT
          else
            echo "Cannot parse version number from ${{ inputs.version_file }}"
            exit 1
          fi

          if [[ -z "$GITHUB_HEAD_REF" ]]; then
            BRANCHNAME="$GITHUB_REF_NAME"
          else
            BRANCHNAME="$GITHUB_HEAD_REF"
          fi
          case "$BRANCHNAME" in
            master | [2-9][0-9].[0-9][0-9].x | release* | hotfix*)
              echo "release=$GITHUB_RUN_ATTEMPT" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "release=`date +%s`.${{ github.sha }}" >> $GITHUB_OUTPUT
              ;;
          esac
        shell: bash
