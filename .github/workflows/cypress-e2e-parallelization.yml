on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      module_name:
        required: true
        type: string
      database_image:
        required: true
        type: string
      image_name:
        required: true
        type: string
      os:
        required: true
        type: string
      features_path:
        required: true
        type: string
      major_version:
        required: true
        type: string
      minor_version:
        required: true
        type: string
      stability:
        required: true
        type: string
      package_cache_key:
        required: false
        type: string
      package_directory:
        required: false
        type: string
      dependencies_lock_file:
        required: true
        type: string
        description: "The frontend dependencies lock file path"
      xray_keys_and_ids:
        description: "The test execution and the test plan keys and ids"
        required: true
        type: string
    secrets:
      registry_username:
        required: true
      registry_password:
        required: true
      xray_client_id:
        required: true
      xray_client_secret:
        required: true

jobs:
  cypress-e2e-test-list:
    runs-on: ubuntu-22.04
    outputs:
      features: ${{ steps.list-features.outputs.features }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: List features
        id: list-features
        run: |
          cd ${{ inputs.module_name }}
          echo "features=$(find ${{ inputs.features_path }} -type f -name "*.feature" -printf "%P\n" | sort | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

  cypress-e2e-test-run:
    needs: [cypress-e2e-test-list]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        feature: ${{ fromJson(needs.cypress-e2e-test-list.outputs.features) }}
    name: ${{ matrix.feature }}

    env:
      IMAGE_TAG: ${{ github.head_ref || github.ref_name }}
      SLIM_IMAGE_NAME: ${{ inputs.image_name }}-slim-${{ inputs.os }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Restore packages
        if: "${{ inputs.package_cache_key != '' && inputs.package_directory != '' && contains(matrix.feature, 'platform-') }}"
        uses: actions/cache/restore@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4.0.0
        with:
          path: ./*.${{ contains(inputs.os, 'alma') && 'rpm' || 'deb' }}
          key: ${{ inputs.package_cache_key }}
          fail-on-cache-miss: true

      - name: Move packages
        if: "${{ inputs.package_cache_key != '' && inputs.package_directory != '' && contains(matrix.feature, 'platform-') }}"
        run: |
          mkdir -p ${{ inputs.package_directory }}
          mv ./*.${{ contains(inputs.os, 'alma') && 'rpm' || 'deb' }} ${{ inputs.package_directory }}
        shell: bash

      - name: Login to Registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}
          username: ${{ secrets.registry_username }}
          password: ${{ secrets.registry_password }}

      - name: Restore standard slim image from cache
        id: cache-docker-slim
        uses: actions/cache/restore@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4.0.0
        continue-on-error: true
        timeout-minutes: 6
        with:
          path: /tmp/cache/docker-image
          key: docker-image-${{ env.SLIM_IMAGE_NAME }}-${{ env.IMAGE_TAG }}
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 5

      - name: Load standard slim image
        if: ${{ steps.cache-docker-slim.outputs.cache-hit == 'true' }}
        run: |
          docker load --input /tmp/cache/docker-image/${{ env.SLIM_IMAGE_NAME }}.tar
          docker tag ${{ env.SLIM_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}/${{ env.SLIM_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        shell: bash

      - name: Test Execution Key
        id: get-test-execution-key
        run: |
          test_execution_key=$(echo '${{ inputs.xray_keys_and_ids }}' | jq -r '.test_execution_key_'${{ inputs.os }})
          echo "The Test Execution KEY : $test_execution_key"
          echo "test_execution_key=$test_execution_key" >> $GITHUB_OUTPUT
        shell: bash

      - name: Cypress e2e testing
        uses: ./.github/actions/cypress-e2e-testing
        with:
          name: ${{ inputs.name }}
          database_image: ${{ inputs.database_image }}
          web_image_os: ${{ inputs.os }}
          web_image_version: ${{ github.head_ref || github.ref_name }}
          openid_image_version: ${{ inputs.major_version }}
          saml_image_version: ${{ inputs.major_version }}
          module: centreon
          feature_file_path: ${{ matrix.feature }}
          dependencies_lock_file: ${{ inputs.dependencies_lock_file }}
          test_execution_key: ${{ steps.get-test-execution-key.outputs.test_execution_key }}

      - name: Replace / with - in the feature path
        id: feature-path
        if: always()
        run: |
          feature_name="${{ matrix.feature }}"
          feature_name_with_dash="${feature_name//\//-}"
          echo "Modified Feature Name: $feature_name_with_dash"
          echo "feature_name_with_dash=$feature_name_with_dash" >> $GITHUB_OUTPUT

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: ${{ inputs.name }}-${{ inputs.os }}-test-results-${{ steps.feature-path.outputs.feature_name_with_dash }}
          path: ${{ inputs.module_name }}/tests/e2e/results/
          retention-days: 1

      - name: Upload test reports
        if: failure()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: ${{ inputs.name }}-${{ inputs.os }}-test-reports-${{ steps.feature-path.outputs.feature_name_with_dash }}
          path: ${{ inputs.module_name }}/tests/e2e/results/reports/*.json
          retention-days: 1

      - name: Upload xray reports
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: ${{ inputs.name }}-${{ inputs.os }}-xray-reports-${{ steps.feature-path.outputs.feature_name_with_dash }}
          path: ${{ inputs.module_name }}/tests/e2e/results/cucumber-logs/*.json
          retention-days: 1

  # This action is only for NIGHTLY and testing branches
  import-reports-to-xray:
    needs: [cypress-e2e-test-run]
    if: ${{ always() && (inputs.stability == 'testing' || github.event_name == 'schedule') }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - uses: pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d # v3.0.0
        with:
          version: 7

      - name: Download Artifacts
        uses: actions/download-artifact@f44cd7b40bfd40b6aa1cc1b9b5b7bf03d3c67110 # v4.1.0
        with:
          pattern: ${{ inputs.name }}-${{ inputs.os }}-xray-reports-*
          path: ${{ inputs.name }}-json-xray-reports
          merge-multiple: true

      - name: Generate Xray Token
        id: generate-xray-token
        run: |
          token_response=$(curl -H "Content-Type: application/json" -X POST --data "{\"client_id\": \"${{ secrets.XRAY_CLIENT_ID }}\", \"client_secret\": \"${{ secrets.XRAY_CLIENT_SECRET }}\"}" "https://xray.cloud.getxray.app/api/v1/authenticate")
          xray_token=$(echo "$token_response" | sed -n 's/.*"\(.*\)".*/\1/p')
          echo "xray_token=$xray_token" >> $GITHUB_OUTPUT
        shell: bash

      - name: Keys
        run: |
          test_execution_key=$(echo '${{ inputs.xray_keys_and_ids }}' | jq -r '.test_execution_key_'${{ inputs.os }})
          test_plan_key=$(echo '${{ inputs.xray_keys_and_ids }}' | jq -r '.test_plan_key_'${{ inputs.os }})
          echo "The Test Execution KEY : $test_execution_key"
          echo "The Test Plan KEY: $test_plan_key"

      - name: Import results to xray
        run: |
          for file in "${{ inputs.name }}-json-xray-reports/"*.json
          do
            curl -H "Content-Type: application/json" -X POST -H "Authorization: Bearer ${{ steps.generate-xray-token.outputs.xray_token }}" --data @"$file" https://xray.cloud.getxray.app/api/v2/import/execution/cucumber
          done

  cypress-e2e-test-report:
    needs: [cypress-e2e-test-run]
    if: failure()
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - uses: pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d # v3.0.0
        with:
          version: 8

      - name: Download Artifacts
        uses: actions/download-artifact@f44cd7b40bfd40b6aa1cc1b9b5b7bf03d3c67110 # v4.1.0
        with:
          pattern: ${{ inputs.name }}-${{ inputs.os }}-test-reports-*
          path: ${{ inputs.name }}-json-reports
          merge-multiple: true

      - name: Merge reports
        run: pnpx mochawesome-merge "${{ inputs.name }}-json-reports/**/*.json" > mochawesome.json
        shell: bash

      - name: Publish report
        uses: ./.github/actions/publish-report
        with:
          check_name: ${{ inputs.name }}-report
          path: mochawesome.json
          format: cypress
          urlFilePrefix: centreon

  regroup-artifacts:
    needs: [cypress-e2e-test-run, import-reports-to-xray, cypress-e2e-test-report]
    if: always()
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        type_of_report: [test-results, test-reports, xray-reports]
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Merging Artifacts
        uses: ./.github/actions/merge-artifacts
        if: ${{ ( contains(needs.cypress-e2e-test-run.result, 'failure') && ( matrix.type_of_report == 'test-results' || matrix.type_of_report == 'test-reports' ) ) || matrix.type_of_report == 'xray-reports' }}
        with:
          target_name: ${{ inputs.name }}-${{ inputs.os }}-${{ matrix.type_of_report }}
          source_paths: ${{ inputs.name }}-${{ inputs.os }}-${{ matrix.type_of_report }}/**/*.json
          source_name_pattern: ${{ inputs.name }}-${{ inputs.os }}-${{ matrix.type_of_report }}-
          github_token: ${{ secrets.GITHUB_TOKEN }}
