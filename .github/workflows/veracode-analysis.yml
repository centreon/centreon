# Veracode scans
on:
  workflow_call:
    inputs:
      module_directory:
        required: true
        type: string
      module_name:
        required: true
        type: string
      major_version:
        required: true
        type: string
      minor_version:
        required: true
        type: string
      stability:
        required: true
        type: string

    secrets:
      veracode_api_id:
        required: true
      veracode_api_key:
        required: true
      veracode_srcclr_token:
        required: true

jobs:
  sca-scan:
    name: Run a SCA scan
    # only stable and unstable maintenance branches will produce a report
    if: needs.build.outputs.development_stage != 'Development'
    runs-on: ubuntu-latest
    continue-on-error: ${{ vars.VERACODE_CONTINUE_ON_ERROR == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Removing pnpm dependencies
        run: |
          cd ${{ inputs.module_directory }}
          echo "[DEBUG] - package-lock.json scan disabled"

          ls -la

          find ./ -name "composer.*"

          if [[ -f "package-lock.json" ]]; then
            rm -f package-lock.json
          fi

          if [[ -f "package.json" ]]; then
            rm -f package.json
          fi

          if [[ -f "composer.lock" ]]; then
            echo "trigger_sca_scan=true" >> $GITHUB_ENV
          fi

          ls -la

      - name: debug condition
        run: |
          echo "env trigger value = ${{ env.trigger_sca_scan }}

      - name: SCA scan
        if: env.trigger_sca_scan == 'true'
        env:
          SRCCLR_API_TOKEN: ${{ secrets.veracode_srcclr_token }}
          SRCCLR_REGION: "ER"

        uses: sc979/veracode-sca@v1.10
        # This action is based on the following command:
        # curl -sSL https://download.sourceclear.com/ci.sh | sh -s -- scan "./${{ inputs.module_directory }}" --debug
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          create-issues: false
          fail-on-cvss: 9
          allow-dirty: true
          path: "./${{ inputs.module_directory }}"
