# Veracode scans
on:
  workflow_call:
    inputs:
      module_directory:
        required: true
        type: string
      module_name:
        required: true
        type: string
      major_version:
        required: true
        type: string
      minor_version:
        required: true
        type: string
      stability:
        required: true
        type: string
      is_perl_project:
        required: false
        type: boolean

    secrets:
      veracode_api_id:
        required: true
      veracode_api_key:
        required: true
      veracode_srcclr_token:
        required: true
      jira_base_url:
        required: true
      jira_user_email:
        required: true
      jira_api_token:
        required: true

jobs:
  build:
    name: Binary preparation
    runs-on: ubuntu-22.04
    outputs:
      fail_build: ${{ steps.routing-mode.outputs.fail_build }}
      development_stage: ${{ steps.routing-mode.outputs.development_stage }}
      display_summary: ${{ steps.routing-mode.outputs.display_summary }}
      enable_qg: ${{ steps.routing-mode.outputs.enable_qg }}

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Generate binary file
        uses: ./.github/actions/veracode-generate-binary
        with:
          module_directory: "${{ inputs.module_directory }}"
          cache_key: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary"

      - name: Set routing mode
        id: routing-mode
        run: |
          ENABLE_QG=true
          #if [[ "${{ vars.VERACODE_QUALITY_GATE }}" == false ]] || [[ -n "${{ vars.VERACODE_EXCEPTION_ON_PR }}" && "${{ vars.VERACODE_EXCEPTION_ON_PR }}" == "${{ github.event.pull_request.number }}" ]]; then
          #  ENABLE_QG="false"
          #fi

          CHECK_BRANCH=`echo "${{ github.ref_name }}" | cut -d'/' -f2`
          if [[ $CHECK_BRANCH != "merge" && '${{ github.event_name }}' != 'pull_request' && '${{ inputs.stability }}' == 'stable' ]]; then
            # e.g master
            FAIL_BUILD="false"
            DEVELOPMENT_STAGE="Release"
            DISPLAY_SUMMARY="false"
          elif [[ $CHECK_BRANCH != "merge" && '${{ github.event_name }}' != 'pull_request' && '${{ inputs.stability }}' == 'unstable' ]]; then
            # e.g develop
            FAIL_BUILD="$ENABLE_QG"
            DEVELOPMENT_STAGE="Testing"
            DISPLAY_SUMMARY="false"
          elif [[ $CHECK_BRANCH == "merge" && -n '${{ github.head_ref }}' && '${{ github.head_ref }}' =~ ^release-[2-9][0-9].[0-9][0-9]-next ]]; then
            # e.g release-23.04-next
            FAIL_BUILD="false"
            DEVELOPMENT_STAGE="Development"
            DISPLAY_SUMMARY="false"
          else
            FAIL_BUILD="$ENABLE_QG"
            DEVELOPMENT_STAGE="Development"
            DISPLAY_SUMMARY="true"
          fi

          echo "fail_build=$FAIL_BUILD" >> $GITHUB_OUTPUT
          echo "development_stage=$DEVELOPMENT_STAGE" >> $GITHUB_OUTPUT
          echo "display_summary=$DISPLAY_SUMMARY" >> $GITHUB_OUTPUT
          echo "enable_qg=$ENABLE_QG" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

  pipeline-scan:
    needs: [build]
    name: Run a pipeline scan
    if: inputs.is_perl_project != true
    runs-on: [self-hosted, common]

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Get build binary
        uses: actions/cache/restore@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4.0.0
        with:
          path: "${{ inputs.module_directory }}/${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.zip"
          key: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary"
          fail-on-cache-miss: true

      - name: Get baseline files
        run: |
          set -e
          # Install aws cli
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo unzip -q awscliv2.zip
          sudo ./aws/install

          # Find baseline file
          baseline_file_path=""
          create_baseline_from=""
          BUCKET="s3://centreon-veracode-reports/${{ inputs.module_name }}"
          if [[ "${{ inputs.stability }}" == "testing" ]] || [[ ${{ github.base_ref || github.ref_name }} =~ ^hotfix-[2-9][0-9].[0-9][0-9]-next ]]; then
            TARGETS=( "${{ github.base_ref || github.ref_name }}" "${{ inputs.major_version }}.x" master )
          else
            TARGETS=( "${{ github.base_ref || github.ref_name }}" "dev-${{ inputs.major_version }}.x" develop )
          fi

          for TARGET in ${TARGETS[@]}; do
            RESULT=0
            echo "[INFO] - Searching baseline file for $TARGET's"
            aws s3 ls "$BUCKET/$TARGET/results.json" || RESULT=$( echo $? )
            if [[ $RESULT -eq 0 ]]; then
              aws s3 cp "$BUCKET/$TARGET/results.json" "/tmp/results.json"
              echo "[INFO] - Found $TARGET's baseline file"
              baseline_file_path="/tmp/results.json"
              create_baseline_from="standard"
              break
            else
              echo "::warning::Baseline file not found for branch $TARGET"
            fi
          done

          echo "baseline_file=$baseline_file_path" >> $GITHUB_ENV
          echo "create_baseline_from=$create_baseline_from" >> $GITHUB_ENV
          cat $GITHUB_ENV

      - uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93 # v4.0.0
        with:
          distribution: 'zulu'
          java-version: 8

      - name: Pipeline scan
        run: |
          ls -la toto

      - name: Create jira ticket
        # In case of QG failure, a ticket must be created
        if: needs.build.outputs.enable_qg == 'false' || (failure() && github.event.pull_request.draft == false)
        uses: ./.github/actions/veracode-create-jira-ticket
        with:
          jira_base_url: ${{ secrets.jira_base_url }}
          jira_user_email: ${{ secrets.jira_user_email }}
          jira_api_token: ${{ secrets.jira_api_token }}
          module_name: ${{ inputs.module_name }}
