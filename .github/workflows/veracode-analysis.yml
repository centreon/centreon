# Veracode scans
on:
  workflow_call:
    inputs:
      module_directory:
        required: true
        type: string
      module_name:
        required: true
        type: string
      major_version:
        required: true
        type: string
      minor_version:
        required: true
        type: string
      stability:
        required: true
        type: string
      is_perl_project:
        required: false
        type: boolean

    secrets:
      veracode_api_id:
        required: true
      veracode_api_key:
        required: true
      veracode_srcclr_token:
        required: true
      jira_base_url:
        required: true
      jira_user_email:
        required: true
      jira_api_token:
        required: true

jobs:
  build:
    name: Binary preparation
    runs-on: ubuntu-22.04
    outputs:
      fail_build: ${{ steps.routing-mode.outputs.fail_build }}
      development_stage: ${{ steps.routing-mode.outputs.development_stage }}
      display_summary: ${{ steps.routing-mode.outputs.display_summary }}

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Generate binary file
        uses: ./.github/actions/veracode-generate-binary
        with:
          module_directory: "${{ inputs.module_directory }}"
          cache_key: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary"

      - name: Set routing mode
        id: routing-mode
        run: |
          CHECK_BRANCH=`echo "${{ github.ref_name }}" | cut -d'/' -f2`
          if [[ $CHECK_BRANCH != "merge" && '${{ github.event_name }}' != 'pull_request' && '${{ inputs.stability }}' == 'stable' ]]; then
            # e.g master
            FAIL_BUILD="false"
            DEVELOPMENT_STAGE="Release"
            DISPLAY_SUMMARY="false"
          elif [[ $CHECK_BRANCH != "merge" && '${{ github.event_name }}' != 'pull_request' && '${{ inputs.stability }}' == 'unstable' ]]; then
            # e.g develop
            FAIL_BUILD="${{ vars.VERACODE_QUALITY_GATE }}"
            DEVELOPMENT_STAGE="Testing"
            DISPLAY_SUMMARY="false"
          elif [[ $CHECK_BRANCH == "merge" && -n '${{ github.head_ref }}' && '${{ github.head_ref }}' =~ ^release-[2-9][0-9].[0-9][0-9]-next ]]; then
            # e.g release-23.04-next
            FAIL_BUILD="false"
            DEVELOPMENT_STAGE="Development"
            DISPLAY_SUMMARY="false"
          else
            FAIL_BUILD="${{ vars.VERACODE_QUALITY_GATE }}"
            DEVELOPMENT_STAGE="Development"
            DISPLAY_SUMMARY="true"
          fi

          echo "fail_build=$FAIL_BUILD" >> $GITHUB_OUTPUT
          echo "development_stage=$DEVELOPMENT_STAGE" >> $GITHUB_OUTPUT
          echo "display_summary=$DISPLAY_SUMMARY" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

  pipeline-scan:
    needs: [build]
    name: Run a pipeline scan
    if: inputs.is_perl_project != true
    runs-on: [self-hosted, common]

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Get build binary
        uses: actions/cache/restore@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4.0.0
        with:
          path: "${{ inputs.module_directory }}/${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.zip"
          key: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary"
          fail-on-cache-miss: true

      - name: Get baseline files
        run: |
          set -e
          # Install aws cli
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo unzip -q awscliv2.zip
          sudo ./aws/install

          # Find baseline file
          baseline_file_path=""
          create_baseline_from=""

          echo "baseline_file=$baseline_file_path" >> $GITHUB_ENV
          echo "create_baseline_from=$create_baseline_from" >> $GITHUB_ENV
          cat $GITHUB_ENV

      - uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93 # v4.0.0
        with:
          distribution: 'zulu'
          java-version: 8


      - name: Backup analysis reports
        if: success() || failure()
        run: |
          echo "[DEBUG] downloaded baseline details in /tmp"
          ls -la /tmp
          echo "[DEBUG] current location details of analysis results"
          pwd
          ls -la

          function backup_baseline(){
            echo "" # adding a blank line
            if [[ -z $1 ]]; then
              echo "[ERROR] Missing mandatory parameters to backup baseline file"
              exit 0
            fi
            CURRENT_NAME=$1

            # specific case for downloaded baseline file
            if [[ -n $2 && "$2" != "downloaded" ]]; then
              echo "[ERROR] Missing downloaded baseline mandatory parameter to continue"
              exit 0
            fi
            [[ -n $2 ]] && TARGET=$BASE_BRANCH || TARGET=$CURRENT_PR
            [[ -n $2 ]] && FILENAME="/tmp/$CURRENT_NAME" || FILENAME="$CURRENT_NAME"
            [[ -n $2 ]] && NEW_NAME="baseline.json" || NEW_NAME=$CURRENT_NAME

            echo "[DEBUG] FILENAME = $FILENAME"
            if [[ -s "$FILENAME" ]]; then
              FILE_DETAILS=$( stat -c '%s %y' "$FILENAME" )
              DETAILS=(${FILE_DETAILS//\ / })

              FILE_SIZE=${DETAILS[0]}
              CREATION_DATE=${DETAILS[1]}
              CREATION_TIME=$( echo "${DETAILS[2]}" | cut -d ':' -f1-2 | tr ':' 'h' )
              cp "$FILENAME" "/tmp/backup/$TARGET.$CREATION_DATE.$CREATION_TIME.size$FILE_SIZE.$NEW_NAME"
            else
              echo "[WARN] - no $CURRENT_NAME found for FILENAME. Skipping it"
            fi
          }

          CURRENT_DATE=$( date +"%Y-%m-%d" )
          CURRENT_PR="PR-"$( echo "${{ github.ref_name }}" | cut -d '/' -f1 )
          BASE_BRANCH=${{ github.base_ref || github.ref_name }}
          BACKUP_LOCATION="s3://centreon-veracode-reports/${{ inputs.module_name }}/debug/$CURRENT_PR"

          # saving all reports
          mkdir /tmp/backup
          backup_baseline "results.json"
          backup_baseline "filtered_results.json"

          echo "[DEBUG] - begin search"
          ls -la
          ls -la ..
          find ./ -name "*veracode-binary.zip"
          echo "[DEBUG] - end search"

          cp $( find ./ -name "*veracode-binary.zip" ) "/tmp/backup"
          echo "[DEBUG] - copy done"
          ZIPNAME="$CURRENT_PR.$CURRENT_DATE.${{github.run_id}}.zip"
          cd /tmp/backup && zip "$ZIPNAME" *
          aws s3 cp "/tmp/backup/$ZIPNAME" "$BACKUP_LOCATION/$ZIPNAME"

      - name: Create jira ticket
        if: success() || failure()
        uses: ./.github/actions/veracode-create-jira-ticket
        with:
          jira_base_url: ${{ secrets.jira_base_url }}
          jira_user_email: ${{ secrets.jira_user_email }}
          jira_api_token: ${{ secrets.jira_api_token }}
          module_name: ${{ inputs.module_name }}

      - name: Save baseline files
        if: success() || failure()
        run: |
          BRANCHES=(develop master dev-${{ inputs.major_version }}.x ${{ inputs.major_version }}.x)
          for BRANCH in "${BRANCHES[@]}"; do
            if [[ "${{ github.ref_name }}" == "$BRANCH" ]]; then
              mv *results.json /tmp
              BUCKET="s3://centreon-veracode-reports/support_case_00832599_bis_${{ inputs.module_name }}/${{ github.base_ref || github.ref_name }}"
              aws s3 cp "/tmp/filtered_results.json" "$BUCKET/filtered_results.json"
              aws s3 cp "/tmp/results.json" "$BUCKET/results.json"
            fi
          done

  clean-artifact:
    needs: [pipeline-scan]
    name: Clean artifact
    if: success() || failure()
    runs-on: ubuntu-latest

    steps:
      - uses: geekyeggo/delete-artifact@65041433121f7239077fa20be14c0690f70569de # v4.1.0
        with:
          name: "Veracode Pipeline-Scan Results"

  policy-scan:
    needs: [build]
    name: Run a sandbox scan
    runs-on: ubuntu-latest

    steps:
      - name: Get build binary
        uses: actions/cache/restore@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4.0.0
        with:
          path: "${{ inputs.module_directory }}/${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.zip"
          key: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary"
          fail-on-cache-miss: true

      - name: Sandbox scan
        uses: veracode/veracode-uploadandscan-action@f7e1fbf02c5c899fba9f12e3f537b62f2f1230e1 # master
        continue-on-error: true
        with:
          appname: "support_case_00832599_bis_${{ inputs.module_name }}"
          version: "develop_support_case_00832599_bis-${{ github.run_id }}"
          filepath: "${{ inputs.module_directory }}/${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.zip"
          vid: "vera01ei-${{ secrets.veracode_api_id }}"
          vkey: "vera01es-${{ secrets.veracode_api_key }}"
          createprofile: true
          createsandbox: true
          sandboxname: "support_case_00832599_bis"
          scantimeout: 120
          includenewmodules: true
          scanallnonfataltoplevelmodules: true
          deleteincompletescan: 1
          scanpollinginterval: 120  # time between two checks in seconds / [30 to 120]
