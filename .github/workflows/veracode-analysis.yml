# Veracode scans
on:
  workflow_call:
    inputs:
      module_directory:
        required: true
        type: string
      module_name:
        required: true
        type: string
      major_version:
        required: true
        type: string
      minor_version:
        required: true
        type: string
      stability:
        required: true
        type: string
    secrets:
      veracode_api_id:
        required: true
      veracode_api_key:
        required: true

jobs:
  build:
    name: Binary preparation
    runs-on: ubuntu-22.04
    outputs:
      fail_build: ${{ steps.routing-mode.outputs.fail_build }}
      development_stage: ${{ steps.routing-mode.outputs.development_stage }}
      display_summary: ${{ steps.routing-mode.outputs.display_summary }}

    steps:
      - uses: actions/checkout@v3

      - name: Generate binary file
        uses: ./.github/actions/veracode-generate-binary
        with:
          module_directory: "${{ inputs.module_directory }}"
          cache_key: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary"

      - name: Set routing mode
        id: routing-mode
        run: |
          if [[ '${{ github.event_name }}' != 'pull_request' && '${{ inputs.stability }}' == 'stable' ]]; then
            echo "fail_build=false" >> $GITHUB_OUTPUT
            echo "development_stage=Release" >> $GITHUB_OUTPUT
            echo "display_summary=false" >> $GITHUB_OUTPUT
          elif [[ '${{ github.event_name }}' != 'pull_request' && '${{ inputs.stability }}' == 'unstable' ]]; then
            echo "fail_build=true" >> $GITHUB_OUTPUT
            echo "development_stage=Testing" >> $GITHUB_OUTPUT
            echo "display_summary=true" >> $GITHUB_OUTPUT
          else
            echo "fail_build=true" >> $GITHUB_OUTPUT
            echo "development_stage=Development" >> $GITHUB_OUTPUT
            echo "display_summary=true" >> $GITHUB_OUTPUT
          fi

#  pipeline-scan:
#    needs: [build]
#    name: Run a pipeline scan
#    runs-on: [self-hosted, veracode]
#
#    steps:
#      - name: Get build binary
#        uses: actions/cache/restore@v3
#        with:
#          path: "${{ inputs.module_directory }}/${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.zip"
#          key: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary"
#
#      - name: Get baseline files
#        run: |
#          BUCKET="s3://centreon-veracode-reports/${{ inputs.module_name }}/${{ github.base_ref || github.ref_name }}"
#          aws s3 ls "$BUCKET/filtered_results.json" || RESULT=$( echo $? )
#          if [[ $RESULT -eq 0 ]]; then
#            aws s3 cp "$BUCKET/filtered_results.json" "/tmp/filtered_results.json"
#            echo "baseline_file=/tmp/filtered_results.json" >> $GITHUB_ENV
#            echo "create_baseline_from=filtered" >> $GITHUB_ENV
#          else
#            echo "[DEBUG] - Filtered baseline file not found in the bucket"
#            aws s3 ls "$BUCKET/results.json" || RESULT=$( echo $? )
#            if [[ $RESULT -eq 0 ]]; then
#              aws s3 cp "$BUCKET/results.json" "/tmp/results.json"
#              echo "baseline_file=/tmp/results.json" >> $GITHUB_ENV
#              echo "create_baseline_from=standard" >> $GITHUB_ENV
#            else
#              echo "[DEBUG] - Standard baseline file not found in the bucket"
#              echo "baseline_file=" >> $GITHUB_ENV
#              echo "create_baseline_from=" >> $GITHUB_ENV
#            fi
#          fi
#
#      - uses: actions/setup-java@v3
#        with:
#          distribution: 'zulu'
#          java-version: 8
#
#      - name: Pipeline scan
#        uses: veracode/Veracode-pipeline-scan-action@v1.0.3
#        with:
#          vid: '${{ secrets.veracode_api_id }}'
#          vkey: '${{ secrets.veracode_api_key }}'
#          file: "${{ inputs.module_directory }}/${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.zip"
#          baseline_file: "${{ env.baseline_file }}"
#          create_baseline_from: "${{ env.create_baseline_from }}"
#          fail_build: false #TODO: Do not fail the jobs until grace period ends
#          #fail_build: '${{ needs.build.outputs.fail_build }}'
#          fail_on_severity: "Medium"
#          timeout: 60
#          development_stage: '${{ needs.build.outputs.development_stage }}'
#          summary_display: '${{ needs.build.outputs.display_summary }}'
#          issue_details: '${{ needs.build.outputs.display_summary }}'
#
#      - name: Save baseline files
#        # only baseline files not generated from a development branch are saved
#        if: needs.build.outputs.development_stage != 'Development'
#        run: |
#          mv *results.json /tmp
#          BUCKET="s3://centreon-veracode-reports/${{ inputs.module_name }}/${{ github.base_ref || github.ref_name }}"
#          aws s3 cp "/tmp/filtered_results.json" "$BUCKET/filtered_results.json"
#          aws s3 cp "/tmp/results.json" "$BUCKET/results.json"

  clean-sandbox:
    name: Clean old sandbox scan
    runs-on: ubuntu-latest

    steps:
      - name: Delete sandbox scan
        continue-on-error: true
        env:
          VERACODE_API_ID: '${{ secrets.veracode_api_id }}'
          VERACODE_API_SECRET: '${{ secrets.veracode_api_key }}'
        uses: lerer/veracode-sandboxes-helper@v1.0.1
        with:
          activity: "remove-sandbox"
          app-name: "centreon-web" # TODO to revert before merge
          #sandbox-name: "${{ github.ref_name }}" # TODO to revert before merge
          sandbox-name: "fake_develop"

  policy-scan:
    needs: [build, clean-sandbox]
    name: Run a sandbox scan
    #if: needs.build.outputs.development_stage != 'Development' # TODO to revert before merge
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - name: Get build binary
        uses: actions/cache/restore@v3
        with:
          path: "${{ inputs.module_directory }}/${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.zip"
          key: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary"

      - name: Run a sandbox scan
        uses: veracode/veracode-uploadandscan-action@master
        with:
          appname: "centreon-web" # TODO to revert before merge
          version: "${{ inputs.major_version }}.${{ inputs.minor_version }}_runId-${{ github.run_id }}"
          filepath: "${{ inputs.module_directory }}/${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.zip"
          vid: '${{ secrets.veracode_api_id }}'
          vkey: '${{ secrets.veracode_api_key }}'
          createprofile: true
          createsandbox: true
          sandboxname: "fake_develop" # TODO to revert before merge
          criticality: "Low"
          scantimeout: 60
          includenewmodules: true
          scanallnonfataltoplevelmodules: true
          deleteincompletescan: 1
          scanpollinginterval: 60 # time between two checks in seconds / [30 to 120]


      - name: Promote sandbox scan to policy
        #if: '!cancelled()' && github.ref_name == 'develop' # TODO to revert before merge
        env:
          VERACODE_API_ID: '${{ secrets.veracode_api_id }}'
          VERACODE_API_SECRET: '${{ secrets.veracode_api_key }}'
        uses: lerer/veracode-sandboxes-helper@v1.0.1
        with:
          activity: "promote-latest-scan"
          app-name: "centreon-web" # TODO to revert before merge
          #sandbox-name: "${{ github.ref_name }}-${{ github.sha }}" # TODO to revert before merge
          sandbox-name: "fake_develop"
          delete-on-promote: 'true'
