# Veracode scans
on:
  workflow_call:
    inputs:
      module_directory:
        required: true
        type: string
      module_name:
        required: true
        type: string
      major_version:
        required: true
        type: string
      minor_version:
        required: true
        type: string
      stability:
        required: true
        type: string

    secrets:
      veracode_api_id:
        required: true
      veracode_api_key:
        required: true
      veracode_srcclr_token:
        required: true

jobs:
  build:
    name: Binary preparation
    runs-on: ubuntu-22.04
    outputs:
      fail_build: ${{ steps.routing-mode.outputs.fail_build }}
      development_stage: ${{ steps.routing-mode.outputs.development_stage }}
      display_summary: ${{ steps.routing-mode.outputs.display_summary }}

    steps:
      - uses: actions/checkout@v3

      - name: Generate binary file
        uses: ./.github/actions/veracode-generate-binary
        with:
          module_directory: "${{ inputs.module_directory }}"
          cache_key: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary"

      - name: Set routing mode
        id: routing-mode
        run: |
          if [[ '${{ github.event_name }}' != 'pull_request' && '${{ inputs.stability }}' == 'stable' ]]; then
            echo "fail_build=false" >> $GITHUB_OUTPUT
            echo "development_stage=Release" >> $GITHUB_OUTPUT
            echo "display_summary=false" >> $GITHUB_OUTPUT
          elif [[ '${{ github.event_name }}' != 'pull_request' && '${{ inputs.stability }}' == 'unstable' ]]; then
            echo "fail_build=${{ vars.VERACODE_QUALITY_GATE }}" >> $GITHUB_OUTPUT
            echo "development_stage=Testing" >> $GITHUB_OUTPUT
            echo "display_summary=false" >> $GITHUB_OUTPUT
          else
            echo "fail_build=${{ vars.VERACODE_QUALITY_GATE }}" >> $GITHUB_OUTPUT
            echo "development_stage=Development" >> $GITHUB_OUTPUT
            echo "display_summary=true" >> $GITHUB_OUTPUT
          fi

  pipeline-scan:
    needs: [build]
    name: Run a pipeline scan
    runs-on: [self-hosted, veracode]

    steps:
      - name: Get build binary
        uses: actions/cache/restore@v3
        with:
          path: "${{ inputs.module_directory }}/${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.zip"
          key: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary"

      - name: Get baseline files
        run: |
          BUCKET="s3://centreon-veracode-reports/${{ inputs.module_name }}"
          aws s3 ls "$BUCKET/${{ github.base_ref || github.ref_name }}/results.json" || RESULT=$( echo $? )
          if [[ $RESULT -eq 0 ]]; then
            aws s3 cp "$BUCKET/${{ github.base_ref || github.ref_name }}/results.json" "/tmp/results.json"
            echo "[INFO] - Found ${{ github.base_ref || github.ref_name }} Baseline file"
            echo "baseline_file=/tmp/results.json" >> $GITHUB_ENV
            echo "create_baseline_from=standard" >> $GITHUB_ENV
          else
            RESULT=0
            echo "[WARN] - Baseline file not found for branch ${{ github.base_ref || github.ref_name }}"
            echo "[INFO] - Trying with default (develop's) Baseline file"
            aws s3 ls "$BUCKET/develop/results.json" || RESULT=$( echo $? )
            if [[ $RESULT -eq 0 ]]; then
              echo "[INFO] - Found default Baseline file"
              aws s3 cp "$BUCKET/develop/results.json" "/tmp/results.json"
              echo "baseline_file=/tmp/results.json" >> $GITHUB_ENV
              echo "create_baseline_from=standard" >> $GITHUB_ENV
            else
              echo "[ERROR] - Default baseline file not found in the bucket"
              echo "baseline_file=" >> $GITHUB_ENV
              echo "create_baseline_from=" >> $GITHUB_ENV
            fi
          fi

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - name: Pipeline scan
        uses: veracode/Veracode-pipeline-scan-action@v1.0.8
        continue-on-error: ${{ vars.VERACODE_CONTINUE_ON_ERROR == 'true' }}
        with:
          vid: "vera01ei-${{ secrets.veracode_api_id }}"
          vkey: "vera01es-${{ secrets.veracode_api_key }}"
          file: "${{ inputs.module_directory }}/${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.zip"
          baseline_file: "${{ env.baseline_file }}"
          create_baseline_from: "${{ env.create_baseline_from }}"
          fail_build: '${{ needs.build.outputs.fail_build }}'
          fail_on_severity: "'Very High','High'"
          timeout: 60
          development_stage: '${{ needs.build.outputs.development_stage }}'
          summary_display: '${{ needs.build.outputs.display_summary }}'
          issue_details: '${{ needs.build.outputs.display_summary }}'

      - name: Backup analysis reports
        # debug step used to investigate support case
        if: success() || failure()
        run: |
          echo "[DEBUG] downloaded baseline details in /tmp"
          ls -la /tmp

          echo "[DEBUG] current location"
          pwd
          echo "[DEBUG] current location details on analysis results"
          ls -la


          function backup_baseline(){
            if [[ -z $1 ]]; then
              echo "[ERROR] Missing mandatory parameters to backup baseline file"
              exit 0
            fi
            CURRENT_NAME=$1
            echo "[INFO] inside function"
            echo "[INFO] CURRENT_NAME = $CURRENT_NAME"

            # specific case for downloaded baseline file
            if [[ -n $2 && "$2" == "downloaded" && ( -z $3 || -z $4 ) ]]; then
              echo "[ERROR] Missing downloaded baseline mandatory parameters to continue"
              exit 0
            fi
            [[ -n $2 ]] && TARGET=$BASE_BRANCH || TARGET=$CURRENT_PR
            [[ -n $3 ]] && FILENAME="$3/$CURRENT_NAME" || FILENAME="$CURRENT_NAME"
            [[ -n $4 ]] && NEW_NAME=$4 || NEW_NAME=$CURRENT_NAME

            echo "[INFO] FILENAME = $FILENAME"
            echo "[INFO] NEW_NAME = $NEW_NAME"
            echo "[DEBUG] target details"
            ls -la "$FILENAME"
            echo "[DEBUG] current location"
            pwd

            if [[ -s "$FILENAME" ]]; then
              FILE_SIZE=$( ls -AgG --time-style=long-iso "$FILENAME" | cut -d ' ' -f3 )
              echo "[INFO] FILE_SIZE = $FILE_SIZE"
              CREATION_DATE=$( ls -AgG --time-style=long-iso "$FILENAME" | cut -d ' ' -f4 )
              echo "[INFO] CREATION_DATE = $CREATION_DATE"
              CREATION_TIME=$( ls -AgG --time-style=long-iso "$FILENAME" | cut -d ' ' -f5 | tr ':' 'h' )
              echo "[INFO] CREATION_TIME = $CREATION_TIME"
              #echo "test s3 results = $BACKUP_LOCATION/$TARGET.$CREATION_DATE.$CREATION_TIME.size$FILE_SIZE.$NEW_NAME"
              aws s3 cp "./results.json" "$BACKUP_LOCATION/$TARGET.$CREATION_DATE.$CREATION_TIME.size$FILE_SIZE.$NEW_NAME"
            else
              echo "[WARN] - no $CURRENT_NAME found for FILENAME"
            fi
          }

          CURRENT_DATE=$( date +"%Y-%m-%d" )
          echo "[DEBUG] CURRENT_DATE = $CURRENT_DATE"
          CURRENT_PR="PR-"$( echo "${{ github.ref_name }}" | cut -d '/' -f1 )
          echo "[DEBUG] CURRENT_PR = $CURRENT_PR"
          BASE_BRANCH=${{ github.base_ref || github.ref_name }}
          echo "[DEBUG] BASE_BRANCH = $BASE_BRANCH"
          BACKUP_LOCATION="s3://centreon-veracode-reports/${{ inputs.module_name }}/debug"
          echo "[DEBUG] BACKUP_LOCATION = $BACKUP_LOCATION"

          # renaming baseline file if found
          backup_baseline "results.json" "downloaded" "/tmp" "baseline.json"

          # saving results
          backup_baseline "results.json"

          # saving filtered results
          backup_baseline "filtered_results.json"*

      - name: Save baseline files
        # only baseline files not generated from a development branch are saved
        if: success() && needs.build.outputs.development_stage != 'Development'
        run: |
          mv *results.json /tmp
          ls -la /tmp
          BUCKET="s3://centreon-veracode-reports/${{ inputs.module_name }}/${{ github.base_ref || github.ref_name }}"
          aws s3 cp "/tmp/filtered_results.json" "$BUCKET/filtered_results.json"
          aws s3 cp "/tmp/results.json" "$BUCKET/results.json"

  Clean-artifact:
    needs: [pipeline-scan]
    name: Clean artifact
    if: success() || failure()
    runs-on: ubuntu-latest

    steps:
      - uses: geekyeggo/delete-artifact@v2
        with:
          name: "Veracode Pipeline-Scan Results"
