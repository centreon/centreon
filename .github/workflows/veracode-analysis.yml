# Veracode scans
on:
  workflow_call:
    inputs:
      module_directory:
        required: true
        type: string
      module_name:
        required: true
        type: string
      major_version:
        required: true
        type: string
      minor_version:
        required: true
        type: string
      stability:
        required: true
        type: string

    secrets:
      veracode_api_id:
        required: true
      veracode_api_key:
        required: true
      veracode_srcclr_token:
        required: true

jobs:
  build:
    name: Binary preparation
    runs-on: ubuntu-22.04
    outputs:
      fail_build: ${{ steps.routing-mode.outputs.fail_build }}
      development_stage: ${{ steps.routing-mode.outputs.development_stage }}
      display_summary: ${{ steps.routing-mode.outputs.display_summary }}

    steps:
      - uses: actions/checkout@v4

      - name: Generate binary file
        uses: ./.github/actions/veracode-generate-binary
        with:
          module_directory: "${{ inputs.module_directory }}"
          cache_key: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary"

      - name: Set routing mode
        id: routing-mode
        run: |
          CHECK_BRANCH=`echo "${{ github.ref_name }}" | cut -d'/' -f2`
          if [[ $CHECK_BRANCH != "merge" && '${{ github.event_name }}' != 'pull_request' && '${{ inputs.stability }}' == 'stable' ]]; then
            FAIL_BUILD="false"
            DEVELOPMENT_STAGE="Release"
            DISPLAY_SUMMARY="false"
          elif [[ $CHECK_BRANCH != "merge" && '${{ github.event_name }}' != 'pull_request' && '${{ inputs.stability }}' == 'unstable' ]]; then
            FAIL_BUILD="${{ vars.VERACODE_QUALITY_GATE }}"
            DEVELOPMENT_STAGE="Testing"
            DISPLAY_SUMMARY="false"
          else
            FAIL_BUILD="${{ vars.VERACODE_QUALITY_GATE }}"
            DEVELOPMENT_STAGE="Development"
            DISPLAY_SUMMARY="true"
          fi
          echo "fail_build=$FAIL_BUILD" >> $GITHUB_OUTPUT
          echo "development_stage=$DEVELOPMENT_STAGE" >> $GITHUB_OUTPUT
          echo "display_summary=$DISPLAY_SUMMARY" >> $GITHUB_OUTPUT

          echo "[INFO] - fail_build = $FAIL_BUILD"
          echo "[INFO] - development_stage = $DEVELOPMENT_STAGE"
          echo "[INFO] - display_summary = $DISPLAY_SUMMARY"
          echo "[INFO] - check if PR branch = $CHECK_BRANCH"

  sca-scan:
    needs: [build]
    name: Run a SCA scan
    # only stable and unstable maintenance branches will produce a report
    #if: needs.build.outputs.development_stage != 'Development'
    runs-on: ubuntu-latest
    continue-on-error: ${{ vars.VERACODE_CONTINUE_ON_ERROR == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Removing pnpm dependencies
        run: |
          cd ${{ inputs.module_directory }}
          echo "[DEBUG] - pnpm dependencies analysis disabled"
          find ./ -type f -not \( -name "package.json" -o -name "package-lock.json" -o -name "npm-shrinkwrap.json" \) -delete

          if [[ -f composer.lock ]]; then
            echo "trigger_sca_scan=true" >> $GITHUB_ENV
          fi

      - name: SCA scan
        if: env.trigger_sca_scan == 'true'
        env:
          SRCCLR_API_TOKEN: ${{ secrets.veracode_srcclr_token }}
          SRCCLR_REGION: "ER"

        uses: sc979/veracode-sca@v1.10
        # This action is based on the following command:
        # curl -sSL https://download.sourceclear.com/ci.sh | sh -s -- scan "./${{ inputs.module_directory }}" --debug
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          create-issues: false
          allow-dirty: true
          path: "./${{ inputs.module_directory }}"
          recursive: true
