name: Performance Testing

on:
  pull_request:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      os:
        required: true
        type: string
      container_name:
        required: true
        type: string
      centreon_url:
        required: true
        type: string
      centreon_image:
        required: true
        type: string
      database_image:
        required: true
        type: string
      major_version:
        required: true
        type: string
      stability:
        required: true
        type: string

jobs:
  performance-test:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: centreon/tests/performanceTesting

    env:
      IMAGE_TAG: ${{ github.head_ref || github.ref_name }}
      SLIM_IMAGE_NAME: ${{ inputs.image_name }}-slim-${{ inputs.os }}
      CONTAINER_NAME: ${{ inputs.container_name }}
      CENTREON_URL: ${{ inputs.centreon_url }}
      WEB_IMAGE: ${{ inputs.centreon_image }}
      DATABASE_IMAGE: ${{ inputs.database_image }}
      CSV_FILE_PATH: users.csv

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm ci

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}
          username: ${{ secrets.HARBOR_CENTREON_PULL_USERNAME }}
          password: ${{ secrets.HARBOR_CENTREON_PULL_TOKEN }}

      - name: Restore Standard Slim Image from Cache
        id: cache-docker-slim
        uses: actions/cache/restore@v4
        continue-on-error: true
        timeout-minutes: 6
        with:
          path: /tmp/cache/docker-image
          key: docker-image-${{ env.SLIM_IMAGE_NAME }}-${{ env.IMAGE_TAG }}
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 5

      - name: Load Standard Slim Image
        if: steps.cache-docker-slim.outputs.cache-hit == 'true'
        run: |
          docker load --input /tmp/cache/docker-image/centreon-web-slim-alma9.tar
          docker tag docker.centreon.com/centreon/centreon-web-slim-alma9:MON-159979

      - name: Start Centreon Web and Database Containers
        env:
            WEB_IMAGE: 'docker.centreon.com/centreon/centreon-web-slim-alma9:MON-159979'
            MYSQL_IMAGE: 'bitnami/mariadb:10.11'
        run: |
            docker compose --profile web -f ../../../.github/docker/docker-compose.yml up -d --wait

            if [[ -f "../../../.github/docker/setup.sh" ]]; then
                echo "Running setup.sh ..."
                bash -ex "../../../.github/docker/setup.sh"
            fi

            if [[ -f "../../../.github/docker/setup-web.sh" ]]; then
                echo "Running setup-web.sh ..."
                docker compose -f ../../../.github/docker/docker-compose.yml cp ../../../.github/docker/setup-web.sh web:/tmp/setup-web.sh
                docker compose -f ../../../.github/docker/docker-compose.yml exec web bash -ex "/tmp/setup-web.sh"
            fi
        shell: bash

      - name: Adding Hosts
        run: node addingHosts.mjs

      - name: Adding Users
        run: node AddingUsers.mjs

      - name: Install JMeter
        run: |
          sudo apt update
          sudo apt install -y jmeter

      - name: Create JMeter Results Directory
        run: mkdir -p jmeterFolder/jmeter_results

      - name: Run Performance Testing with JMeter
        run: |
          jmeter -n \
            -t jmeterFolder/test.jmx \
            -l jmeterFolder/jmeter_results/results.jtl \
            -e -o jmeterFolder/jmeter_results \
            --loglevel DEBUG

      - name: Upload JMeter Results
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-results
          path: jmeterFolder/jmeter_results
