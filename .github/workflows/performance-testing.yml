name: Performance Testing

on:
  pull_request:
  workflow_call:  # Permet d'exécuter depuis un autre workflow
    inputs:
      image_name:
        required: true
        type: string
      os:
        required: true
        type: string
      container_name:
        required: true
        type: string
      centreon_url:
        required: true
        type: string
      centreon_image:
        required: true
        type: string
      database_image:
        required: true
        type: string
      major_version:
        required: true
        type: string
      stability:
        required: true
        type: string

jobs:
  performance-test:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: centreon/tests/performanceTesting

    env:
    #   DATABASE_URL: mysql://centreon:centreon@127.0.0.1:22222/centreon
    #   CENTREON_API_URL: http://localhost:4000
    #   LOGIN: admin
    #   PASSWORD: Centreon!2021
    #   API_BASE_URL: http://localhost:4000/centreon/api/index.php
    #   NUMBER_OF_USERS: 100
    #   NUMBER_OF_HOSTS: 10
    #   NUMBER_OF_SERVICES: 10
    #   NUMBER_OF_HOSTGROUPS: 30
    #   NUMBER_OF_METASERVICES: 3
    #   NUMBER_OF_SERVICES_CATEGORIS: 2
    #   NUMBER_OF_SERVICE_GROUPS: 2
    #   LOCAL_RUN: true
      IMAGE_TAG: ${{ github.head_ref || github.ref_name }}
      SLIM_IMAGE_NAME: ${{ inputs.image_name }}-slim-${{ inputs.os }}
      CONTAINER_NAME: ${{ inputs.container_name }}
      CENTREON_URL: ${{ inputs.centreon_url }}
      WEB_IMAGE: ${{ inputs.centreon_image }}
      DATABASE_IMAGE: ${{ inputs.database_image }}
      CSV_FILE_PATH: users.csv


    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4  # Récupère le code source

      - name: Setup Node.js
        uses: actions/setup-node@v4.2.0
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm ci  # Installation des dépendances en mode clean

      - name: Login to Docker Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}
          username: ${{ secrets.HARBOR_CENTREON_PULL_USERNAME }}
          password: ${{ secrets.HARBOR_CENTREON_PULL_TOKEN }}

      - name: Vérifier la présence du fichier .jmx
        run: |
         ls -la /github/workspace/jmeterFolder/test.jmx

      - name: Print environment variables
        run: |
            echo "WEB_IMAGE: $WEB_IMAGE"
            echo "MYSQL_IMAGE: $MYSQL_IMAGE"
            echo "GLPI_IMAGE: $GLPI_IMAGE"

      - name: Restore Standard Slim Image from Cache
        id: cache-docker-slim
        uses: actions/cache/restore@v4.2.0
        continue-on-error: true
        timeout-minutes: 6
        with:
          path: /tmp/cache/docker-image
          key: docker-image-${{ env.SLIM_IMAGE_NAME }}-${{ env.IMAGE_TAG }}
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 5

      - name: Load Standard Slim Image
        if: ${{ steps.cache-docker-slim.outputs.cache-hit == 'true' }}
        run: |
          docker load --input /tmp/cache/docker-image/${{ env.SLIM_IMAGE_NAME }}.tar
          docker tag ${{ env.SLIM_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}/${{ env.SLIM_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Start Centreon Web and Database Containers
        env:
            WEB_IMAGE: 'docker.centreon.com/centreon/centreon-web-slim-alma9:MON-159979'
            MYSQL_IMAGE: 'bitnami/mariadb:10.11'
        run: |
            # Démarrer les services Docker avec docker-compose
            docker compose --profile web -f ../../../.github/docker/docker-compose.yml up -d --wait

            # Vérifier si un script de configuration est nécessaire et l'exécuter
            if [[ -f "../../../.github/docker/setup.sh" ]]; then
            echo "Running setup.sh ..."
            bash -ex "../../../.github/docker/setup.sh"
            fi

            # Exécuter un script de configuration supplémentaire pour le service web si nécessaire
            if [[ -f "../../../.github/docker/setup-web.sh" ]]; then
            echo "Running setup-web.sh ..."
            docker compose -f ../../../.github/docker/docker-compose.yml cp ../../../.github/docker/setup-web.sh web:/tmp/setup-web.sh
            docker compose -f ../../../.github/docker/docker-compose.yml exec web bash -ex "/tmp/setup-web.sh"
            fi
        shell: bash


      - name: Run Performance Testing Script
        run: node addingHosts.mjs  # Exécute ton script


      - name: Adding users
        run: node AddingUsers.mjs  # Exécute ton script

      - name: Run Performance Testing with JMeter
        uses: rbhadti94/apache-jmeter-action@v0.7.0
        with:
          testFilePath: "jmeterFolder/test.jmx"  # Chemin vers ton fichier .jmx
          outputReportsFolder: "./jmeter_results"  # Répertoire pour les résultats
          args: "--loglevel INFO -JMyProperty=Value --jmeterlogconf=log.conf"
        env:
          JMETER_HOME: "/usr/share/jmeter"
          JAVA_HOME: "/usr/lib/jvm/java-8-openjdk-amd64"
          CSV_FILE_PATH: ${{ env.CSV_FILE_PATH }}