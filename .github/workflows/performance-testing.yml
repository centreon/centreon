name: Performance Testing

on:
  pull_request:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      os:
        required: true
        type: string
      container_name:
        required: true
        type: string
      centreon_url:
        required: true
        type: string
      centreon_image:
        required: true
        type: string
      database_image:
        required: true
        type: string
      major_version:
        required: true
        type: string
      stability:
        required: true
        type: string

jobs:
  performance-test:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: centreon/tests/performanceTesting

    env:
      IMAGE_TAG: ${{ github.head_ref || github.ref_name }}
      SLIM_IMAGE_NAME: ${{ inputs.image_name }}-slim-${{ inputs.os }}
      CONTAINER_NAME: ${{ inputs.container_name }}
      CENTREON_URL: ${{ inputs.centreon_url }}
      WEB_IMAGE: ${{ inputs.centreon_image }}
      DATABASE_IMAGE: ${{ inputs.database_image }}
      CSV_FILE_PATH: users.csv

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4.2.0
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm ci

      - name: Login to Docker Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}
          username: ${{ secrets.HARBOR_CENTREON_PULL_USERNAME }}
          password: ${{ secrets.HARBOR_CENTREON_PULL_TOKEN }}

      - name: Start Centreon Web and Database Containers
        env:
          WEB_IMAGE: 'docker.centreon.com/centreon/centreon-web-slim-alma9:MON-159979'
          MYSQL_IMAGE: 'bitnami/mariadb:10.11'
        run: |
            docker compose --profile web -f ../../../.github/docker/docker-compose.yml up -d --wait
            if [[ -f "../../../.github/docker/setup.sh" ]]; then
            echo "Running setup.sh ..."
            bash -ex "../../../.github/docker/setup.sh"
            fi
            if [[ -f "../../../.github/docker/setup-web.sh" ]]; then
            echo "Running setup-web.sh ..."
            docker compose -f ../../../.github/docker/docker-compose.yml cp ../../../.github/docker/setup-web.sh web:/tmp/setup-web.sh
            docker compose -f ../../../.github/docker/docker-compose.yml exec web bash -ex "/tmp/setup-web.sh"
            fi
        shell: bash

      - name: Adding hosts
        run: node addingHosts.mjs

      - name: Adding users
        run: node AddingUsers.mjs

      - name: Install JMeter
        run: |
          java -version
          echo "Finding latest JMeter version..."
          JMETER_VERSION=$(curl -s https://downloads.apache.org/jmeter/binaries/ | grep -oP 'apache-jmeter-\d+\.\d+\.\d+\.zip' | sort -V | tail -n 1 | sed 's/apache-jmeter-\(.*\).zip/\1/')
          echo "Latest JMeter version: $JMETER_VERSION"
          echo "Downloading JMeter..."
          wget -q "https://downloads.apache.org/jmeter/binaries/apache-jmeter-${JMETER_VERSION}.zip" -O jmeter.zip || { echo "Download failed!"; exit 1; }
          echo "Unzipping JMeter..."
          unzip -q jmeter.zip || { echo "Unzip failed!"; exit 1; }
          rm jmeter.zip
          echo "JMeter installed successfully!"

      - name: Run JMX Scripts
        run: |
          JMETER_DIR=$(ls -d $GITHUB_WORKSPACE/centreon/tests/performanceTesting/apache-jmeter-*/bin)
          cd $JMETER_DIR || { echo "JMeter bin directory not found!"; exit 1; }

          mkdir -p $GITHUB_WORKSPACE/centreon/tests/performanceTesting/jmeterFolder/jmeter_results
          for i in $GITHUB_WORKSPACE/centreon/tests/performanceTesting/jmeterFolder/*.jmx; do
              echo "Running test: $i"
              ./jmeter -n -t "$i" -l $GITHUB_WORKSPACE/jmeter_results/results_$(basename "$i" .jmx).jtl
          done
          echo "Tests completed!"

      - name: Verify performance-results-parser installation
        run: |
          which performance-results-parser || echo "performance-results-parser not found"
          npx performance-results-parser --version || echo "npx: performance-results-parser not found"

      - name: Parse JMeter Results
        run: |
          echo "Parsing JMeter results..."
          mkdir -p $GITHUB_WORKSPACE/jmeter_parsed_results
          npx performance-results-parser -r $GITHUB_WORKSPACE/jmeter_results -o $GITHUB_WORKSPACE/jmeter_parsed_results
          echo "Parsing completed!"

      - name: Upload JMeter Results
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-results
          path: jmeter_results

      - name: Upload Parsed JMeter Results
        uses: actions/upload-artifact@v4
        with:
          name: parsed-jmeter-results
          path: jmeter_parsed_results