name: Performance Testing

on:
  workflow_dispatch:  # Permet d'exécuter manuellement le workflow
    inputs:
      image_name:
        description: "Nom de l'image"
        required: true
        type: string
      os:
        description: "Système d'exploitation"
        required: true
        type: string
      container_name:
        description: "Nom du conteneur"
        required: true
        type: string
      centreon_url:
        description: "URL de Centreon"
        required: true
        type: string
      centreon_image:
        description: "Image Docker Centreon"
        required: true
        type: string
      database_image:
        description: "Image Docker de la base de données"
        required: true
        type: string
      major_version:
        description: "Version majeure de Centreon"
        required: true
        type: string
      stability:
        description: "Stabilité de l'environnement"
        required: true
        type: string

  workflow_call:  # Permet d'exécuter depuis un autre workflow
    inputs:
      image_name:
        required: true
        type: string
      os:
        required: true
        type: string
      container_name:
        required: true
        type: string
      centreon_url:
        required: true
        type: string
      centreon_image:
        required: true
        type: string
      database_image:
        required: true
        type: string
      major_version:
        required: true
        type: string
      stability:
        required: true
        type: string

jobs:
  performance-test:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: centreon/tests/performanceTesting

    env:
      DATABASE_URL: mysql://centreon:centreon@127.0.0.1:22222/centreon
      CENTREON_API_URL: http://localhost:4000
      LOGIN: admin
      PASSWORD: Centreon!2021
      API_BASE_URL: http://localhost:4000/centreon/api/index.php
      NUMBER_OF_USERS: 100
      NUMBER_OF_HOSTS: 10
      NUMBER_OF_SERVICES: 10
      NUMBER_OF_HOSTGROUPS: 30
      NUMBER_OF_METASERVICES: 3
      NUMBER_OF_SERVICES_CATEGORIS: 2
      NUMBER_OF_SERVICE_GROUPS: 2
      LOCAL_RUN: true
      IMAGE_TAG: ${{ github.head_ref || github.ref_name }}
      SLIM_IMAGE_NAME: ${{ inputs.image_name }}-slim-${{ inputs.os }}
      CONTAINER_NAME: ${{ inputs.container_name }}
      CENTREON_URL: ${{ inputs.centreon_url }}
      WEB_IMAGE: ${{ inputs.centreon_image }}
      DATABASE_IMAGE: ${{ inputs.database_image }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4  # Récupère le code source

      - name: Setup Node.js
        uses: actions/setup-node@v4.2.0
        with:
          node-version: 20
          cache: npm  # Utilisation de npm au lieu de pnpm

      - name: Install Dependencies
        run: npm ci  # Installation des dépendances en mode clean
        env:
          CYPRESS_INSTALL_BINARY: "0"
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: "1"
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"

      - name: Login to Docker Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}
          username: ${{ secrets.registry_username }}
          password: ${{ secrets.registry_password }}

      - name: Restore Standard Slim Image from Cache
        id: cache-docker-slim
        uses: actions/cache/restore@v4.2.0
        continue-on-error: true
        timeout-minutes: 6
        with:
          path: /tmp/cache/docker-image
          key: docker-image-${{ env.SLIM_IMAGE_NAME }}-${{ env.IMAGE_TAG }}
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 5

      - name: Load Standard Slim Image
        if: ${{ steps.cache-docker-slim.outputs.cache-hit == 'true' }}
        run: |
          docker load --input /tmp/cache/docker-image/${{ env.SLIM_IMAGE_NAME }}.tar
          docker tag ${{ env.SLIM_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}/${{ env.SLIM_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Start Centreon Web and Database Containers
        env:
          MYSQL_IMAGE: ${{ env.DATABASE_IMAGE }}
        run: |
          docker compose --profile web -f ../../../.github/docker/docker-compose.yml up -d --wait

      - name: Run Performance Testing Script
        run: node addingHosts.mjs  # Exécute ton script
