name: check-qa-validation

concurrency:
  group: ${{ github.workflow }}-${{ github.event.action }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - develop
      - dev-[2-9][0-9].[0-9][0-9].x
      - master
      - "[2-9][0-9].[0-9][0-9].x"
      - hotfix-*
      - release-*
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
      - labeled
      - unlabeled

jobs:
  check-qa-validation:
    # if: ${{ ! github.event.pull_request.draft }}
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Get PR labels
        id: get-labels
        uses: ./.github/actions/get-pr-labels

      - name: Check if PR has been approved by QA
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: has-qa-approved-label
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
          PR_LABELS: ${{ steps.get-labels.outputs.labels }}
          EVENT_ACTION: ${{ github.event.action }}
        with:
          script: |
            const qaApprovedLabel = 'qa-approved';
            for (const label of JSON.parse(process.env.PR_LABELS)) {
              if (label === qaApprovedLabel) {
                if (process.env.EVENT_ACTION === 'synchronize') {
                  try {
                    await github.rest.issues.removeLabel({
                      name: qaApprovedLabel,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: context.issue.number
                    });
                    core.notice(`label ${qaApprovedLabel} removed because changes have been pushed.`);
                  } catch (e) {
                    core.warning(`failed to remove label ${qaApprovedLabel}: ${e}`);
                  }
                } else {
                  console.log('This PR has been approved by the QA team');
                  return;
                }
              }
            }

            const getRequestedTeamsFromTimeline = async (page) => {
              const timeline = await github.rest.issues.listEventsForTimeline({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                per_page: 100,
                page: page,
              });

              let requestedTeams = [];
              for (const event of timeline.data) {
                if (event.event === 'review_requested' && event?.requested_team?.name) {
                  requestedTeams.push(event.requested_team.name);
                }
              }
              console.log(`Found ${requestedTeams.length} requested teams in the PR timeline (page ${page}).`);

              return requestedTeams;
            }

            const teamsWithQaApproval = [
              'owners-php',
              'owners-react',
              'owners-cpp',
            ];

            let needsQaApproval = false;
            try {
              let requestedTeams = await getRequestedTeamsFromTimeline(1);
              if (requestedTeams.length === 0) {
                requestedTeams = await getRequestedTeamsFromTimeline(2);
              }

              if (requestedTeams.length === 0) {
                core.warning('Cannot find any requested teams in the PR timeline (200 last events). Assuming that this PR needs approval by the QA team.');
                needsQaApproval = true;
              }

              console.log(`Requested teams found: ${requestedTeams.join(', ')}`);
              for (const requestedTeam of requestedTeams) {
                if (teamsWithQaApproval.includes(requestedTeam)) {
                  console.log(`This PR needs approval by the QA team because team ${requestedTeam} is impacted.`);
                  needsQaApproval = true;
                }
              }
            } catch (e) {
              core.warning(`failed to list required reviewers: ${e}`);
              needsQaApproval = true;
            }

            if (needsQaApproval) {
              core.setFailed(`This PR is not yet approved by the QA team. If label "${qaApprovedLabel}" has been added, please re-run this workflow.`);
            } else {
              core.notice('This PR does not need approval by the QA team');
            }
