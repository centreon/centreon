on:
  workflow_call:
    outputs:
      test_plan_key:
        description: "the test plan key"
        value: ${{ jobs.get-test-plan-key.outputs.test_plan_key }}
    secrets:
      client_id:
        required: true
      client_secret:
        required: true

jobs:
  get-version:
    uses: ./.github/workflows/get-version.yml
    with:
      version_file: centreon/www/install/insertBaseConf.sql

  # NIGHTLY <OSS|MODULES|COLLECT> <MAJOR_VERSION> (e.g., NIGHTLY OSS 23.10)
  get-test-plan-key:
    runs-on: ubuntu-22.04
    needs: [get-version]
    outputs:
      test_plan_key: ${{ steps.get_test_plan_key.outputs.test_plan_key }}

    steps:
      - name: Generate Xray Token
        id: generate-xray-token
        run: |
          token_response=$(curl -H "Content-Type: application/json" -X POST --data "{\"client_id\": \"${{ secrets.CLIENT_ID }}\", \"client_secret\": \"${{ secrets.CLIENT_SECRET }}\"}" "https://xray.cloud.getxray.app/api/v1/authenticate")
          xray_token=$(echo "$token_response" | sed -n 's/.*"\(.*\)".*/\1/p')
          echo "xray_token=$xray_token" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get the TestPlanKey
        id: get_test_plan_key
        run: |
          # Use a GraphQL query to get all test plans matching the JQL
          graphql_query='{
            "query":"query GetTestPlans($jql: String, $limit: Int!) { getTestPlans(jql: $jql, limit: $limit) { total results { issueId jira(fields: [\"summary\", \"key\"]) } } }",
            "variables":{"jql": "project = MON","limit": 100}}'

          # Execute the GraphQL query and parse the results
          response=$(curl -H "Content-Type: application/json" -X POST -H "Authorization: Bearer ${{ steps.generate-xray-token.outputs.xray_token}}" --data "$graphql_query" "https://xray.cloud.getxray.app/api/v2/graphql")

          test_plans=$(echo "$response" | jq -c '.data.getTestPlans.results')
          echo "this is my test_plans: $test_plans"

          # api_input='[{"issueId":"73930","jira":{"key":"MON-24025","summary":"Test plan epic Pieter"}},{"issueId":"73861","jira":{"key":"MON-23967","summary":"release-21.10-next newman tests"}},{"issueId":"73860","jira":{"key":"MON-23966","summary":"release-22.04-next newman tests"}}]'
          # echo "this is the api_input $api_input"

          node - <<EOF
          const data = JSON.parse('$test_plans');
          console.log("this is the data:",data)
          let test_plan_key = '';
          data.forEach(item => {
              console.log("Item:", item);
              const key = item.jira.key;
              const summary = item.jira.summary;
              console.log("Key:", key);
              console.log("Summary:", summary);
              if (summary === "NIGHTLY OSS ${{ needs.get-version.outputs.major_version }}") {
                test_plan_key = key;
                return;
              }
          });
          EOF

          echo "this is the test plan key for now: $test_plan_key"

          # If no matching test plan was found, create one
          if [ -z "$test_plan_key" ]; then
            echo "TestPlan doesn't exist yet"

            # Create the test plan using a GraphQL mutation
            create_test_plan_mutation='{
              "query": "mutation CreateTestPlan($testIssueIds: [String], $jira: XrayIssueInput!) { createTestPlan(testIssueIds: $testIssueIds, jira: $jira) { testPlan { issueId jira(fields: [\\"key\\"]) } warnings } }",
              "variables": {
                "testIssueIds": [],
                "jira": {
                  "fields": {
                    "summary": "NIGHTLY OSS ${{ needs.get-version.outputs.major_version }}",
                    "project": { "key": "MON" }
                  }
                }
              }
            }'
            create_result=$(curl -H "Content-Type: application/json" -X POST -H "Authorization: Bearer ${{ steps.generate-xray-token.outputs.xray_token}}" -d "$create_test_plan_mutation" "https://xray.cloud.getxray.app/api/v2/graphql")
            
            echo "creation of the testPlan: $create_result "

            # Extract the key of the created test plan
            test_plan_key=$(echo "$create_result" | jq -r '.data.createTestPlan.testPlan.jira.fields.key')
            echo "the test_plan_key for the new testPlan is: $test_plan_key"
          fi

          # Set the testPlanKey as an output
          echo "test_plan_key=$test_plan_key" >> $GITHUB_OUTPUT
        shell: bash
