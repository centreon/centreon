on:
  workflow_call:
    inputs:
      collection_path:
        required: true
        type: string
      container_name:
        required: true
        type: string
      centreon_url:
        required: true
        type: string
      centreon_image:
        required: true
        type: string
      dependencies_lock_file:
        required: true
        type: string
    secrets:
      registry_username:
        required: true
      registry_password:
        required: true

jobs:
  newman-test-list:
    runs-on: ubuntu-22.04

    outputs:
      collections: ${{ steps.set_collections.outputs.collections }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: List Postman Collections and Environments
        id: set_collections
        run: |
          collection_path="${{ inputs.collection_path }}"
          collections=$(find "$collection_path" -type f -name "*.postman_collection.json" -printf "%P\n" | sort | jq -R -s -c 'split("\n")[:-1]')
          echo "collections=$collections" >> $GITHUB_OUTPUT
          echo "GITHUB_OUTPUT contents:"
          cat $GITHUB_OUTPUT

  newman-test-run:
   needs: [newman-test-list]
   runs-on: ubuntu-22.04
   continue-on-error: true

   strategy:
    fail-fast: false
    matrix:
      feature: ${{ fromJson(needs.newman-test-list.outputs.collections) }}

   name: ${{ matrix.feature }}

   defaults:
    run:
      shell: bash
      working-directory: centreon/tests/rest_api
   env:
    CONTAINER_NAME: ${{ inputs.container_name }}
    CENTREON_URL: ${{ inputs.centreon_url }}
    CENTREON_IMAGE: ${{ inputs.centreon_image }}

   steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - uses: pnpm/action-setup@v2
      with:
        version: 7
        run_install: false

    - uses: actions/setup-node@v3
      with:
          node-version: 18
          cache: pnpm
          cache-dependency-path: ${{ inputs.dependencies_lock_file }}

    - name: Install Dependencies for tests/rest_api
      run: pnpm install --frozen-lockfile
      shell: bash
      env:
        CYPRESS_INSTALL_BINARY: ‚Äú0‚Äù
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: ‚Äú1"
        PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: ‚Äútrue‚Äù

    - name: Login to registry
      uses: docker/login-action@v2
      with:
        registry: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}
        username: ${{ secrets.registry_username }}
        password: ${{ secrets.registry_password}}

    - name: Start Centreon Web Container
      run: docker run --name $CONTAINER_NAME -d -p 4000:80 --health-cmd="curl -f $CENTREON_URL/ || exit 1" --health-interval=5s $CENTREON_IMAGE

    - name: Wait for Centreon Web Container to Start
      run: pnpx wait-on http://localhost:4000/ --timeout 100000

    - name: Run Postman Tests and Generate HTML Report
      run: |
        collection_file="collections/${{ matrix.feature }}"
        collection_name=$(basename "$collection_file" .postman_collection.json)
        collection_directory="$(dirname "$collection_file")"
        environment_file=$(find "$collection_directory" -maxdepth 1 -type f -name "*.postman_environment.json")
          if [ -f "$environment_file" ]; then
            pnpm newman run "$collection_file" -e "$environment_file" --reporters cli,htmlextra,json-summary --reporter-htmlextra-title "$collection_name" --reporter-htmlextra-title "${collection_name// /_}" --reporter-htmlextra-export "newman/${collection_name}.html" --reporter-summary-json-export "postman_summaries/${collection_name}-summary.json"
          else
            echo "The file Environment-Collection.json was not found in the same directory as $collection_file"
            exit 1
          fi

    - name: Upload HTML Reports
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: postman-html-reports
        path: centreon/tests/rest_api/newman/

    - name: Extract and Store Summaries
      if: failure()
      run: |
        declare -A json_info
        for summary_file in ./postman_summaries/*.json; do
        summary_content=$(cat "$summary_file" | jq -c '{Name: .Collection.Info.Name, Stats: .Run.Stats, Failures: .Run.Failures}')
        filename=$(basename "$summary_file" .json)
          clean_filename="${filename// /_}"
          clean_filename="${clean_filename//-/_}"
          json_info["$clean_filename"]=$summary_content
        done
        for key in "${!json_info[@]}"; do
          echo "Summary info for $key:"
          echo "${json_info[$key]}"
        done

    - name: Generate and Display Summaries
      if: failure()
      run: |
        summaries=""
        has_failures=false
        for summary_file in ./postman_summaries/*.json; do
            collection_name=$(jq -r '.Collection.Info.Name' "$summary_file")
            total_requests=$(jq -r '.Run.Stats.Requests.total' "$summary_file")
            pending_requests=$(jq -r '.Run.Stats.Requests.pending' "$summary_file")
            failed_requests=$(jq -r '.Run.Stats.Requests.failed' "$summary_file")
            failed_assertions=$(jq -r '.Run.Stats.Assertions.failed' "$summary_file")
            failures=$(jq -r '.Run.Failures' "$summary_file")
            echo "$failures"
            if [ "$failed_requests" -gt 0 ] || [ "$failed_assertions" -gt 0 ]; then
                has_failures=true  # Set has_failures to true if there are failures
                summaries+="<table>"
                summaries+="<tr><th>Collection Name</th><th>Total Requests</th><th>‚è≠Ô∏è Skipped requests</th><th>‚ùå Failed Requests</th><th>‚ùå Failed Assertions</th></tr>"
                summaries+="<tr><td>$collection_name</td><td>$total_requests</td><td>$pending_requests</td><td>$failed_requests</td><td>$failed_assertions</td></tr>"
                summaries+="</table>"
                filtered_failures=$(echo "$failures" | jq -c '.[] | select(.Parent.Name // "" != "" and .Source.Name // "" != "" and .Error.Message // "" != "")')
                 while IFS= read -r row; do
                    parent_name=$(echo "$row" | jq -r '.Parent.Name')
                    source_name=$(echo "$row" | jq -r '.Source.Name')
                    error_message=$(echo "$row" | jq -r '.Error.Message')

                    summaries+="<p><strong>üìÅ Collection name:</strong> $parent_name<br><strong>üì¨ Request name:</strong> $source_name<br><strong>‚ùå Error message:</strong> $error_message</p>"
                done <<< "$(echo "$filtered_failures")"
            fi
            echo "Processing summary file: $summary_file"
        done

        if [ -n "$summaries" ]; then
            echo -e "$summaries" >> $GITHUB_STEP_SUMMARY
        fi
