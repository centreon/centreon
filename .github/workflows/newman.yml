on:
  workflow_call:
    inputs:
      collection_path:
        required: true
        type: string
      container_name:
        required: true
        type: string
      centreon_url:
        required: true
        type: string
      centreon_image:
        required: true
        type: string
      dependencies_lock_file:
        required: true
        type: string
    secrets:
      registry_username:
        required: true
      registry_password:
        required: true
      CLIENT_ID :
        required: true
      CLIENT_SECRET:
        required: true
      JIRA_USER:
          required: true
      JIRA_TOKEN_TEST:
          required: true
jobs:
  newman-test-list:
    runs-on: ubuntu-22.04

    outputs:
      collections: ${{ steps.set_collections.outputs.collections }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: List Postman Collections and Environments
        id: set_collections
        run: |
          collection_path="${{ inputs.collection_path }}"
          collections=$(find "$collection_path" -type f -name "*.postman_collection.json" -printf "%P\n" | sort | jq -R -s -c 'split("\n")[:-1]')
          echo "collections=$collections" >> $GITHUB_OUTPUT
          echo "GITHUB_OUTPUT contents:"
          cat $GITHUB_OUTPUT

  associate-test-cases:
      runs-on: ubuntu-22.04
      defaults:
       run:
        shell: bash
        working-directory: centreon/tests/rest_api

      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Generate Xray Token
          id: generate-xray-token
          run: |
                  token_response=$(curl -H "Content-Type: application/json" -X POST --data "{\"client_id\": \"${{ secrets.CLIENT_ID }}\", \"client_secret\": \"${{ secrets.CLIENT_SECRET }}\"}" "https://xray.cloud.getxray.app/api/v1/authenticate")
                  xray_token=$(echo "$token_response" | sed -n 's/.*"\(.*\)".*/\1/p')
                  echo "this is the xray token : $xray_token"
                  echo "xray_token=$xray_token" >> $GITHUB_OUTPUT
          shell: bash

        - name: Associate Test Cases with Test plan
          run: |
                # Récupérer le plan de test
                xray_graphql_getTestPlan='{
                  "query": "query GetTestPlan($issueId: String) { getTestPlan(issueId: $issueId) { issueId tests(limit: 100) { results { issueId testType { name } } } } }",
                  "variables": {
                    "issueId": "73215"
                  }
                }'

                response=$(curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${{ steps.generate-xray-token.outputs.xray_token }}" --data "${xray_graphql_getTestPlan}" "https://xray.cloud.getxray.app/api/v2/graphql")

                echo "Response from Get Test Plan:"
                echo "$response"

                # Parser et traiter les IDs de problème
                issue_ids=($(echo "$response" | jq -r '.data.getTestPlan.tests.results[].issueId'))
                summaries=()

                for issue_id in "${issue_ids[@]}"; do
                  echo "Processing issue ID: $issue_id"
                  jira_issue_url="https://centreon.atlassian.net/rest/api/2/issue/$issue_id"

                  response=$(curl --request GET \
                    --url "$jira_issue_url" \
                    --user "${{ secrets.JIRA_USER }}:${{ secrets.JIRA_TOKEN_TEST }}" \
                    --header 'Accept: application/json')

                  summary=$(echo "$response" | jq -r '.fields.summary')

                  if [ "$(echo "$response" | jq -r '.errorMessages[0]')" == "Issue does not exist or you do not have permission to see it." ]; then
                    echo "The issue with ID $issue_id does not exist or you do not have permission to see it."
                    break  ;
                  else
                    echo "The issue with ID $issue_id exists."
                    summaries+=("$summary")
                  fi
                done

                # Traiter les collections de test
                collections=($(find ./collections -type f -name "*.postman_collection.json"))
                test_case_ids=()

                xray_graphql_AddingTestsToTestPlan='{
                  "query": "mutation AddTestsToTestPlan($issueId: String!, $testIssueIds: [String]!) { addTestsToTestPlan(issueId: $issueId, testIssueIds: $testIssueIds) { addedTests warning } }",
                  "variables": {
                    "issueId": "73215",
                    "testIssueIds": []
                  }
                }'

                for collection_file in "${collections[@]}"; do
                  collection_name=$(basename "$collection_file" .postman_collection.json)
                  collection_name_sanitized="${collection_name//[^a-zA-Z0-9]/_}"

                  if [[ " ${summaries[@]} " =~ " ${collection_name_sanitized} " ]]; then
                    echo "The test case for $collection_name_sanitized already exists in the test plan."
                  else
                    # Ajouter un cas de test
                    response=$(curl --request POST \
                      --url 'https://centreon.atlassian.net/rest/api/2/issue' \
                      --user '${{ secrets.JIRA_USER }}:${{ secrets.JIRA_TOKEN_TEST }}' \
                      --header 'Accept: application/json' \
                      --header 'Content-Type: application/json' \
                      --data '{
                        "fields": {
                          "project": {
                            "key": "MON"
                          },
                          "summary": "'"$collection_name_sanitized"'",
                          "description": "Test case for '"$collection_name_sanitized"'",
                          "issuetype": {
                            "name": "Test"
                          }
                        }
                      }' \
                      --max-time 20)

                    sleep 5

                    # Vérifier la réponse
                    if [ -z "$response" ]; then
                      echo "Failed to create the test case within the specified time."
                    else
                      test_case_id=$(echo "$response" | jq -r '.id')
                      test_case_ids+=("$test_case_id")  # Ajouter l'ID du cas de test à la liste

                      echo "Created Test Case with ID: $test_case_id"
                      # Mettre à jour la requête GraphQL pour ajouter ce test au plan de test
                      xray_graphql_AddingTestsToTestPlan_variables=$(echo "$xray_graphql_AddingTestsToTestPlan" | jq --arg test_case_id "$test_case_id" '.variables.testIssueIds += [$test_case_id]')

                      # Exécuter la mutation GraphQL pour ajouter les tests au plan de test
                      response=$(curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${{ steps.generate-xray-token.outputs.xray_token}}" --data "$xray_graphql_AddingTestsToTestPlan_variables" "https://xray.cloud.getxray.app/api/v2/graphql")
                    fi
                  fi
                done

                echo "issue_ids: ${issue_ids[@]}"

                xray_graphql_mutation='{
                  "query": "mutation CreateTestExecution($testIssueIds: [String], $testEnvironments: [String], $jira: JSON!) { createTestExecution(testIssueIds: $testIssueIds, testEnvironments: $testEnvironments, jira: $jira) { testExecution { issueId jira(fields: ["key"]) } } }",
                  "variables": {
                    "testIssueIds": [],
                    "jira": {
                      "fields": {
                        "summary": "Test Execution for newman collection testplan",
                        "project": { "key": "MON" }
                      }
                    }
                  }
                }'
                  xray_graphql_mutation_variables="$xray_graphql_mutation"


                  xray_graphql_mutation_variables="$xray_graphql_mutation"

                  # Créer un tableau pour stocker les IDs des problèmes au format JSON
                  issue_ids_json=()

                  # Parcourir les IDs de problème et les ajouter au tableau
                  for issue_id in "${issue_ids[@]}"; do
                    issue_ids_json+=("\"$issue_id\"")
                  done

                  # Formater le tableau en une chaîne JSON
                  issue_ids_json_str="[\"${issue_ids[*]// /\",\"}\"]"

                  # Mettre à jour la requête GraphQL avec les testIssueIds correctement formatés
                  xray_graphql_mutation_variables=$(echo "$xray_graphql_mutation_variables" | jq --arg test_issue_ids "$issue_ids_json_str" '.variables.testIssueIds = $test_issue_ids')

                  # Envoyer la requête GraphQL
                  response=$(curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${{ steps.generate-xray-token.outputs.xray_token}}" --data "$xray_graphql_mutation_variables" "https://xray.cloud.getxray.app/api/v2/graphql")

                  # Afficher la réponse pour le débogage
                  echo "Response from Create Test Execution:"
                  echo "$response"

                  # Extraire l'ID de la nouvelle exécution de test
                  test_execution_id=$(echo "$response" | jq -r '.data.createTestExecution.testExecution.issueId')

                  # Vérifier si l'ID est null ou non
                  if [ "$test_execution_id" == "null" ]; then
                    echo "Failed to create the Test Execution. Check the response for errors."
                  else
                    echo "Created Test Execution with ID: $test_execution_id"
                  fi



                # # Extraction de l'ID de la nouvelle exécution de test
                # test_execution_id=$(echo "$response" | jq -r '.data.createTestExecution.testExecution.issueId")

                # echo "Created Test Execution with ID: $test_execution_id"

                # # Mutation GraphQL pour ajouter des tests à l'exécution de test
                # xray_graphql_addTestsToTestExecution='{
                #   "query": "mutation AddTestsToTestExecution($issueId: String!, $testIssueIds: [String]) { addTestsToTestExecution(issueId: $issueId, testIssueIds: $testIssueIds) { addedTests warning } }",
                #   "variables": {
                #     "issueId": "'$test_execution_id'",
                #     "testIssueIds": ["'${test_case_ids[@]}'"]
                #   }
                # }'

                # # Exécution de la mutation pour associer des tests à l'exécution de test
                # response=$(curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${{ steps.generate-xray-token.outputs.xray_token }}" --data "${xray_graphql_addTestsToTestExecution}" "https://xray.cloud.getxray.app/api/v2/graphql")

                # echo "Response from Add Tests to Test Execution:"
                # echo "$response"

                # # Mutation GraphQL pour ajouter des exécutions de test au plan de test
                # xray_graphql_addTestExecutionsToTestPlan='{
                #   "query": "mutation AddTestExecutionsToTestPlan($issueId: String!, $testExecIssueIds: [String]!) { addTestExecutionsToTestPlan(issueId: $issueId, testExecIssueIds: $testExecIssueIds) { addedTestExecutions warning } }",
                #   "variables": {
                #     "issueId": "73215",
                #     "testExecIssueIds": ["'"$test_execution_id"'"]
                #   }
                # }'

                # # Exécution de la mutation pour associer les exécutions de test au plan de test
                # response=$(curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${{ steps.generate-xray-token.outputs.xray_token }}" --data "${xray_graphql_addTestExecutionsToTestPlan}" "https://xray.cloud.getxray.app/api/v2/graphql")

                # # Afficher la réponse
                # echo "Response from Add Test Executions to Test Plan:"
                # echo "$response"



  newman-test-run:
   needs: [newman-test-list]
   runs-on: ubuntu-22.04
   continue-on-error: true

   strategy:
    fail-fast: false
    matrix:
      feature: ${{ fromJson(needs.newman-test-list.outputs.collections) }}

   name: ${{ matrix.feature }}

   defaults:
    run:
      shell: bash
      working-directory: centreon/tests/rest_api
   env:
    CONTAINER_NAME: ${{ inputs.container_name }}
    CENTREON_URL: ${{ inputs.centreon_url }}
    CENTREON_IMAGE: ${{ inputs.centreon_image }}

   steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - uses: pnpm/action-setup@v2
      with:
        version: 7
        run_install: false

    - uses: actions/setup-node@v3
      with:
          node-version: 18
          cache: pnpm
          cache-dependency-path: ${{ inputs.dependencies_lock_file }}

    - name: Install Dependencies for tests/rest_api
      run: pnpm install --frozen-lockfile
      shell: bash
      env:
        CYPRESS_INSTALL_BINARY: “0”
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: “1"
        PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: “true”

    - name: Login to registry
      uses: docker/login-action@v2
      with:
        registry: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}
        username: ${{ secrets.registry_username }}
        password: ${{ secrets.registry_password }}

    - name: Start Centreon Web Container
      run: docker run --name $CONTAINER_NAME -d -p 4000:80 --health-cmd="curl -f $CENTREON_URL/ || exit 1" --health-interval=5s $CENTREON_IMAGE

    - name: Wait for Centreon Web Container to Start
      run: pnpx wait-on http://localhost:4000/ --timeout 100000

    - name: Generate Xray Token
      id: generate-xray-token
      run: |
        token_response=$(curl -H "Content-Type: application/json" -X POST --data "{\"client_id\": \"${{ secrets.CLIENT_ID }}\", \"client_secret\": \"${{ secrets.CLIENT_SECRET }}\"}" "https://xray.cloud.getxray.app/api/v1/authenticate")
        xray_token=$(echo "$token_response" | sed -n 's/.*"\(.*\)".*/\1/p')
        echo "this is the xray token : $xray_token"
        echo "xray_token=$xray_token" >> $GITHUB_OUTPUT
      shell: bash

    - name: Run Postman Tests and Generate HTML Report
      run: |
        collection_file="collections/${{ matrix.feature }}"
        collection_name=$(basename "$collection_file" .postman_collection.json)
        collection_directory="$(dirname "$collection_file")"
        environment_file=$(find "$collection_directory" -maxdepth 1 -type f -name "*.postman_environment.json")
        if [ -f "$environment_file" ]; then
          echo "Generating reports for: $collection_name"
          echo "Collection: $collection_file"
          echo "Environment: $environment_file"
           pnpm newman run "$collection_file" -e "$environment_file" --reporters cli,junitxray,json-summary --reporter-junitxray-export "newman/${collection_name}.xml" --reporter-summary-json-export "postman_summaries/${collection_name}-summary.json" -n 1
          else
          echo "The file Environment-Collection.json was not found in the same directory as $collection_file"
          exit 1
        fi

    - name: Extract and Store Summaries
      run: |
        declare -A json_info
        for summary_file in ./postman_summaries/*.json; do
        summary_content=$(cat "$summary_file" | jq -c '{Name: .Collection.Info.Name, Stats: .Run.Stats, Failures: .Run.Failures}')
        filename=$(basename "$summary_file" .json)
          clean_filename="${filename// /_}"
          clean_filename="${clean_filename//-/_}"
          json_info["$clean_filename"]=$summary_content
        done
        for key in "${!json_info[@]}"; do
          echo "Summary info for $key:"
          echo "${json_info[$key]}"
        done


    - name: Generate and Display Summaries
      if: failure()
      run: |
        summaries=""
        has_failures=false
        for summary_file in ./postman_summaries/*.json; do
            collection_name=$(jq -r '.Collection.Info.Name' "$summary_file")
            total_requests=$(jq -r '.Run.Stats.Requests.total' "$summary_file")
            pending_requests=$(jq -r '.Run.Stats.Requests.pending' "$summary_file")
            failed_requests=$(jq -r '.Run.Stats.Requests.failed' "$summary_file")
            failed_assertions=$(jq -r '.Run.Stats.Assertions.failed' "$summary_file")
            failures=$(jq -r '.Run.Failures' "$summary_file")
            echo "$failures"
            if [ "$failed_requests" -gt 0 ] || [ "$failed_assertions" -gt 0 ]; then
                has_failures=true  # Set has_failures to true if there are failures
                summaries+="<table>"
                summaries+="<tr><th>Collection Name</th><th>Total Requests</th><th>⏭️ Skipped requests</th><th>❌ Failed Requests</th><th>❌ Failed Assertions</th></tr>"
                summaries+="<tr><td>$collection_name</td><td>$total_requests</td><td>$pending_requests</td><td>$failed_requests</td><td>$failed_assertions</td></tr>"
                summaries+="</table>"
                filtered_failures=$(echo "$failures" | jq -c '.[] | select(.Parent.Name // "" != "" and .Source.Name // "" != "" and .Error.Message // "" != "")')
                 while IFS= read -r row; do
                    parent_name=$(echo "$row" | jq -r '.Parent.Name')
                    source_name=$(echo "$row" | jq -r '.Source.Name')
                    error_message=$(echo "$row" | jq -r '.Error.Message')

                    summaries+="<p><strong>📁 Collection name:</strong> $parent_name<br><strong>📬 Request name:</strong> $source_name<br><strong>❌ Error message:</strong> $error_message</p>"
                done <<< "$(echo "$filtered_failures")"
            fi
            echo "Processing summary file: $summary_file"
        done

        if [ -n "$summaries" ]; then
            echo -e "$summaries" >> $GITHUB_STEP_SUMMARY
        fi
