on:
  workflow_call:
    inputs:
      collection_path:
        required: true
        type: string
      container_name:
        required: true
        type: string
      centreon_url:
        required: true
        type: string
      centreon_image:
        required: true
        type: string
    secrets:
      registry_username:
        required: true
      registry_password:
        required: true

jobs:
  discover_collections:
    runs-on: ubuntu-latest

    outputs:
       collection_names: ${{ steps.set_collections.outputs.collection_names }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: List Postman Collections and Environments
        id: set_collections
        run: |
          collection_path="${{ inputs.collection_path }}"
          collections_json=()  # Tableau pour stocker les résultats
          
          # Créez un tableau associatif pour stocker les collections et les environnements
          declare -A collection_data
          
          # Fonction pour parcourir récursivement les dossiers
          find_collections() {
            local folder="$1"
            collections=()
            environments=()
          
            while IFS= read -r -d $'\0' collection_file; do
              collections+=("${collection_file#$collection_path/}")
            done < <(find "$folder" -type f -name "*.postman_collection.json" -print0)
          
            while IFS= read -r -d $'\0' environment_file; do
              environments+=("${environment_file#$collection_path/}")  # Supprimer le préfixe
            done < <(find "$folder" -type f -name "Environment-Collection.json" -print0)
          
            # Ajoutez les collections et environnements à l'associatif
            for collection in "${collections[@]}"; do
              collection_data["collections"]+="\"$collection\", "
            done
            for environment in "${environments[@]}"; do
              collection_data["environments"]+="\"$environment\", "
            done
          
            for subfolder in "$folder"/*; do
              if [ -d "$subfolder" ] && [ "${subfolder#$folder}" != "/refactor-collection" ]; then
                find_collections "$subfolder"
              fi
            done
          }
          
          find_collections "$collection_path"
          
          # Construisez le tableau collections_json à partir des données de l'associatif
          collections_json+=("{")
          collections_json+=("\"collections\": [${collection_data["collections"]%, }], ")
          collections_json+=("\"environments\": [${collection_data["environments"]%, }]")
          collections_json+=("}")
          
          # Transformez le tableau collections_json en une chaîne JSON complète
          json_result="{\"collections\": [${collection_data["collections"]%, }], \"environments\": [${collection_data["environments"]%, }]}"
          echo "collections=$json_result"
            
          # Utilisez jq pour extraire uniquement les noms de collections

          collection_names=$(echo "$json_result" | jq -r '.collections[] | sub("^.*/"; "")')  
          collection_names_json=$(echo "$collection_names" | jq -R -s 'split("\n")[:-1]')
 
  
          # Stockez les noms de collections dans la variable GITHUB_OUTPUT
          echo "collection_names=$collection_names_json" >> $GITHUB_OUTPUT
          
          echo "GITHUB_OUTPUT contents:"
          cat $GITHUB_OUTPUT


  postman_tests:
   needs: discover_collections
   runs-on: ubuntu-latest

   strategy:
    fail-fast: false
    matrix:
      feature: ${{ fromJson(needs.discover_collections.outputs.collection_names) }}

   name: Postman Test - ${{ matrix.feature }}

   defaults:
    run:
      shell: bash
      working-directory: centreon/tests/rest_api
   env:
    CONTAINER_NAME: ${{ inputs.container_name }}
    CENTREON_URL: ${{ inputs.centreon_url }}
    CENTREON_IMAGE: ${{ inputs.centreon_image }}

   steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - uses: pnpm/action-setup@v2
      with:
        version: 7

    - name: Install Dependencies
      run: pnpm install --frozen-lockfile
      working-directory: centreon/tests/rest_api

    - name: Login to registry
      uses: docker/login-action@v2
      with:
        registry: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}
        username: ${{ secrets.registry_username }}
        password: ${{ secrets.registry_password}}

    - name: Start Centreon Web Container
      run: docker run --name $CONTAINER_NAME -d -p 4000:80 --health-cmd="curl -f $CENTREON_URL/ || exit 1" --health-interval=5s $CENTREON_IMAGE

    - name: Wait for Centreon Web Container to Start
      run: |
        pnpx wait-on http://localhost:4000/ --timeout 100000
      timeout-minutes: 5

    - name: Run Postman Tests and Generate HTML Report
      run: |
        collection_name="${matrix.feature}"
        collection_file="collections/$collection_name"
        environment="${matrix.environment}"
        
        echo "Running collection: $collection_file with environment: $environment"
        pnpm newman run "$collection_file" -e "$environment" --reporters cli,htmlextra,json-summary --reporter-htmlextra-title "$collection_name" --reporter-htmlextra-title "${collection_name// /_}" --reporter-htmlextra-export "newman/${collection_name}.html" --reporter-summary-json-export "postman_summaries/${collection_name}-summary.json" || true


    - name: Upload HTML Reports
      uses: actions/upload-artifact@v3
      with:
        name: postman-html-reports
        path: centreon/tests/rest_api/newman/

    - name: Extract and Store Summaries
      run: |
        declare -A json_info
        for summary_file in ./postman_summaries/*.json; do
          summary_content=$(cat "$summary_file" | jq -c '{Name: .Collection.Info.Name, Stats: .Run.Stats}')
          filename=$(basename "$summary_file" .json)
          clean_filename="${filename// /_}"
          clean_filename="${clean_filename//-/_}"
          json_info["$clean_filename"]=$summary_content
        done
        for key in "${!json_info[@]}"; do
          echo "Summary info for $key:"
          echo "${json_info[$key]}"
        done

    - name: Generate and Display Summaries
      run: |
        summaries=""
        for summary_file in ./postman_summaries/*.json; do
          collection_name=$(jq -r '.Collection.Info.Name' "$summary_file")
          total_requests=$(jq -r '.Run.Stats.Requests.total' "$summary_file")
          pending_requests=$(jq -r '.Run.Stats.Requests.pending' "$summary_file")
          failed_requests=$(jq -r '.Run.Stats.Requests.failed' "$summary_file")
          failed_assertions=$(jq -r '.Run.Stats.Assertions.failed' "$summary_file")

          if [ "$failed_requests" -gt 0 ] || [ "$failed_assertions" -gt 0 ]; then
            summaries+="<table>"
            summaries+="<tr><th>Collection Name</th><th>Total Requests</th><th>⏭️ Skipped requests</th><th>❌ Failed Requests</th><th>❌ Failed Assertions</th></tr>"
            summaries+="<tr><td>$collection_name</td><td>$total_requests</td><td>$pending_requests</td><td>$failed_requests</td><td>$failed_assertions</td></tr>"
            summaries+="</table>"
          fi
          echo "Processing summary file: $summary_file"  # Sortie de débogage
        done

        if [ -n "$summaries" ]; then
          echo -e "$summaries" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Continue to Next Collection
      if: ${{ always() }}
      run: echo "Continuing to the next collection..."
