# Veracode pipeline scans
on:
  workflow_call:
    inputs:
      module_directory:
        required: true
        type: string
      module_name:
        required: true
        type: string
      major_version:
        required: true
        type: string
      minor_version:
        required: true
        type: string
      target_branch_name:
        required: true
        type: string
      event_name:
        required: true
        type: string
      threshold_pipeline:
        required: true
        type: string
      threshold_sandbox:
        required: true
        type: string
      cache_key:
        required: true
        type: string
    secrets:
      veracode_api_id:
        required: true
      veracode_api_key:
        required: true

jobs:
  build:
    runs-on: ubuntu-22.04
    outputs:
      scan_type: ${{ steps.routing-mode.outputs.scan_type }}

    steps:
      - uses: actions/checkout@v3

      - name: Get current time
        run: echo "$(date +'%Y-%m-%d %H:%M:%S')"

      - name: Generate binary file
        uses: ./.github/actions/veracode-generate-binary
        with:
          module_directory: ${{ inputs.module_directory }}
          module_name: ${{ inputs.module_name }}
          target_branch_name: ${{ inputs.target_branch_name }}
          cache_key: ${{ inputs.cache_key }}

      - name: Set routing mode
        id: routing-mode
        run: |
          if [[ ${{ inputs.event_name }}  != 'pull-request' &&
            (
              ${{ target_branch_name }} == 'develop' ||
              ${{ target_branch_name }} == 'dev-[2-9][0-9].[0-9][0-9].x' ||
              ${{ target_branch_name }} == 'master' ||
              ${{ target_branch_name }} == '[2-9][0-9].[0-9][0-9].x'
            )
          ]]; then
            echo "scan_type=maintenance" >> $GITHUB_OUTPUT
          else
            echo "scan_type=development" >> $GITHUB_OUTPUT
          fi

      - name: DEBUG - routing mode
        run: |
          echo "routing mode = ${{ env.scan_type }}"
          echo "routing mode = ${{ outputs.scan_type }}"
      - name: DEBUG - event type
        run: echo "event type = ${{ inputs.event_name }}"
      - name: DEBUG - branch ref name
        run: echo "branch ref name = ${{ inputs.branch_ref_name }}"
      - name: DEBUG - branch target name
        run: echo "target name = ${{ inputs.target_branch_name }}"

  pipeline-scan:
    runs-on: [self-hosted, veracode]
    needs: [build]

    steps:
      - name: Get build binary
        uses: actions/cache/restore@v3
        with:
          path: "${{ inputs.module_name }}-${{ inputs.target_branch_name }}.zip"
          key: ${{ inputs.cache_key }}

      - name: Get current time
        run: echo "$(date +'%Y-%m-%d %H:%M:%S')"

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - name: Setup awscli
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo unzip -q awscliv2.zip
          sudo ./aws/install

      - name: Get baseline file
        id: baseline_search
        run: |
          TARGET_S3="s3://centreon-veracode-reports/${{ inputs.module_name }}/${{ inputs.target_branch_name }}/results.json"
          BASELINE_FILE="/tmp/results.json"
          aws s3 ls "$TARGET_S3" || RESULT=$( echo $? )
          if [[ $RESULT -eq 0 ]]; then
            aws s3 cp "$TARGET_S3" "$BASELINE_FILE"
            echo "baseline_file=$BASELINE_FILE" >> $GITHUB_ENV
          else
            echo "[DEBUG] - File not found in the bucket"
            echo "baseline_file=" >> $GITHUB_ENV
          fi

      - name: DEBUG - check location
        run: ls -la

      - name: DEBUG - check location /tmp
        run: ls -la /tmp

      - name: DEBUG - get env baseline value
        run: echo "baseline = ${{ env.baseline_file }}"

      - name: DEBUG - Get routing mode
        run: echo "mode = ${{ needs.build.outputs.scan_type }}"

      - name: Pipeline scan
        uses: veracode/Veracode-pipeline-scan-action@v1.0.3
        with:
          vid: ${{ secrets.veracode_api_id }}
          vkey: ${{ secrets.veracode_api_key }}
          file: "${{ inputs.module_name }}-${{ inputs.target_branch_name }}.zip"
          fail_on_severity: "${{ inputs.threshold_pipeline }}"
          #request_policy: "Centreon Security"
          #fail_build: true
          timeout: 60
          baseline_file: "${{ env.baseline_file }}"

      - name: Get current time
        run: echo "$(date +'%Y-%m-%d %H:%M:%S')"

      - name: Save baseline file
        if: needs.build.outputs.scan_type == 'maintenance'
        run: |
          mv results.json /tmp
          TARGET_S3="s3://centreon-veracode-reports/${{ inputs.module_name }}/${{ inputs.target_branch_name }}/results.json"
          BASELINE_FILE="/tmp/results.json"
          aws s3 cp "$BASELINE_FILE" "$TARGET_S3"

      - name: Clean
        run: rm -f results.json filtered_results.json /tmp/results.json

  sandbox-scan:
    if: needs.build.outputs.scan_type == 'maintenance'
    # sandbox scans are triggered on maintenance branches only
    runs-on: ubuntu-22.04
    needs: [build]
    steps:
      - name: Get build binary
        uses: actions/cache/restore@v3
        with:
          path: "${{ inputs.module_name }}-${{ inputs.target_branch_name }}.zip"
          key: "${{ inputs.cache_key }}"

      - name: Veracode upload and run a Sandbox scan
        uses: veracode/veracode-uploadandscan-action@master
        id: upload_and_scan
        with:
          appname: "centreon/${{ inputs.module_name }}"
          createprofile: true
          filepath: "${{ inputs.module_name }}-${{ inputs.target_branch_name }}.zip"
          version: "${{ inputs.major_version }}.${{ inputs.minor_version }}"
          vid: ${{ secrets.veracode_api_id }}
          vkey: ${{ secrets.veracode_api_key }}
          createsandbox: true
          sandboxname: "${{ inputs.target_branch_name }}"
          scantimeout: 60
          includenewmodules: true
          scanallnonfataltoplevelmodules: true
          deleteincompletescan: 1
          criticality: "${{ inputs.threshold_sandbox }}"

      - name: Get current time
        run: echo "$(date +'%Y-%m-%d %H:%M:%S')"

  promote-sandbox-task:
    needs: [build, sandbox-scan]
    name: Promote a scan from sandbox
    runs-on: ubuntu-22.04
    steps:
      - name: Promote Scan on Approval
        env:
          VERACODE_API_ID: ${{ secrets.veracode_api_id }}
          VERACODE_API_SECRET: ${{ secrets.veracode_api_key }}
        uses: lerer/veracode-sandboxes-helper@v1.0.1
        with:
          activity: "promote-latest-scan"
          appname: "centreon/${{ inputs.module_name }}"
          sandbox-name: "${{ inputs.module_name }}-${{ inputs.target_branch_name }}"
          delete-on-promote: true # Optional: also Deleting the Sandbox

      - name: Get current time
        run: echo "$(date +'%Y-%m-%d %H:%M:%S')"