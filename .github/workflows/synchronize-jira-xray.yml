name: Integrate e2e tests to Xray

on:
  push:
    branches:
      - develop
      - dev-[2-9][0-9].[0-9][0-9].x
      - MON-21965-Refactor-xray-synchronization-script-to-javascript

jobs:
  get-version:
    uses: ./.github/workflows/get-version.yml
    with:
      version_file: centreon/www/install/insertBaseConf.sql

  synchronize-jira-xray:
    needs: [get-version]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Dependencies and Execute Script
        uses: actions/github-script@v6
        with:
          script: |
            // Install Node.js dependencies
            const actionsExec = require('@actions/exec');
            await actionsExec.exec('pnpm', ['install', 'axios@1.5.1', 'form-data@4.0.0']);

            // Get the latest commit hash
            const latest_commit = await github.context.payload.after;
            process.env.LATEST_COMMIT = latest_commit;

            // Find Changed Feature Files
            const { stdout } = await actionsExec.exec('git', ['show', '--name-only', latest_commit]);
            const changed_files = stdout.split('\n').filter(file => file.endsWith('.feature'));
            process.env.CHANGED_FILES = changed_files.join(',');

            // Run Script on Changed Feature Files
            if (process.env.CHANGED_FILES) {
              const major_version = await octokit.rest.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId
              }).data.outputs.major_version;

              const files = process.env.CHANGED_FILES.split(',');
              for (const file of files) {
                console.log(`Running script for ${file} on branch ${github.ref}`);
                await actionsExec.exec('node', ['.github/scripts/synchronize_jira_xray.js', file, github.ref, major_version]);
              }
            }
        env:
          JIRA_USER: ${{ secrets.JIRA_USER }}
          JIRA_TOKEN_TEST: ${{ secrets.JIRA_TOKEN_TEST }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
