name: "suggest-changes"
description: "Create review suggestions from working directory changes."
inputs:
  token:
    description: 'Access token to make authenticated API calls.'
    default: ${{ github.token }}
  comment:
    description: 'The pull request review comment.'
  event:
    description: 'The review action you want to perform. The review actions include: APPROVE, REQUEST_CHANGES, or COMMENT.'
    default: 'COMMENT'

runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
      with:
        node-version: 22

    - name: Install dependencies
      run: npm install parse-git-diff@0.0.17
      shell: bash

    - name: Suggest changes
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const { debug, getInput } = core;
          const { getExecOutput } = exec;
          // import { Octokit } from '@octokit/action'

          const { readFileSync } = require('fs');
          const { env } = require('process');
          const parseGitDiff = require('parse-git-diff');
          // const parseGitDiff = await import('parse-git-diff');
          console.log(parseGitDiff);

          /*
          const octokit = new Octokit({
            userAgent: 'suggest-changes',
          })
          */

          const [owner, repo] = String(env.GITHUB_REPOSITORY).split('/')

          const eventPayload = JSON.parse(
            readFileSync(String(env.GITHUB_EVENT_PATH), 'utf8')
          )

          const pull_number = Number(eventPayload.pull_request.number)

          const pullRequestFiles = (
            await github.rest.pulls.listFiles({ owner, repo, pull_number })
          ).data.map((file) => file.filename)

          // Get the diff between the head branch and the base branch (limit to the files in the pull request)
          const diff = await getExecOutput(
            'git',
            ['diff', '--unified=1', '--', ...pullRequestFiles],
            { silent: true }
          )

          debug(`Diff output: ${diff.stdout}`)

          // Create an array of changes from the diff output based on patches
          const parsedDiff = parseGitDiff(diff.stdout)

          // Get changed files from parsedDiff (changed files have type 'ChangedFile')
          const changedFiles = parsedDiff.files.filter(
            (file) => file.type === 'ChangedFile'
          )

          const generateSuggestionBody = (changes) => {
            const suggestionBody = changes
              .filter(({ type }) => type === 'AddedLine' || type === 'UnchangedLine')
              .map(({ content }) => content)
              .join('\n')
            // Quadruple backticks allow for triple backticks in a fenced code block in the suggestion body
            // https://docs.github.com/get-started/writing-on-github/working-with-advanced-formatting/creating-and-highlighting-code-blocks#fenced-code-blocks
            return `\`\`\`\`suggestion\n${suggestionBody}\n\`\`\`\``
          }

          function createSingleLineComment(path, fromFileRange, changes) {
            return {
              path,
              line: fromFileRange.start,
              body: generateSuggestionBody(changes),
            }
          }

          function createMultiLineComment(path, fromFileRange, changes) {
            return {
              path,
              start_line: fromFileRange.start,
              // The last line of the chunk is the start line plus the number of lines in the chunk
              // minus 1 to account for the start line being included in fromFileRange.lines
              line: fromFileRange.start + fromFileRange.lines - 1,
              start_side: 'RIGHT',
              side: 'RIGHT',
              body: generateSuggestionBody(changes),
            }
          }

          // Fetch existing review comments
          const existingComments = (
            await github.rest.pulls.listReviewComments({ owner, repo, pull_number })
          ).data

          // Function to generate a unique key for a comment
          const generateCommentKey = (comment) =>
            `${comment.path}:${comment.line ?? ''}:${comment.start_line ?? ''}:${
              comment.body
            }`

          // Create a Set of existing comment keys for faster lookup
          const existingCommentKeys = new Set(existingComments.map(generateCommentKey))

          // Create an array of comments with suggested changes for each chunk of each changed file
          const comments = changedFiles.flatMap(({ path, chunks }) =>
            chunks.flatMap(({ fromFileRange, changes }) => {
              debug(`Starting line: ${fromFileRange.start}`)
              debug(`Number of lines: ${fromFileRange.lines}`)
              debug(`Changes: ${JSON.stringify(changes)}`)

              const comment =
                fromFileRange.lines <= 1
                  ? createSingleLineComment(path, fromFileRange, changes)
                  : createMultiLineComment(path, fromFileRange, changes)

              // Generate key for the new comment
              const commentKey = generateCommentKey(comment)

              // Check if the new comment already exists
              if (existingCommentKeys.has(commentKey)) {
                return []
              }

              return [comment]
            })
          )

          // Create a review with the suggested changes if there are any
          if (comments.length > 0) {
            await github.rest.pulls.createReview({
              owner,
              repo,
              pull_number,
              event: getInput('event').toUpperCase(),
              body: getInput('comment'),
              comments,
            })
          } else {
            debug('No changes to suggest.')
          }
