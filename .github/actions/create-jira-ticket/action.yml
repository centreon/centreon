name: Nightly/QG incident tracking
description: Create Jira ticket on nightly build/veracode qg failure

inputs:
  jira_base_url:
    required: true
    description: jira base url
  jira_user_email:
    required: true
    description: jira user email
  jira_api_token:
    required: true
    description: jira api token
  module_name:
    required: true
    description: module name
  reason_for_ticket_creation:
    required: true
    description: reason for ticket creation ("nightly", "veracode")

runs:
  using: "composite"
  steps:
    - name: Get ticket elements from context
      id: get_context
      run: |
        # Change context elements (summary, parent epic, etc.) that is checked depending on the reason the ticket is created
        if [[ "${{ inputs.reason_for_ticket_creation }}" == "veracode" ]]; then
            parent_epic_id=83818
            parent_epic_key="AT-268"
            ticket_summary="PR-${{ github.event.pull_request.number }} incident on ${{ inputs.module_name }}"
            ticket_labels="[\"Veracode\", \"Pipeline\"]"
            run_url="N/A"
        elif [[ "${{ inputs.reason_for_ticket_creation }}" == "nightly" ]]; then
            parent_epic_id=206242
            parent_epic_key="MON-151547"
            ticket_summary="$(date '+%Y-%m-%d') ${{ inputs.module_name }}-${{ github.ref_name }} nightly build failure"
            ticket_labels="[\"Nightly\", \"Pipeline\"]"
            run_url=$(gh run ls --json name,url --workflow web.yml --branch ${{ github.ref_name }} --limit 20 || jq --arg branch "${{ github.ref_name }}" 'map(select(.name == "web nightly $branch")) | .[0].url')
        fi

        echo "run_url=$run_url" >> $GITHUB_OUTPUT

        echo "parent_epic_id=$parent_epic_id" >> $GITHUB_OUTPUT
        echo "parent_epic_key=$parent_epic_key" >> $GITHUB_OUTPUT
        echo "ticket_summary=$ticket_summary" >> $GITHUB_OUTPUT
        echo "ticket_labels=$ticket_labels" >> $GITHUB_OUTPUT
        echo "run_url=$run_url" >> $GITHUB_OUTPUT
        echo "ticket_description=$ticket_description" >> $GITHUB_OUTPUT
      shell: bash

    - name: Check if ticket exists already
      id: check_ticket
      run: |
        # Checking if an incident ticket already exists
        check_if_ticket_exists=$( curl --request POST \
          --url '${{ inputs.jira_base_url }}/rest/api/3/search' \
          --user '${{ inputs.jira_user_email }}:${{ inputs.jira_api_token }}' \
          --header 'Accept: application/json' \
          --header 'Content-Type: application/json' \
          --data '{
            "fields": ["summary"],
            "jql": "project = MON AND parentEpic = ${{ steps.get_context.outputs.parent_epic_key }} AND issueType = Technical AND summary ~ ${{ steps.get_context.outputs.ticket_summary }} AND component = \"${{ inputs.module_name }}\" AND resolution = unresolved ORDER BY key ASC",
            "maxResults": 1
        }' | jq .issues[0].key )

        if [[ "$check_if_ticket_exists" != "null" ]]; then
          echo "abort_ticket_creation=true" >> $GITHUB_ENV
          echo "::error::ticket found as $check_if_ticket_exists aborting ticket creation"
        fi
      shell: bash

    - name: Create Jira Issue
      if: ${{ env.abort_ticket_creation != 'true' }}
      run: |
        if [[ "${{ inputs.reason_for_ticket_creation }}" == "veracode" ]]; then
          ticket_description=$(cat <<-EOD
          {
            "version": 1,
            "type": "doc",
            "content": [
              {
                "type": "paragraph",
                "content": [{"type": "text", "text": "This incident ticket relates to:"}]
              },
              {
                "type": "bulletList",
                "content": [
                  {
                    "type": "listItem",
                    "content": [
                      {
                        "type": "paragraph",
                        "content": [
                          {"type": "text", "text": "Ref: "},
                          {
                            "type": "text",
                            "text": "PR-${{ github.event.pull_request.number }}",
                            "marks": [{"type": "link", "attrs": {"href": "${{ github.event.pull_request.html_url }}"}}]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {"type": "paragraph", "content": []},
              {
                "type": "bulletList",
                "content": [
                  {
                    "type": "listItem",
                    "content": [
                      {
                        "type": "paragraph",
                        "content": [
                          {"type": "text", "text": "Target: "},
                          {
                            "type": "text",
                            "text": "${{ github.base_ref || github.ref_name }}",
                            "marks": [{"type": "strong"}]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "listItem",
                    "content": [
                      {
                        "type": "paragraph",
                        "content": [
                          {
                            "type": "text",
                            "text": "Link to the job",
                            "marks": [{"type": "link", "attrs": {"href": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}"}}]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {"type": "paragraph", "content": []}
            ]
          }
        EOD
          )
        elif [[ "${{ inputs.reason_for_ticket_creation }}" == "nightly" ]]; then
          ticket_description=$(cat <<-EOD
          {
            "version": 1,
            "type": "doc",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "This incident ticket relates to the ${{ inputs.module_name }} nightly on ${{ github.ref_name }} which failed on $(date '+%Y-%m-%d')."
                  }
                ]
              },
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "Link to the failed nightly",
                    "marks": [{"type": "link", "attrs": {"href": "${{ steps.get_context.outputs.run_url }}" }]
                  }
                ]
              }
            ]
          }
        EOD
          )
        fi

        # Creating a new incident ticket on Jira
        DATA=$( cat <<-EOF
        {
          "fields": {
            "summary": "${{ steps.get_context.outputs.ticket_summary }}",
            "project": {"key": "MON"},
            "issuetype": {"id": "10209"},
            "parent": {"id": "${{ steps.get_context.outputs.parent_epic_id }}", "key": "${{ steps.get_context.outputs.parent_epic_key }}"},
            "labels": ${{ steps.get_context.outputs.ticket_labels }},
            "components":[{"name": "${{ inputs.module_name }}"}],
            "customfield_10902": {"id": "10524", "value": "DevSecOps"},
            "customfield_10005": 1.0,
            "description": $ticket_description
          }
        }
        EOF
        )

        curl -v --request POST \
          --url "${{ inputs.jira_base_url }}/rest/api/3/issue" \
          --user "${{ inputs.jira_user_email }}:${{ inputs.jira_api_token }}" \
          --header 'Accept: application/json' \
          --header 'Content-Type: application/json' \
          --data "$DATA"
      shell: bash
