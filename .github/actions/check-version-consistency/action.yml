name: "check-version-consistency"
description: "Check consistency between given version and given file (install, update, .version...)."
inputs:
  file:
    description: The file to check for version consistency
    required: true
  version:
    description: The version to check against the file
    required: true

runs:
  using: "composite"
  steps:
    - name: Check version consistency
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      env:
        VERSION: ${{ inputs.version }}
        FILE: ${{ inputs.file }}
      with:
        script: |
          const fs = require('fs');
          const filePath = process.env.FILE;
          const version = process.env.VERSION;

          if (!fs.existsSync(filePath)) {
            core.setFailed(`File ${filePath} does not exist.`);
            return;
          }

          if (!fs.existsSync('.version')) {
            core.setFailed('No .version file found in the repository.');
            return;
          }

          const majorVersionContent = fs.readFileSync('.version', { encoding: 'utf8' });
          const majorVersionMatch = majorVersionContent.match(/MAJOR=(\d+\.\d+)$/);
          console.log(majorVersionMatch);
          if (!majorVersionMatch || majorVersionMatch.length < 2) {
            core.setFailed('No valid MAJOR version found in .version.');
            return;
          }
          const majorVersion = majorVersionMatch[1];

          if (filePath.match(/Update-\d{2}\.\d{2}\.\d{2}\.php$/)) {
            // Only check if the file exists
            return;
          } else if (filePath.match(/insertBaseConf\.sql$/)) {
            const content = fs.readFileSync(filePath, { encoding: 'utf8' });
            const matches = content.match(/\('version',\s*'([^']+)'\)/);

            if (!matches || matches.length < 2) {
              core.setFailed(`Version not found in ${filePath}.`);
              return;
            }

            if (version !== matches[1]) {
              core.setFailed(`Version mismatch: expected ${version}, found ${matches[1]} in ${filePath}.`);
              return;
            }

            core.info(`Version consistency check passed for ${filePath} ${matches[1]}.`);
          } else if (filePath.match(/\.version.(\w|-)+$/)) {
            const minorVersionContent = fs.readFileSync(filePath, { encoding: 'utf8' });
            const minorVersionMatch = minorVersionContent.match(/MAJOR="?(\d+\.\d+)"?$/);
            if (!minorVersionMatch || minorVersionMatch.length < 2) {
              core.setFailed(`No valid MINOR version found in ${filePath}.`);
              return;
            }
            const minorVersion = minorVersionMatch[1];

            if (version !== `${majorVersion}.${minorVersion}`) {
              core.setFailed(`Version mismatch: expected ${version}, found ${majorVersion}.${minorVersion} in ${filePath}.`);
              return;
            }

            core.info(`Version consistency check passed for ${filePath} ${majorVersion}.${minorVersion}.`);
          } else {
            core.setFailed(`Unsupported file: ${filePath}`);
            return;
          }
