name: get-test-plan-key
description: "Determine the TP key if the TP exist, create it if it doesn't"
inputs:
  major_version:
    required: true
    type: string
  xray_token:
    required: true
    type: string
outputs:
  test_plan_key:
    description: "the test plan key"
    value: ${{ steps.get_test_plan_key.outputs.test_plan_key }}

# NIGHTLY <OSS|MODULES|COLLECT> <MAJOR_VERSION> (e.g., NIGHTLY OSS 23.10)
runs:
  using: "composite"
  steps:
    - name: Get the TestPlanKey
      id: get_test_plan_key
      run: |
        # Use a GraphQL query to get all test plans matching the JQL
        graphql_query='{
          "query":"query GetTestPlans($jql: String, $limit: Int!) { getTestPlans(jql: $jql, limit: $limit) { total results { issueId jira(fields: [\"summary\", \"key\"]) } } }",
          "variables":{"jql": "project = MON","limit": 100}}'

        # Execute the GraphQL query and parse the results
        response=$(curl -H "Content-Type: application/json" -X POST -H "Authorization: Bearer ${{ inputs.xray_token }}" --data "$graphql_query" "https://xray.cloud.getxray.app/api/v2/graphql")

        test_plan_key=''
        test_plans=$(echo "$response" | jq -c '.data.getTestPlans.results[].jira')

        echo "Those are the existent TPs: $test_plans"

        # Determine the summary's prefix
        summary_prefix=''
        if [[ ${{ github.event_name }} == 'schedule' ]]; then
          summary_prefix="NIGHTLY"
        else 
          echo "The github_ref_name is: $GITHUB_REF_NAME"
          case "$GITHUB_REF_NAME" in
              hotfix*)
                summary_prefix="HOTFIX"
                ;;
              release*)
                summary_prefix="RLZ"
                ;;
          esac
        fi

        input_summary="$summary_prefix OSS ${{ inputs.major_version }}"
        echo "The summary to search is: $input_summary"

        # Extract the key of the existent test plan
        while read row; do
          summary=$(echo "$row" | jq -r '.summary')
          if [[ "$summary" == "$input_summary" ]]; then
            test_plan_key=$(echo "$row" | jq -r '.key')
            echo "The test_plan_key is $test_plan_key and the summary is $summary"
            break
          fi
        done <<< "$test_plans"

        echo "The test plan key for now is: $test_plan_key"

        # If no matching test plan was found, create one
        if [ -z "$test_plan_key" ]; then
          echo "TestPlan doesn't exist yet"

          # Create the test plan using a GraphQL mutation
          create_test_plan_mutation="{
            \"query\": \"mutation CreateTestPlan(\$testIssueIds: [String], \$jira: JSON!) { createTestPlan(testIssueIds: \$testIssueIds, jira: \$jira) { testPlan { issueId jira(fields: [\\\"key\\\"]) } warnings } }\",
            \"variables\": {
              \"testIssueIds\": [],
              \"jira\": {
                \"fields\": {
                  \"summary\": \"$input_summary\",
                  \"project\": { \"key\": \"MON\" }
                }
              }
            }
          }"
          create_result=$(curl -H "Content-Type: application/json" -X POST -H "Authorization: Bearer ${{ inputs.xray_token }}" -d "$create_test_plan_mutation" "https://xray.cloud.getxray.app/api/v2/graphql")
          
          echo "API response: $create_result "

          # Extract the key of the created test plan
          test_plan_key=$(echo "$create_result" | jq -r '.data.createTestPlan.testPlan.jira.key')
          echo "New TP created with key: $test_plan_key"
        fi

        # Set the testPlanKey as an output
        echo "test_plan_key=$test_plan_key" >> $GITHUB_OUTPUT
      shell: bash
