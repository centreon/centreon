name: "rpm-package"
description: "Package RPM Centreon"
inputs:
  module_name:
    description: "The package module name"
    required: true
  repository_name:
    description: "The repository name (standard, business, ...)"
    required: true
  distrib:
    description: "The distribution used for packaging"
    required: true
  nexus_username:
    description: "Artifact Manager technical username"
    required: true
  nexus_password:
    description: "Artifact Manager technical password"
    required: true
  version:
    description: "Centreon packaged version"
    required: true
  cache_key:
    description: "The cached package key"
    required: true

runs:
  using: "composite"
  steps:
    - name: Use cache RPM files
      uses: actions/cache@v3
      with:
        path: ./*.rpm
        key: ${{ inputs.cache_key }}

    - name: Publish RPMS to Nexus
      run: |
        if [[ -z "$GITHUB_HEAD_REF" ]];
        then
          BRANCHNAME="$GITHUB_REF_NAME"
        else
          BRANCHNAME="$GITHUB_HEAD_REF"
        fi

        echo "[DEBUG] - Branch name: $BRANCHNAME"

        case "$BRANCHNAME" in
          develop | dev-[2-9][0-9].[0-9][0-9].x)
            SUBREPO="unstable"
            ;;
          release* | hotfix*)
            SUBREPO="testing"
            ;;
          master | [2-9][0-9].[0-9][0-9].x)
            SUBREPO="stable"
            ;;
          *)
            SUBREPO="unstable"
            #echo -n "[INFO] NO DELIVERY FOR THIS BRANCH"
            #exit 0
            ;;
        esac

        FILES="*.rpm";
        echo "[DEBUG] - Repo: $SUBREPO"
        echo "[DEBUG] - Rpm FILES: $FILES"

        for FILE in $FILES
        do
          echo "[DEBUG] - File: $FILE"

          VERSION=${{ inputs.version }}
          DISTRIB=$(echo $FILE | grep -oP 'el[0-9]')
          ARCH=$(echo $FILE | grep -oP '(x86_64|noarch)')

          echo "[DEBUG] - Version: $VERSION"
          echo "[DEBUG] - Distrib: $DISTRIB"
          echo "[DEBUG] - Arch: $ARCH"

          ssh -o StrictHostKeyChecking=no "${{ secrets.YUM_REPO_URL }}" mkdir -p "$TARGET"
          scp -o StrictHostKeyChecking=no "$FILE" "${{ secrets.YUM_REPO_URL }}:$TARGET"
          ssh -o StrictHostKeyChecking=no "${{ secrets.YUM_REPO_URL }}" "ls -drc $PROJECT_LOCATION/* | head -n -6 | xargs rm -rf"
          ssh -o StrictHostKeyChecking=no "${{ secrets.YUM_REPO_URL }}" "sh "${{ secrets.UPDATE_REPO_PATH }}" $METADATAS"
        done

        local ID="${{ secrets.CLOUDFRONT_ID }}"
        local PATHS="/$PROJECT_PATH/$MAJOR/$DISTRIB/$REPOTYPE/$ARCH/*"
        local ITERATIONS=1

        until aws cloudfront create-invalidation --distribution-id "$ID" --paths "$PATHS"; do
          if [ ${ITERATIONS} -eq 10 ]; then
            return 0
          fi
          echo "couldn't invalidate cache, AWS quota might have been reached, retrying in 30 seconds..."
          sleep 30s
          ITERATIONS=$((ITERATIONS+1))
      shell: bash
