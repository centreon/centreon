name: "promote testing to stable"
description: "Promote testing packages to stable."
inputs:
  artifactory_token:
    description: "Artifactory token"
    required: true
  module:
    description: "Module"
    required: true
  distrib:
    description: "The distribution used for packaging"
    required: true
  major_version:
    description: "Centreon packaged major version"
    required: true
  minor_version:
    description: "Centreon package minor version"
    required: true
  stability:
    description: "The package stability (stable, testing, unstable)"
    required: true
  github_ref_name:
    description: "Release base ref name for push event"
    required: true
  release_type:
    description: "Type of release (hotfix, release)"
    required: true
  release_cloud:
    description: "Release context (cloud or not cloud)"
    required: true

runs:
  using: "composite"
  steps:
    - uses: jfrog/setup-jfrog-cli@26da2259ee7690e63b5410d7451b2938d08ce1f9 # v4.0.0
      env:
        JF_URL: https://centreon.jfrog.io
        JF_ACCESS_TOKEN: ${{ inputs.artifactory_token }}

    - name: Promote RPM packages to stable
      if: ${{ startsWith(inputs.distrib, 'el') }}
      run: |
        set -eux

        # DEBUG
        echo "[DEBUG] - Major version: ${{ inputs.major_version }}"
        echo "[DEBUG] - Minor version: ${{ inputs.minor_version }}"
        echo "[DEBUG] - Distrib: ${{ inputs.distrib }}"
        echo "[DEBUG] - release_cloud: ${{ inputs.release_cloud }}"
        echo "[DEBUG] - release_type: ${{ inputs.release_type }}"

        # Cloud specific promote
        # delivery by default to onprem, override to internal if base branch is master
        if [[ ${{ inputs.github_ref_name }} == "master" ]]; then
          ROOT_REPO_PATH="rpm-standard-internal"
        else
          ROOT_REPO_PATH="rpm-standard"
        fi

        # Search for testing packages candidate for promote
        for ARCH in "noarch" "x86_64"; do

          # Build search path based on release_cloud and release_type values
          # if cloud, search in testing-<release_type> path
          # if non-cloud, search in the testing usual path
          if [[ ${{ inputs.release_cloud }} -eq 1 && ${{ inputs.release_type }} == "hotfix" ]] || [[ ${{ inputs.release_cloud }} -eq 1 && ${{ inputs.release_type }} == "release" ]];then
            SEARCH_REPO_PATH="${{ inputs.major_version }}/${{ inputs.distrib }}/testing-${{ inputs.release_type }}/$ARCH/${{ inputs.module }}"
          elif [[ ${{ inputs.release_cloud }} -eq 0 ]];then
            SEARCH_REPO_PATH="${{ inputs.major_version }}/${{ inputs.distrib }}/testing/$ARCH/${{ inputs.module }}"
          else
            echo "Invalid combination of release_type and release_cloud"
          fi

          echo "[DEBUG] - Get path of $ARCH testing artifacts to promote to stable."
          SRC_PATHS=$(jf rt search --include-dirs $ROOT_REPO_PATH/$SEARCH_REPO_PATH/*.rpm | jq -r '.[].path')

          if [[ ${SRC_PATHS[@]} ]]; then
            for SRC_PATH in ${SRC_PATHS[@]}; do
              echo "[DEBUG] - Source path found: $SRC_PATH"
            done
          else
            echo "[DEBUG] - No source path found."
            continue
          fi

          # Build target path based on ARCH
          echo "[DEBUG] - Build $ARCH target path."
          TARGET_PATH="$ROOT_REPO_PATH/${{ inputs.major_version }}/${{ inputs.distrib }}/${{ inputs.stability }}/$ARCH/RPMS/${{ inputs.module }}/"
          echo "[DEBUG] - Target path: $TARGET_PATH"

          # Download candidates for promote
          echo "[DEBUG] - Promoting $ARCH testing artifacts to stable."
          for ARTIFACT in ${SRC_PATHS[@]}; do
            echo "[DEBUG] - Downloading $ARTIFACT from TESTING."
            jf rt download $ARTIFACT --flat
          done

          # Upload previously downloaded candidates to TARGET_PATH
          for ARTIFACT_DL in $(dir|grep -E "*.rpm"); do
            echo "[DEBUG] - Promoting (upload) $ARTIFACT_DL to stable $TARGET_PATH."
            jf rt upload "$ARTIFACT_DL" "$TARGET_PATH" --flat
          done

          # Cleanup before next round of candidates
          rm -f *.rpm
        done

      shell: bash

    - name: Promote DEB packages to stable
      if: ${{ contains(fromJSON('["bullseye", "bookworm"]') , inputs.distrib) }}
      run: |
        set -eux

        echo "[DEBUG] - Major version: ${{ inputs.major_version }}"
        echo "[DEBUG] - Minor version: ${{ inputs.minor_version }}"
        echo "[DEBUG] - Distrib: ${{ inputs.distrib }}"

        # Define ROOT_REPO_PATH for debian
        # There is no cloud ROOT_REPO_PATH for debian, only onprem
        # Should there be a need to deploy debian to cloud repositories, please use the same condition as RPM promotion
        ROOT_REPO_PATH="apt-standard-${{ inputs.major_version }}"

        echo "[DEBUG] - Get path of testing DEB packages to promote to stable."
        SRC_PATHS=$(jf rt search --include-dirs "$ROOT_REPO_PATH-testing/pool/${{ inputs.module }}/*${{ inputs.distrib }}*.deb | jq -r '.[].path')

        if [[ ${SRC_PATHS[@]} ]]; then
          for SRC_PATH in ${SRC_PATHS[@]}; do
            echo "[DEBUG] - Source path found: $SRC_PATH"
          done
        else
          echo "[DEBUG] - No source path found."
          continue
        fi

        echo "[DEBUG] - Build target path."
        TARGET_PATH="$ROOT_REPO_PATH-${{ inputs.stability }}/pool/${{ inputs.module }}/"
        echo "[DEBUG] - Target path: $TARGET_PATH"

        echo "[DEBUG] - Promoting DEB testing artifacts to stable."
        for ARTIFACT in ${SRC_PATHS[@]}; do
          echo "[DEBUG] - Downloading $ARTIFACT from TESTING."
          jf rt download $ARTIFACT --flat
        done

        for ARTIFACT_DL in $(dir -1|grep -E ".+${{ inputs.distrib }}.+\.deb"); do
          ARCH=$(echo $ARTIFACT_DL | cut -d '_' -f3 | cut -d '.' -f1)
          echo "[DEBUG] - Promoting (upload) $ARTIFACT_DL to stable $TARGET_PATH."
          jf rt upload "$ARTIFACT_DL" "$TARGET_PATH" --deb "${{ inputs.distrib }}/main/$ARCH" --flat
        done

        rm -f *.deb

      shell: bash
