name: "deb-delivery"
description: "Package deb Centreon"
inputs:
  module_name:
    description: "The package module name"
    required: true
  distrib:
    description: "The distribution used for packaging"
    required: true
  version:
    description: "Centreon packaged major version"
    required: true
  cache_key:
    description: "The cached package key"
    required: true
  stability:
    description: "The package stability (stable, testing, unstable)"
    required: true
  artifactory_token:
    description: "Artifactory token"
    required: true
  release_type:
    description: "Type of release (hotfix, release)"
    required: true
  is_cloud:
    description: "Release context (cloud or not cloud)"
    required: true

runs:
  using: "composite"
  steps:
    - name: Use cache DEB files
      uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: ./*.deb
        key: ${{ inputs.cache_key }}
        fail-on-cache-miss: true

    - uses: jfrog/setup-jfrog-cli@f748a0599171a192a2668afee8d0497f7c1069df # v4.5.6
      env:
        JF_URL: https://centreon.jfrog.io
        JF_ACCESS_TOKEN: ${{ inputs.artifactory_token }}

    - name: Publish DEBs
      run: |
        FILES="*.deb"

        # DEBUG
        echo "[DEBUG] - Version: ${{ inputs.version }}"
        echo "[DEBUG] - Distrib: ${{ inputs.distrib }}"
        echo "[DEBUG] - module_name: ${{ inputs.module_name }}"
        echo "[DEBUG] - is_cloud: ${{ inputs.is_cloud }}"
        echo "[DEBUG] - release_type: ${{ inputs.release_type }}"
        echo "[DEBUG] - stability: ${{ inputs.stability }}"

        # Make sure all required inputs are NOT empty
        if [[ -z "${{ inputs.module_name }}" || -z "${{ inputs.distrib }}" || -z ${{ inputs.stability }} || -z ${{ inputs.version }} || -z "${{ inputs.is_cloud }}" ]]; then
          echo "Some mandatory inputs are empty, please check the logs."
          exit 1
        fi

        # Set ROOT_REPO_PATH based on inputs
        if [[ "${{ inputs.is_cloud }}" == "true" ]]; then
          ROOT_REPO_PATH="apt-standard-internal-${{ inputs.stability }}"
        elif [[ "${{ inputs.distrib }}" == "jammy" ]]; then
          ROOT_REPO_PATH="ubuntu-standard-${{ inputs.version }}-${{ inputs.stability }}"
        else
          ROOT_REPO_PATH="apt-standard-${{ inputs.version }}-${{ inputs.stability }}"
        fi

        # Cleanup (equivalent to --sync-deletes done with RPMs)
        # This is a workaround the fact that jfrog cli does not allow upload
        # of multiple artifacts at once to an APT repository

        # Get list of remote artifacts
        ARTIFACTS_REMOTE_LIST=$(jf rt search "$ROOT_REPO_PATH/pool/${{ inputs.module_name }}/*_${{ inputs.major_version }}*.deb" --recursive --sort-by=path |jq -r .[].path)

        # Get list of local artifacts
        ARTIFACTS_LOCAL_LIST=$(dir -1 |grep -E '.*${{ inputs.major_version }}.*.deb')

        # Build list of diff between local and remote artifacts
        for local_artifact in "${ARTIFACTS_LOCAL_LIST[@]}"; do
          found=false
          # Iterate over elements of ARTIFACTS_REMOTE_LIST
          for remote_artifact in "${ARTIFACTS_REMOTE_LIST[@]}"; do
            # Compare elements
            if [ "$local_artifact" == "$remote_artifact" ]; then
              found=true
              break
            fi
          done
          # If element not found in ARTIFACTS_REMOTE_LIST, add it to ARTIFACTS_DIFF_LIST
          if ! $found; then
            ARTIFACTS_DIFF_LIST+=("$local_artifact")
          fi
        done

        # Delete all remote artifacts
        jf rt delete "$ROOT_REPO_PATH/pool/${{ inputs.module_name }}/*.deb"

        # Upload local artifacts
        for ARTIFACT in ${ARTIFACTS_LOCAL_LIST[@]}; do
          echo "[DEBUG] - File: $ARTIFACT"

          VERSION=${{ inputs.version }}
          DISTRIB=$(echo $ARTIFACT | cut -d '_' -f2 | cut -d '-' -f2)
          ARCH=$(echo $ARTIFACT | cut -d '_' -f3 | cut -d '.' -f1)

          echo "[DEBUG] - Version: $VERSION"

          if [[ "${{ inputs.is_cloud }}" == "true" ]]; then
            ROOT_REPO_PATH="apt-standard-internal-${{ inputs.stability }}"
          elif [[ "${{ inputs.distrib }}" == "jammy" ]]; then
            ROOT_REPO_PATH="ubuntu-standard-${{ inputs.major_version }}-${{ inputs.stability }}"
          else
            ROOT_REPO_PATH="apt-standard-${{ inputs.major_version }}-${{ inputs.stability }}"
          fi

          jf rt upload "$ARTIFACT" "$ROOT_REPO_PATH/pool/${{ inputs.module_name }}/" --deb "${{ inputs.distrib }}/main/$ARCH"
        done
      shell: bash
