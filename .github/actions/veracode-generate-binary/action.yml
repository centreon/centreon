name: "veracode-generate-binary"
description: "Prepare binary to be analyzed"
inputs:
  module_directory:
    description: Path to the module
    required: true
  module_name:
    description: Module name
    required: true
  target_branch_name:
    description: The target maintenance branch
    required: true
  compile_mvn:
    description: If java binary needs to be compiled
  complie_cpp:
    description: If C++ binary needs to be compiled
  exclusion_file:
    description: Name of the file used to list files and folders to exclude (e.g test files)
  cache_key:
    description: key used to identify the cache
    required: true

runs:
  using: "composite"
  steps:
    - name: Exclude unconsistent files
      if: ${{ inputs.exclusion_file != '' }}
      run: echo "TODO - Delete files or folders before creating zip file"
      shell: bash

    - name: DEBUG - Check location #TODO: to remove
      run: ls -la
      shell: bash

    - name: Create JAR files
      #TODO: to manage JAR generation for project using JAVA
      if: inputs.compile_mvn == 'yes'
      run: echo "TODO - compile mvn files"
      shell: bash

    - name: Compile Cpp files
      #TODO: to manage Cpp files compilation
      if: inputs.compile_cpp == 'yes'
      run: echo "TODO - compile cpp files"
      shell: bash

    - name: Create zip file
      run: |
        if [[ "${{ inputs.module_directory }}" == '' || "${{ inputs.target_branch_name }}" == '' || "${{ inputs.module_name }}" == '' ]]; then
          echo "[DEBUG] - One mandatory argument is missing"
        fi
        cd ${{ inputs.module_directory }}
        zip -rq "../${{ inputs.module_name }}-${{ inputs.target_branch_name }}.zip" *
      shell: bash

    - name: DEBUG - Check location  #TODO: to remove
      run: ls -la
      shell: bash

    - uses: actions/cache/save@v3
      with:
        path: "${{ inputs.module_name }}-${{ inputs.target_branch_name }}.zip"
        key: ${{ inputs.cache_key }}
