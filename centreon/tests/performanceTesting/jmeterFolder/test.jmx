<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Centreon API Test Plan">
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Admin Login and Filter Setup">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Admin Login Request">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/login</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{ &quot;security&quot;: { &quot;credentials&quot;: { &quot;login&quot;: &quot;admin&quot;, &quot;password&quot;: &quot;Centreon!2021&quot; } } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Admin Auth Token">
            <stringProp name="JSONPostProcessor.referenceNames">AUTH_TOKEN</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.security.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adding an OK filter with all types selected">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/users/filters/events-view</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;criterias&quot;:[{&quot;name&quot;:&quot;names&quot;,&quot;object_type&quot;:&quot;names&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;parent_names&quot;,&quot;object_type&quot;:&quot;parent_names&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;resource_types&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[{&quot;id&quot;:&quot;host&quot;,&quot;name&quot;:&quot;Host&quot;},{&quot;id&quot;:&quot;service&quot;,&quot;name&quot;:&quot;Service&quot;},{&quot;id&quot;:&quot;metaservice&quot;,&quot;name&quot;:&quot;Meta-Service&quot;}]},{&quot;name&quot;:&quot;states&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;statuses&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[{&quot;id&quot;:&quot;UP&quot;,&quot;name&quot;:&quot;Up&quot;},{&quot;id&quot;:&quot;OK&quot;,&quot;name&quot;:&quot;Ok&quot;}]},{&quot;name&quot;:&quot;status_types&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_groups&quot;,&quot;object_type&quot;:&quot;host_groups&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_groups&quot;,&quot;object_type&quot;:&quot;service_groups&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;monitoring_servers&quot;,&quot;object_type&quot;:&quot;monitoring_servers&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_categories&quot;,&quot;object_type&quot;:&quot;host_categories&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_categories&quot;,&quot;object_type&quot;:&quot;service_categories&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_severities&quot;,&quot;object_type&quot;:&quot;host_severities&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_severity_levels&quot;,&quot;object_type&quot;:&quot;host_severity_levels&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_severities&quot;,&quot;object_type&quot;:&quot;service_severities&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_severity_levels&quot;,&quot;object_type&quot;:&quot;service_severity_levels&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;search&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;text&quot;,&quot;value&quot;:&quot;&quot;},{&quot;name&quot;:&quot;sort&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;array&quot;,&quot;value&quot;:[&quot;status_severity_code&quot;,&quot;desc&quot;]}],&quot;name&quot;:&quot;upOkFiltre&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${AUTH_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ok_filter">
            <stringProp name="JSONPostProcessor.referenceNames">ok_filter</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="Scope.variable"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adding a warning filtre">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/users/filters/events-view</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;criterias&quot;:[{&quot;name&quot;:&quot;names&quot;,&quot;object_type&quot;:&quot;names&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;parent_names&quot;,&quot;object_type&quot;:&quot;parent_names&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;resource_types&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[{&quot;id&quot;:&quot;host&quot;,&quot;name&quot;:&quot;Host&quot;},{&quot;id&quot;:&quot;service&quot;,&quot;name&quot;:&quot;Service&quot;},{&quot;id&quot;:&quot;metaservice&quot;,&quot;name&quot;:&quot;Meta-Service&quot;}]},{&quot;name&quot;:&quot;states&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;statuses&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[{&quot;id&quot;:&quot;WARNING&quot;,&quot;name&quot;:&quot;Warning&quot;}]},{&quot;name&quot;:&quot;status_types&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_groups&quot;,&quot;object_type&quot;:&quot;host_groups&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_groups&quot;,&quot;object_type&quot;:&quot;service_groups&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;monitoring_servers&quot;,&quot;object_type&quot;:&quot;monitoring_servers&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_categories&quot;,&quot;object_type&quot;:&quot;host_categories&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_categories&quot;,&quot;object_type&quot;:&quot;service_categories&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_severities&quot;,&quot;object_type&quot;:&quot;host_severities&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_severity_levels&quot;,&quot;object_type&quot;:&quot;host_severity_levels&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_severities&quot;,&quot;object_type&quot;:&quot;service_severities&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_severity_levels&quot;,&quot;object_type&quot;:&quot;service_severity_levels&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;search&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;text&quot;,&quot;value&quot;:&quot;&quot;},{&quot;name&quot;:&quot;sort&quot;,&quot;type&quot;:&quot;array&quot;,&quot;value&quot;:[&quot;status_severity_code&quot;,&quot;desc&quot;],&quot;object_type&quot;:null,&quot;search_data&quot;:null}],&quot;name&quot;:&quot;Warning filtre&quot;}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${AUTH_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="warning_filtre">
            <stringProp name="JSONPostProcessor.referenceNames">warning_filtre</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adding a critical  filtre">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/users/filters/events-view</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;criterias&quot;:[{&quot;name&quot;:&quot;names&quot;,&quot;object_type&quot;:&quot;names&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;parent_names&quot;,&quot;object_type&quot;:&quot;parent_names&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;resource_types&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[{&quot;id&quot;:&quot;host&quot;,&quot;name&quot;:&quot;Host&quot;},{&quot;id&quot;:&quot;service&quot;,&quot;name&quot;:&quot;Service&quot;},{&quot;id&quot;:&quot;metaservice&quot;,&quot;name&quot;:&quot;Meta-Service&quot;}]},{&quot;name&quot;:&quot;states&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;statuses&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[{&quot;id&quot;:&quot;CRITICAL&quot;,&quot;name&quot;:&quot;Critical&quot;}]},{&quot;name&quot;:&quot;status_types&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_groups&quot;,&quot;object_type&quot;:&quot;host_groups&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_groups&quot;,&quot;object_type&quot;:&quot;service_groups&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;monitoring_servers&quot;,&quot;object_type&quot;:&quot;monitoring_servers&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_categories&quot;,&quot;object_type&quot;:&quot;host_categories&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_categories&quot;,&quot;object_type&quot;:&quot;service_categories&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_severities&quot;,&quot;object_type&quot;:&quot;host_severities&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_severity_levels&quot;,&quot;object_type&quot;:&quot;host_severity_levels&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_severities&quot;,&quot;object_type&quot;:&quot;service_severities&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_severity_levels&quot;,&quot;object_type&quot;:&quot;service_severity_levels&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;search&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;text&quot;,&quot;value&quot;:&quot;&quot;},{&quot;name&quot;:&quot;sort&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;array&quot;,&quot;value&quot;:[&quot;status_severity_code&quot;,&quot;desc&quot;]}],&quot;name&quot;:&quot;Critical filtre&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${AUTH_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="critical_filtre" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">critical_filtre</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adding an unknown filtre">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/users/filters/events-view</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;criterias&quot;:[{&quot;name&quot;:&quot;names&quot;,&quot;object_type&quot;:&quot;names&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;parent_names&quot;,&quot;object_type&quot;:&quot;parent_names&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;resource_types&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[{&quot;id&quot;:&quot;host&quot;,&quot;name&quot;:&quot;Host&quot;},{&quot;id&quot;:&quot;service&quot;,&quot;name&quot;:&quot;Service&quot;},{&quot;id&quot;:&quot;metaservice&quot;,&quot;name&quot;:&quot;Meta-Service&quot;}]},{&quot;name&quot;:&quot;states&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;statuses&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[{&quot;id&quot;:&quot;UNKNOWN&quot;,&quot;name&quot;:&quot;Unknown&quot;}]},{&quot;name&quot;:&quot;status_types&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_groups&quot;,&quot;object_type&quot;:&quot;host_groups&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_groups&quot;,&quot;object_type&quot;:&quot;service_groups&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;monitoring_servers&quot;,&quot;object_type&quot;:&quot;monitoring_servers&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_categories&quot;,&quot;object_type&quot;:&quot;host_categories&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_categories&quot;,&quot;object_type&quot;:&quot;service_categories&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_severities&quot;,&quot;object_type&quot;:&quot;host_severities&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_severity_levels&quot;,&quot;object_type&quot;:&quot;host_severity_levels&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_severities&quot;,&quot;object_type&quot;:&quot;service_severities&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_severity_levels&quot;,&quot;object_type&quot;:&quot;service_severity_levels&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;search&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;text&quot;,&quot;value&quot;:&quot;&quot;},{&quot;name&quot;:&quot;sort&quot;,&quot;type&quot;:&quot;array&quot;,&quot;value&quot;:[&quot;status_severity_code&quot;,&quot;desc&quot;],&quot;object_type&quot;:null,&quot;search_data&quot;:null}],&quot;name&quot;:&quot;Adding unknown filtre&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${AUTH_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="unknown_filtre" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">unknown_filtre</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adding a pending  filtre">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/users/filters/events-view</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;criterias&quot;:[{&quot;name&quot;:&quot;names&quot;,&quot;object_type&quot;:&quot;names&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;parent_names&quot;,&quot;object_type&quot;:&quot;parent_names&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;resource_types&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[{&quot;id&quot;:&quot;host&quot;,&quot;name&quot;:&quot;Host&quot;},{&quot;id&quot;:&quot;service&quot;,&quot;name&quot;:&quot;Service&quot;},{&quot;id&quot;:&quot;metaservice&quot;,&quot;name&quot;:&quot;Meta-Service&quot;}]},{&quot;name&quot;:&quot;states&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;statuses&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[{&quot;id&quot;:&quot;PENDING&quot;,&quot;name&quot;:&quot;Pending&quot;}]},{&quot;name&quot;:&quot;status_types&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_groups&quot;,&quot;object_type&quot;:&quot;host_groups&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_groups&quot;,&quot;object_type&quot;:&quot;service_groups&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;monitoring_servers&quot;,&quot;object_type&quot;:&quot;monitoring_servers&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_categories&quot;,&quot;object_type&quot;:&quot;host_categories&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_categories&quot;,&quot;object_type&quot;:&quot;service_categories&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_severities&quot;,&quot;object_type&quot;:&quot;host_severities&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_severity_levels&quot;,&quot;object_type&quot;:&quot;host_severity_levels&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_severities&quot;,&quot;object_type&quot;:&quot;service_severities&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_severity_levels&quot;,&quot;object_type&quot;:&quot;service_severity_levels&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;search&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;text&quot;,&quot;value&quot;:&quot;&quot;},{&quot;name&quot;:&quot;sort&quot;,&quot;type&quot;:&quot;array&quot;,&quot;value&quot;:[&quot;status_severity_code&quot;,&quot;desc&quot;],&quot;object_type&quot;:null,&quot;search_data&quot;:null}],&quot;name&quot;:&quot;Adding pending filtre&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${AUTH_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pending_filtre" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pending_filtre</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adding all service filtres">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/users/filters/events-view</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;criterias&quot;:[{&quot;name&quot;:&quot;names&quot;,&quot;object_type&quot;:&quot;names&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;parent_names&quot;,&quot;object_type&quot;:&quot;parent_names&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;resource_types&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[{&quot;id&quot;:&quot;host&quot;,&quot;name&quot;:&quot;Host&quot;},{&quot;id&quot;:&quot;service&quot;,&quot;name&quot;:&quot;Service&quot;},{&quot;id&quot;:&quot;metaservice&quot;,&quot;name&quot;:&quot;Meta-Service&quot;}]},{&quot;name&quot;:&quot;states&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;statuses&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[{&quot;id&quot;:&quot;PENDING&quot;,&quot;name&quot;:&quot;Pending&quot;},{&quot;id&quot;:&quot;OK&quot;,&quot;name&quot;:&quot;Ok&quot;},{&quot;id&quot;:&quot;WARNING&quot;,&quot;name&quot;:&quot;Warning&quot;},{&quot;id&quot;:&quot;CRITICAL&quot;,&quot;name&quot;:&quot;Critical&quot;},{&quot;id&quot;:&quot;PENDING&quot;,&quot;name&quot;:&quot;Pending&quot;},{&quot;id&quot;:&quot;UNKNOWN&quot;,&quot;name&quot;:&quot;Unknown&quot;}]},{&quot;name&quot;:&quot;status_types&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_groups&quot;,&quot;object_type&quot;:&quot;host_groups&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_groups&quot;,&quot;object_type&quot;:&quot;service_groups&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;monitoring_servers&quot;,&quot;object_type&quot;:&quot;monitoring_servers&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_categories&quot;,&quot;object_type&quot;:&quot;host_categories&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_categories&quot;,&quot;object_type&quot;:&quot;service_categories&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_severities&quot;,&quot;object_type&quot;:&quot;host_severities&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_severity_levels&quot;,&quot;object_type&quot;:&quot;host_severity_levels&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_severities&quot;,&quot;object_type&quot;:&quot;service_severities&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_severity_levels&quot;,&quot;object_type&quot;:&quot;service_severity_levels&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;search&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;text&quot;,&quot;value&quot;:&quot;&quot;},{&quot;name&quot;:&quot;sort&quot;,&quot;type&quot;:&quot;array&quot;,&quot;value&quot;:[&quot;status_severity_code&quot;,&quot;desc&quot;],&quot;object_type&quot;:null,&quot;search_data&quot;:null}],&quot;name&quot;:&quot;Adding all service filtres&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${AUTH_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="all_services_filtre" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">all_services_filtre</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adding down filtre">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/users/filters/events-view</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;criterias&quot;:[{&quot;name&quot;:&quot;names&quot;,&quot;object_type&quot;:&quot;names&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;parent_names&quot;,&quot;object_type&quot;:&quot;parent_names&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;resource_types&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[{&quot;id&quot;:&quot;host&quot;,&quot;name&quot;:&quot;Host&quot;},{&quot;id&quot;:&quot;service&quot;,&quot;name&quot;:&quot;Service&quot;},{&quot;id&quot;:&quot;metaservice&quot;,&quot;name&quot;:&quot;Meta-Service&quot;}]},{&quot;name&quot;:&quot;states&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;statuses&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[{&quot;id&quot;:&quot;DOWN&quot;,&quot;name&quot;:&quot;Down&quot;}]},{&quot;name&quot;:&quot;status_types&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_groups&quot;,&quot;object_type&quot;:&quot;host_groups&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_groups&quot;,&quot;object_type&quot;:&quot;service_groups&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;monitoring_servers&quot;,&quot;object_type&quot;:&quot;monitoring_servers&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_categories&quot;,&quot;object_type&quot;:&quot;host_categories&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_categories&quot;,&quot;object_type&quot;:&quot;service_categories&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_severities&quot;,&quot;object_type&quot;:&quot;host_severities&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_severity_levels&quot;,&quot;object_type&quot;:&quot;host_severity_levels&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_severities&quot;,&quot;object_type&quot;:&quot;service_severities&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_severity_levels&quot;,&quot;object_type&quot;:&quot;service_severity_levels&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;search&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;text&quot;,&quot;value&quot;:&quot;&quot;},{&quot;name&quot;:&quot;sort&quot;,&quot;type&quot;:&quot;array&quot;,&quot;value&quot;:[&quot;status_severity_code&quot;,&quot;desc&quot;],&quot;object_type&quot;:null,&quot;search_data&quot;:null}],&quot;name&quot;:&quot;Down filtre&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${AUTH_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="down_filtre" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">down_filtre</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adding unreachable filtre">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/users/filters/events-view</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;criterias&quot;:[{&quot;name&quot;:&quot;names&quot;,&quot;object_type&quot;:&quot;names&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;parent_names&quot;,&quot;object_type&quot;:&quot;parent_names&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;resource_types&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[{&quot;id&quot;:&quot;host&quot;,&quot;name&quot;:&quot;Host&quot;},{&quot;id&quot;:&quot;service&quot;,&quot;name&quot;:&quot;Service&quot;},{&quot;id&quot;:&quot;metaservice&quot;,&quot;name&quot;:&quot;Meta-Service&quot;}]},{&quot;name&quot;:&quot;states&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;statuses&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[{&quot;id&quot;:&quot;UNREACHABLE&quot;,&quot;name&quot;:&quot;Unreachable&quot;}]},{&quot;name&quot;:&quot;status_types&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_groups&quot;,&quot;object_type&quot;:&quot;host_groups&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_groups&quot;,&quot;object_type&quot;:&quot;service_groups&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;monitoring_servers&quot;,&quot;object_type&quot;:&quot;monitoring_servers&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_categories&quot;,&quot;object_type&quot;:&quot;host_categories&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_categories&quot;,&quot;object_type&quot;:&quot;service_categories&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_severities&quot;,&quot;object_type&quot;:&quot;host_severities&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_severity_levels&quot;,&quot;object_type&quot;:&quot;host_severity_levels&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_severities&quot;,&quot;object_type&quot;:&quot;service_severities&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_severity_levels&quot;,&quot;object_type&quot;:&quot;service_severity_levels&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;search&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;text&quot;,&quot;value&quot;:&quot;&quot;},{&quot;name&quot;:&quot;sort&quot;,&quot;type&quot;:&quot;array&quot;,&quot;value&quot;:[&quot;status_severity_code&quot;,&quot;desc&quot;],&quot;object_type&quot;:null,&quot;search_data&quot;:null}],&quot;name&quot;:&quot;Unreachble filtre&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${AUTH_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="unreachable_filtre" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">unreachable_filtre</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adding pending hosts filtre">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/users/filters/events-view</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;criterias&quot;:[{&quot;name&quot;:&quot;names&quot;,&quot;object_type&quot;:&quot;names&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;parent_names&quot;,&quot;object_type&quot;:&quot;parent_names&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;resource_types&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[{&quot;id&quot;:&quot;host&quot;,&quot;name&quot;:&quot;Host&quot;},{&quot;id&quot;:&quot;service&quot;,&quot;name&quot;:&quot;Service&quot;},{&quot;id&quot;:&quot;metaservice&quot;,&quot;name&quot;:&quot;Meta-Service&quot;}]},{&quot;name&quot;:&quot;states&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;statuses&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[{&quot;id&quot;:&quot;PENDING&quot;,&quot;name&quot;:&quot;Pending&quot;}]},{&quot;name&quot;:&quot;status_types&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_groups&quot;,&quot;object_type&quot;:&quot;host_groups&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_groups&quot;,&quot;object_type&quot;:&quot;service_groups&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;monitoring_servers&quot;,&quot;object_type&quot;:&quot;monitoring_servers&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_categories&quot;,&quot;object_type&quot;:&quot;host_categories&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_categories&quot;,&quot;object_type&quot;:&quot;service_categories&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_severities&quot;,&quot;object_type&quot;:&quot;host_severities&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_severity_levels&quot;,&quot;object_type&quot;:&quot;host_severity_levels&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_severities&quot;,&quot;object_type&quot;:&quot;service_severities&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_severity_levels&quot;,&quot;object_type&quot;:&quot;service_severity_levels&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;search&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;text&quot;,&quot;value&quot;:&quot;&quot;},{&quot;name&quot;:&quot;sort&quot;,&quot;type&quot;:&quot;array&quot;,&quot;value&quot;:[&quot;status_severity_code&quot;,&quot;desc&quot;],&quot;object_type&quot;:null,&quot;search_data&quot;:null}],&quot;name&quot;:&quot;Pending_Hosts filtre&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${AUTH_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pending_hosts_filtre" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pending_hosts_filtre</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adding all host filters">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/users/filters/events-view</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;criterias&quot;:[{&quot;name&quot;:&quot;names&quot;,&quot;object_type&quot;:&quot;names&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;parent_names&quot;,&quot;object_type&quot;:&quot;parent_names&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;resource_types&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[{&quot;id&quot;:&quot;host&quot;,&quot;name&quot;:&quot;Host&quot;},{&quot;id&quot;:&quot;service&quot;,&quot;name&quot;:&quot;Service&quot;},{&quot;id&quot;:&quot;metaservice&quot;,&quot;name&quot;:&quot;Meta-Service&quot;}]},{&quot;name&quot;:&quot;states&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;statuses&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[{&quot;id&quot;:&quot;PENDING&quot;,&quot;name&quot;:&quot;Pending&quot;},{&quot;id&quot;:&quot;UP&quot;,&quot;name&quot;:&quot;Up&quot;},{&quot;id&quot;:&quot;DOWN&quot;,&quot;name&quot;:&quot;Down&quot;},{&quot;id&quot;:&quot;UNREACHABLE&quot;,&quot;name&quot;:&quot;Unreachable&quot;}]},{&quot;name&quot;:&quot;status_types&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_groups&quot;,&quot;object_type&quot;:&quot;host_groups&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_groups&quot;,&quot;object_type&quot;:&quot;service_groups&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;monitoring_servers&quot;,&quot;object_type&quot;:&quot;monitoring_servers&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_categories&quot;,&quot;object_type&quot;:&quot;host_categories&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_categories&quot;,&quot;object_type&quot;:&quot;service_categories&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_severities&quot;,&quot;object_type&quot;:&quot;host_severities&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;host_severity_levels&quot;,&quot;object_type&quot;:&quot;host_severity_levels&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_severities&quot;,&quot;object_type&quot;:&quot;service_severities&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;service_severity_levels&quot;,&quot;object_type&quot;:&quot;service_severity_levels&quot;,&quot;type&quot;:&quot;multi_select&quot;,&quot;value&quot;:[]},{&quot;name&quot;:&quot;search&quot;,&quot;object_type&quot;:null,&quot;type&quot;:&quot;text&quot;,&quot;value&quot;:&quot;&quot;},{&quot;name&quot;:&quot;sort&quot;,&quot;type&quot;:&quot;array&quot;,&quot;value&quot;:[&quot;status_severity_code&quot;,&quot;desc&quot;],&quot;object_type&quot;:null,&quot;search_data&quot;:null}],&quot;name&quot;:&quot;all host filtres&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${AUTH_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="all_hosts_filtre" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">all_hosts_filtre</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Through Filters">
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Get all filters">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// Initialize the counter if absent
if (vars.get(&quot;FILTER_INDEX&quot;) == null) {
    vars.put(&quot;FILTER_INDEX&quot;, &quot;0&quot;)
}

// Retrieve filters from JMeter variables
def filters = [
    vars.get(&quot;ok_filter&quot;),
    vars.get(&quot;warning_filtre&quot;),
    vars.get(&quot;critical_filtre&quot;),
    vars.get(&quot;unknown_filtre&quot;),
    vars.get(&quot;pending_filtre&quot;),
    vars.get(&quot;all_services_filtre&quot;),
    vars.get(&quot;down_filtre&quot;),
    vars.get(&quot;unreachable_filtre&quot;),
    vars.get(&quot;pending_hosts_filtre&quot;),
    vars.get(&quot;all_hosts_filtre&quot;)
].findAll { it != null &amp;&amp; !it.isEmpty() }  // Remove null or empty values

// Get the current loop index
def loopIndex = vars.get(&quot;FILTER_INDEX&quot;).toInteger()

// Check if index is within bounds
if (loopIndex &lt; filters.size()) {
    def filterName = filters[loopIndex].trim()
    vars.put(&quot;CURRENT_FILTER&quot;, filterName)

    log.info(&quot;🔄 Processing filter: ${filterName} (${loopIndex + 1}/${filters.size()})&quot;)

    // Increment the index for the next iteration
    vars.put(&quot;FILTER_INDEX&quot;, (loopIndex + 1).toString())

    // Stop loop if it&apos;s the last filter
    if (loopIndex + 1 &gt;= filters.size()) {
        vars.put(&quot;STOP_LOOP&quot;, &quot;true&quot;)
        log.info(&quot;✅ All filters processed. Next iteration will stop.&quot;)
    }
} else {
    vars.put(&quot;STOP_LOOP&quot;, &quot;true&quot;)
    log.info(&quot;🚫 No more filters to process. Loop will stop.&quot;)
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete all filters">
            <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/users/filters/events-view/${CURRENT_FILTER}</stringProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">${AUTH_TOKEN}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">if (vars.get(&quot;STOP_LOOP&quot;) == &quot;true&quot;) {
    log.info(&quot;End of filter list reached. Stopping thread.&quot;)
    ctx.getThread().stop()
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Using filters">
        <intProp name="ThreadGroup.num_threads">2</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Read users from CSV">
          <stringProp name="filename">${__P(users_csv_path)}</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">USERNAME,PASSWORD</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login with no admin users">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/login</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{ &quot;security&quot;: { &quot;credentials&quot;: { &quot;login&quot;: &quot;${USERNAME}&quot;, &quot;password&quot;: &quot;${PASSWORD}&quot; } } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract no admin users Auth Token" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">MULTIPLE_USERS_TOKEN</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.security.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting up and ok resrouces">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/users/filters/events-view</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="page" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">page</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">30</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
              <elementProp name="sort_by" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">{&quot;status_severity_code&quot;: &quot;desc&quot;, &quot;last_status_change&quot;: &quot;desc&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sort_by</stringProp>
              </elementProp>
              <elementProp name="search" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">{&quot;$and&quot;: []}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">search</stringProp>
              </elementProp>
              <elementProp name="types" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">[&quot;host&quot;, &quot;service&quot;, &quot;metaservice&quot;]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">types</stringProp>
              </elementProp>
              <elementProp name="statuses" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">[&quot;UP&quot;, &quot;OK&quot;]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">statuses</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${MULTIPLE_USERS_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting warning resrouces">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/users/filters/events-view</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="page" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">page</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">30</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
              <elementProp name="sort_by" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">{&quot;status_severity_code&quot;: &quot;desc&quot;, &quot;last_status_change&quot;: &quot;desc&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sort_by</stringProp>
              </elementProp>
              <elementProp name="search" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">{&quot;$and&quot;: []}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">search</stringProp>
              </elementProp>
              <elementProp name="types" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">[&quot;host&quot;, &quot;service&quot;, &quot;metaservice&quot;]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">types</stringProp>
              </elementProp>
              <elementProp name="statuses" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">[&quot;WARNING&quot;] </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">statuses</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${MULTIPLE_USERS_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting critical resrouces">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/users/filters/events-view</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="page" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">page</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">30</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
              <elementProp name="sort_by" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">{&quot;status_severity_code&quot;: &quot;desc&quot;, &quot;last_status_change&quot;: &quot;desc&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sort_by</stringProp>
              </elementProp>
              <elementProp name="search" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">{&quot;$and&quot;: []}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">search</stringProp>
              </elementProp>
              <elementProp name="types" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">[&quot;host&quot;, &quot;service&quot;, &quot;metaservice&quot;]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">types</stringProp>
              </elementProp>
              <elementProp name="statuses" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">[&quot;CRITICAL&quot;] </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">statuses</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${MULTIPLE_USERS_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting unknown resrouces">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/users/filters/events-view</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="page" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">page</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">30</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
              <elementProp name="sort_by" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">{&quot;status_severity_code&quot;: &quot;desc&quot;, &quot;last_status_change&quot;: &quot;desc&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sort_by</stringProp>
              </elementProp>
              <elementProp name="search" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">{&quot;$and&quot;: []}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">search</stringProp>
              </elementProp>
              <elementProp name="types" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">[&quot;host&quot;, &quot;service&quot;, &quot;metaservice&quot;]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">types</stringProp>
              </elementProp>
              <elementProp name="statuses" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">[&quot;UNKNOWN&quot;] </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">statuses</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${MULTIPLE_USERS_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting pending resrouces">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/users/filters/events-view</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="page" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">page</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">30</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
              <elementProp name="sort_by" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">{&quot;status_severity_code&quot;: &quot;desc&quot;, &quot;last_status_change&quot;: &quot;desc&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sort_by</stringProp>
              </elementProp>
              <elementProp name="search" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">{&quot;$and&quot;: []}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">search</stringProp>
              </elementProp>
              <elementProp name="types" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">[&quot;host&quot;, &quot;service&quot;, &quot;metaservice&quot;]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">types</stringProp>
              </elementProp>
              <elementProp name="statuses" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">[&quot;PENDING&quot;] </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">statuses</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${MULTIPLE_USERS_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting resrouces with all statuses">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/users/filters/events-view</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="page" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">page</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">30</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
              <elementProp name="sort_by" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">{&quot;status_severity_code&quot;: &quot;desc&quot;, &quot;last_status_change&quot;: &quot;desc&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sort_by</stringProp>
              </elementProp>
              <elementProp name="search" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">{&quot;$and&quot;: []}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">search</stringProp>
              </elementProp>
              <elementProp name="types" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">[&quot;host&quot;, &quot;service&quot;, &quot;metaservice&quot;]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">types</stringProp>
              </elementProp>
              <elementProp name="statuses" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">[&quot;PENDING&quot;,&quot;OK&quot;,&quot;WARNING&quot;,&quot;CRITICAL&quot;,&quot;PENDING&quot;,&quot;UNKNOWN&quot;]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">statuses</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${MULTIPLE_USERS_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting down resrouces">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/users/filters/events-view</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="page" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">page</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">30</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
              <elementProp name="sort_by" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">{&quot;status_severity_code&quot;: &quot;desc&quot;, &quot;last_status_change&quot;: &quot;desc&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sort_by</stringProp>
              </elementProp>
              <elementProp name="search" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">{&quot;$and&quot;: []}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">search</stringProp>
              </elementProp>
              <elementProp name="types" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">[&quot;host&quot;, &quot;service&quot;, &quot;metaservice&quot;]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">types</stringProp>
              </elementProp>
              <elementProp name="statuses" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">[&quot;DOWN&quot;] </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">statuses</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${MULTIPLE_USERS_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting unreachable resrouces">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/users/filters/events-view</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="page" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">page</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">30</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
              <elementProp name="sort_by" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">{&quot;status_severity_code&quot;: &quot;desc&quot;, &quot;last_status_change&quot;: &quot;desc&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sort_by</stringProp>
              </elementProp>
              <elementProp name="search" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">{&quot;$and&quot;: []}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">search</stringProp>
              </elementProp>
              <elementProp name="types" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">[&quot;host&quot;, &quot;service&quot;, &quot;metaservice&quot;]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">types</stringProp>
              </elementProp>
              <elementProp name="statuses" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">[&quot;UNREACHABLE&quot;] </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">statuses</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${MULTIPLE_USERS_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Filter for UP/DOWN/PENDING/UNREACHABLE Statuses">
          <stringProp name="HTTPSampler.domain">172.16.20.138</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/qa-perf-platform/api/latest/users/filters/events-view</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="page" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">page</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">30</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
              <elementProp name="sort_by" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">{&quot;status_severity_code&quot;: &quot;desc&quot;, &quot;last_status_change&quot;: &quot;desc&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sort_by</stringProp>
              </elementProp>
              <elementProp name="search" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">{&quot;$and&quot;: []}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">search</stringProp>
              </elementProp>
              <elementProp name="types" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">[&quot;host&quot;, &quot;service&quot;, &quot;metaservice&quot;]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">types</stringProp>
              </elementProp>
              <elementProp name="statuses" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">[&quot;PENDING&quot;,&quot;UP&quot;,&quot;DOWN&quot;,&quot;UNREACHABLE&quot;] </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">statuses</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${MULTIPLE_USERS_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">Result.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
