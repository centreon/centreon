{
	"info": {
		"_postman_id": "81d646f8-4f4f-4bbd-95aa-c5ce3a6ccfaa",
		"name": "Centreon Web Rest API - Independent test scenarios",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22770334"
	},
	"item": [
		{
			"name": "10 - Authentication on admin account",
			"item": [
				{
					"name": "1001 - Standard authentication with admin user",
					"item": [
						{
							"name": "[1001] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"The account that was used to log in has admin rights\", function() {\r",
											"})\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[1001] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "1002 - Updating password on admin user and logging in using it",
					"item": [
						{
							"name": "[1002] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[1002] Update admin's password with correct password format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Password for admin user was successfully updated to \" + pm.environment.get(\"passwordWithCorrectFormat\") + \".\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"passwordWithCorrectFormat\", \"Centreon!2022\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"old_password\": \"{{api_password}}\",\n  \"new_password\": \"{{passwordWithCorrectFormat}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/authentication/users/:alias/password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authentication",
										"users",
										":alias",
										"password"
									],
									"variable": [
										{
											"key": "alias",
											"value": "{{currentUserName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[1002] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[1002] Attempt to log in on the admin user with the former password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login with the former password unsuccessful.\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed error message is the one that is expected (Invalid credentials).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Invalid credentials\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[1002] Login with admin user using the new password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login with the new password successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{passwordWithCorrectFormat}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[1002-aftermath] Revert to old password using bridge passwords",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const bufferPasswords = pm.environment.get(\"bufferPasswords\");\r",
											"\r",
											"pm.test(\"[BUFFER] Password for admin user was successfully updated to \" + pm.environment.get(\"currentPassword\") + \".\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"if(bufferPasswords && bufferPasswords.length > 0) {\r",
											"    pm.environment.set(\"oldPassword\", pm.environment.get(\"currentPassword\"));\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    postman.setNextRequest(\"[1002-aftermath] Revert to old password using bridge passwords\");\r",
											"} else {\r",
											"    pm.environment.unset(\"oldPassword\");\r",
											"    pm.environment.unset(\"currentPassword\");\r",
											"    pm.environment.unset(\"bufferPasswords\");\r",
											"    pm.environment.unset(\"passwordWithCorrectFormat\");\r",
											"    postman.setNextRequest(\"[1002-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let oldPassword = pm.environment.get(\"oldPassword\");\r",
											"if(!oldPassword) {\r",
											"    oldPassword = pm.environment.get(\"passwordWithCorrectFormat\");\r",
											"}\r",
											"\r",
											"let bufferPasswords = pm.environment.get(\"bufferPasswords\");\r",
											"if (!bufferPasswords || bufferPasswords.length == 0){\r",
											"    bufferPasswords = [\"Centreon!2023\", \"Centreon!2024\", pm.environment.get(\"api_password\")];\r",
											"}\r",
											"\r",
											"pm.environment.set(\"oldPassword\", oldPassword);\r",
											"pm.environment.set(\"currentPassword\", bufferPasswords.shift());\r",
											"pm.environment.set(\"bufferPasswords\", bufferPasswords);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"old_password\": \"{{oldPassword}}\",\n  \"new_password\": \"{{currentPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/authentication/users/:alias/password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authentication",
										"users",
										":alias",
										"password"
									],
									"variable": [
										{
											"key": "alias",
											"value": "{{currentUserName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[1002-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "1003 - Updating password on admin user with non-compliant passwords",
					"item": [
						{
							"name": "[1003] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[1003] Update user's password with incorrect password format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Update request with password \" + pm.environment.get(\"currentPassword\") + \" was unsuccessful.\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Displayed error message is the one that is expected\", function() {\r",
											"    pm.expect(responseJson.message).to.not.be.empty;\r",
											"});\r",
											"\r",
											"const incorrectPasswords = pm.environment.get(\"incorrectPasswords\");\r",
											"\r",
											"if(incorrectPasswords && incorrectPasswords.length > 0) {\r",
											"    postman.setNextRequest(\"[1003] Update user's password with incorrect password format\");\r",
											"} else {\r",
											"    postman.setNextRequest(\"[1003-aftermath] Logout from admin user\");\r",
											"    pm.environment.unset(\"currentPassword\");\r",
											"    pm.environment.unset(\"incorrectPasswords\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let incorrectPasswords = pm.environment.get(\"incorrectPasswords\");\r",
											"if (!incorrectPasswords || incorrectPasswords.length == 0){\r",
											"    incorrectPasswords = [\"Centreon2021\", \"centreon!2021\", \"20210102030405\", \"\", \"CentreonTwoThousandTwentyOne\", \"centreon\", \"Cent!2\"];\r",
											"}\r",
											"\r",
											"pm.environment.set(\"currentPassword\", incorrectPasswords.shift());\r",
											"pm.environment.set(\"incorrectPasswords\", incorrectPasswords);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"old_password\": \"Centreon!2021\",\n  \"new_password\": \"{{currentPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/authentication/users/:alias/password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authentication",
										"users",
										":alias",
										"password"
									],
									"variable": [
										{
											"key": "alias",
											"value": "{{currentUserName}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Password changed",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"old_password\": \"Centreon!2021\",\n  \"new_password\": \"Centreon!2022\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/authentication/users/:alias/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"authentication",
												"users",
												":alias",
												"password"
											],
											"variable": [
												{
													"key": "alias",
													"value": "{{user}}"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "[1003-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "1004 - Immediately trying to revert back to a recent old password",
					"item": [
						{
							"name": "[1004] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[1004] Update admin's password with correct password format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Password for admin user was successfully updated to \" + pm.collectionVariables.get(\"passwordWithCorrectFormat\") + \".\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"passwordWithCorrectFormat\", \"Centreon!2022\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"old_password\": \"{{api_password}}\",\n  \"new_password\": \"{{passwordWithCorrectFormat}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/authentication/users/:alias/password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authentication",
										"users",
										":alias",
										"password"
									],
									"variable": [
										{
											"key": "alias",
											"value": "{{currentUserName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[1004] Immediately try to revert back to old password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Password for admin user could not be updated.\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"    pm.expect(responseJson.code).to.eql(500);\r",
											"});\r",
											"\r",
											"pm.test(\"The displayed error message is the one that is expected (Old password usage is disable).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Old password usage is disable\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"old_password\": \"{{passwordWithCorrectFormat}}\",\n  \"new_password\": \"{{api_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/authentication/users/:alias/password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authentication",
										"users",
										":alias",
										"password"
									],
									"variable": [
										{
											"key": "alias",
											"value": "{{currentUserName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[1004-aftermath] Revert to old password using bridge passwords",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const buffer_passwords = pm.environment.get(\"buffer_passwords\");\r",
											"\r",
											"pm.test(\"Password for admin user was successfully updated to \" + pm.environment.get(\"current_password\") + \".\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"if(buffer_passwords && buffer_passwords.length > 0) {\r",
											"    pm.environment.set(\"old_password\", pm.environment.get(\"current_password\"));\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    postman.setNextRequest(\"[1004-aftermath] Revert to old password using bridge passwords\");\r",
											"} else {\r",
											"    pm.environment.unset(\"old_password\");\r",
											"    pm.environment.unset(\"current_password\");\r",
											"    pm.environment.unset(\"buffer_passwords\");\r",
											"    pm.environment.unset(\"passwordWithCorrectFormat\");\r",
											"    postman.setNextRequest(\"[1004-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let old_password = pm.environment.get(\"old_password\");\r",
											"if(!old_password) {\r",
											"    old_password = pm.environment.get(\"passwordWithCorrectFormat\");\r",
											"}\r",
											"\r",
											"let buffer_passwords = pm.environment.get(\"buffer_passwords\");\r",
											"if (!buffer_passwords || buffer_passwords.length == 0){\r",
											"    buffer_passwords = [\"Centreon!2023\", \"Centreon!2024\", pm.environment.get(\"api_password\")];\r",
											"}\r",
											"\r",
											"current_password = buffer_passwords.shift();\r",
											"pm.environment.set(\"old_password\", old_password);\r",
											"pm.environment.set(\"current_password\", current_password);\r",
											"pm.environment.set(\"buffer_passwords\", buffer_passwords);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"old_password\": \"{{old_password}}\",\n  \"new_password\": \"{{current_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/authentication/users/:alias/password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authentication",
										"users",
										":alias",
										"password"
									],
									"variable": [
										{
											"key": "alias",
											"value": "{{currentUserName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[1004-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "20 - Time period management",
			"item": [
				{
					"name": "2001 - Adding a new time period",
					"item": [
						{
							"name": "[2001] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2001] Show available time periods before time period creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"For now, only the four default time periods are listed: 24x7, none, nonworkhours and workhours.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(4);\r",
											"    let tableOfTestPeriodNames = [];\r",
											"    for(let count = 0; count < responseJson.result.length; count++) {\r",
											"        tableOfTestPeriodNames.push(responseJson.result[count].name);\r",
											"    }\r",
											"    pm.expect(responseJson.result.length).to.eql(tableOfTestPeriodNames.length);\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"24x7\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"none\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"nonworkhours\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"workhours\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2001] Add a new time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The time period has been successfully created, with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"'.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"timePeriodName\", \"TP-Test-API-2001\");\r",
											"pm.collectionVariables.set(\"timePeriodAlias\", \"Time period used for API tests\");\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}};{{timePeriodAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2001] Show available time periods after time period creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"let tableOfTestPeriodNames = [];\r",
											"for(let count = 0; count < responseJson.result.length; count++) {\r",
											"    tableOfTestPeriodNames.push(responseJson.result[count].name);\r",
											"}\r",
											"let indexOfNewTimePeriodInResponse = tableOfTestPeriodNames.indexOf(pm.collectionVariables.get(\"timePeriodName\"));\r",
											"\r",
											"pm.test(\"Five time periods are now listed: the default ones and a new one named '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' with alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"'.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(5);\r",
											"    console.log(tableOfTestPeriodNames);\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"24x7\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"none\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"nonworkhours\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"workhours\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(pm.collectionVariables.get(\"timePeriodName\"));\r",
											"    pm.expect(responseJson.result[indexOfNewTimePeriodInResponse].alias).to.eql(pm.collectionVariables.get(\"timePeriodAlias\"));\r",
											"})\r",
											"\r",
											"pm.test(\"For this new time period, no other field has been filled.\", function() {\r",
											"    pm.expect(responseJson.result[indexOfNewTimePeriodInResponse].sunday).to.eql(\"\");\r",
											"    pm.expect(responseJson.result[indexOfNewTimePeriodInResponse].monday).to.eql(\"\");\r",
											"    pm.expect(responseJson.result[indexOfNewTimePeriodInResponse].tuesday).to.eql(\"\");\r",
											"    pm.expect(responseJson.result[indexOfNewTimePeriodInResponse].wednesday).to.eql(\"\");\r",
											"    pm.expect(responseJson.result[indexOfNewTimePeriodInResponse].thursday).to.eql(\"\");\r",
											"    pm.expect(responseJson.result[indexOfNewTimePeriodInResponse].friday).to.eql(\"\");\r",
											"    pm.expect(responseJson.result[indexOfNewTimePeriodInResponse].saturday).to.eql(\"\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2001] Delete the time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The time period with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"' has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"timePeriodName\");\r",
											"    pm.collectionVariables.unset(\"timePeriodAlias\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2001] Show available time periods after time period deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The listed time periods are now back to four: 24x7, none, nonworkhours and workhours.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(4);\r",
											"    let tableOfTestPeriodNames = [];\r",
											"    for(let count = 0; count < responseJson.result.length; count++) {\r",
											"        tableOfTestPeriodNames.push(responseJson.result[count].name);\r",
											"    }\r",
											"    pm.expect(responseJson.result.length).to.eql(tableOfTestPeriodNames.length);\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"24x7\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"none\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"nonworkhours\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"workhours\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2001-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2002 - Adding a time period with a duplicate name",
					"item": [
						{
							"name": "[2002] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2002] Add a new time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The time period has been successfully created, with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"'.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"timePeriodName\", \"TP-Test-API-2002\");\r",
											"pm.collectionVariables.set(\"timePeriodAlias\", \"Time period used for API tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}};{{timePeriodAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2002] Add a new time period with a duplicate name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The time period with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAliasBis\") + \"' could not be created, due to a conflict with an existing time period.\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.expect(responseJson).to.eql(\"Object already exists (\" + pm.collectionVariables.get(\"timePeriodName\") + \")\");\r",
											"    pm.collectionVariables.unset(\"timePeriodAliasBis\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"timePeriodAliasBis\", \"Duplicate time period for API tests.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}};{{timePeriodAliasBis}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2002] Show available time periods after time period creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"let tableOfTestPeriodNames = [];\r",
											"for(let count = 0; count < responseJson.result.length; count++) {\r",
											"    tableOfTestPeriodNames.push(responseJson.result[count].name);\r",
											"}\r",
											"let indexOfNewTimePeriodInResponse = tableOfTestPeriodNames.indexOf(pm.collectionVariables.get(\"timePeriodName\"));\r",
											"\r",
											"pm.test(\"There are still five time periods and not six: the default ones and a single new one named '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' with alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"'.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(5);\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"24x7\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"none\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"nonworkhours\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"workhours\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(pm.collectionVariables.get(\"timePeriodName\"));\r",
											"    pm.expect(responseJson.result[indexOfNewTimePeriodInResponse].alias).to.eql(pm.collectionVariables.get(\"timePeriodAlias\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2002] Delete the new time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The time period with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"' has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"timePeriodName\");\r",
											"    pm.collectionVariables.unset(\"timePeriodAlias\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2002-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2003 - Adding a new time period with an empty name",
					"item": [
						{
							"name": "[2003] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2003] Add a new time period with an empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Time periods with empty names cannot be added.\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"    pm.response.to.not.have.status(409);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"tp\",\n  \"values\": \";\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2003] Show time periods after time period with empty name creation attempt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"let tableOfTestPeriodNames = [];\r",
											"for(let count = 0; count < responseJson.result.length; count++) {\r",
											"    tableOfTestPeriodNames.push(responseJson.result[count].name);\r",
											"}\r",
											"\r",
											"pm.test(\"Only the four default time periods should be listed; the time period with an empty name should not have been added.\", function() {\r",
											"    postman.setNextRequest(\"[2003-DEBUG] Delete time period with no name\");\r",
											"    pm.expect(responseJson.result.length).to.eql(4);\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"24x7\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"none\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"nonworkhours\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"workhours\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.not.contain(\"\");\r",
											"    postman.setNextRequest(\"[2003-aftermath] Logout from admin user\");\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2003-DEBUG] Delete time period with no name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The time period with no name has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"tp\",\n  \"values\": \"\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2003-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2004 - Setting parameters for default time period",
					"item": [
						{
							"name": "[2004] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2004] Show available time periods",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"let tableOfTestPeriodNames = [];\r",
											"for(let count = 0; count < responseJson.result.length; count++) {\r",
											"    tableOfTestPeriodNames.push(responseJson.result[count].name);\r",
											"}\r",
											"\r",
											"pm.test(\"Only the four default time periods should be listed.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(4);\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"24x7\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"none\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"nonworkhours\");\r",
											"    pm.expect(tableOfTestPeriodNames).to.contain(\"workhours\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2004] Set parameters for default 'workhours' time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"currentParameter\") + \" was updated with \" + pm.collectionVariables.get(\"currentValue\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"[2004] Set parameters for default 'workhours' time period\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentParameter\");\r",
											"    pm.collectionVariables.unset(\"currentValue\");\r",
											"    pm.collectionVariables.unset(\"listOfParameters\");\r",
											"    pm.collectionVariables.unset(\"listOfValues\");\r",
											"    postman.setNextRequest(\"[2004] Show available time periods after 'workhours' update\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"let parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"let values = pm.collectionVariables.get(\"listOfValues\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\"];\r",
											"    values = [\"09:00-18:00\", \"09:00-18:00\", \"09:00-18:00\", \"09:00-18:00\", \"09:00-14:00\"];\r",
											"    parametersToCheck = [];\r",
											"}\r",
											"\r",
											"let currentParameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"currentParameter\", currentParameter);\r",
											"pm.collectionVariables.set(\"listOfParameters\", parameters);\r",
											"let currentValue = values.shift();\r",
											"pm.collectionVariables.set(\"currentValue\", currentValue);\r",
											"pm.collectionVariables.set(\"listOfValues\", values);\r",
											"\r",
											"pm.collectionVariables.set(currentParameter, currentValue);\r",
											"\r",
											"parametersToCheck.push(currentParameter);\r",
											"pm.collectionVariables.set(\"parametersToCheck\", parametersToCheck);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"tp\",\n  \"values\": \"workhours;{{currentParameter}};{{currentValue}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2004] Show available time periods after 'workhours' update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"var parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"\r",
											"for(let count1 = 0; count1 < responseJson.result.length; count1++) {\r",
											"    if(responseJson.result[count1].name == \"workhours\") {\r",
											"        const keys = Object.keys(responseJson.result[count1]);\r",
											"        const values = Object.values(responseJson.result[count1]);\r",
											"        console.log(keys);\r",
											"        console.log(values);\r",
											"        for (let count2 = 0; count2 < parametersToCheck.length; count2++) {\r",
											"            let indexOfParameter = keys.indexOf(parametersToCheck[count2]);\r",
											"            console.log(indexOfParameter);\r",
											"            if(indexOfParameter != -1) {\r",
											"                pm.test(\"The value '\" + pm.collectionVariables.get(parametersToCheck[count2])  + \"' was found for workhours's parameter '\" + parametersToCheck[count2] + \"'.\", function() {\r",
											"                pm.expect(pm.collectionVariables.get(parametersToCheck[count2])).to.eql(values[indexOfParameter]);\r",
											"                pm.collectionVariables.unset(parametersToCheck[count2]);\r",
											"                }) \r",
											"            } else {\r",
											"                pm.test(\"The parameter \" + parametersToCheck[count2] + \" does not exist or cannot be found.\", function() {\r",
											"                    pm.expect(true).to.eql(false);\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"        pm.collectionVariables.unset(\"parametersToCheck\");\r",
											"        break;\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2004] Revert back parameters for 'workhours'",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"currentParameter\") + \" was updated with \" + pm.collectionVariables.get(\"currentValue\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"[2004] Revert back parameters for 'workhours'\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentParameter\");\r",
											"    pm.collectionVariables.unset(\"currentValue\");\r",
											"    pm.collectionVariables.unset(\"listOfParameters\");\r",
											"    pm.collectionVariables.unset(\"listOfValues\");\r",
											"    postman.setNextRequest(\"[2004] Show available time periods after 'workhours' updates are reverted\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"let parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"let values = pm.collectionVariables.get(\"listOfValues\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\"];\r",
											"    values = [\"09:00-17:00\", \"09:00-17:00\", \"09:00-17:00\", \"09:00-17:00\", \"09:00-17:00\"];\r",
											"    parametersToCheck = [];\r",
											"}\r",
											"\r",
											"let currentParameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"currentParameter\", currentParameter);\r",
											"pm.collectionVariables.set(\"listOfParameters\", parameters);\r",
											"let currentValue = values.shift();\r",
											"pm.collectionVariables.set(\"currentValue\", currentValue);\r",
											"pm.collectionVariables.set(\"listOfValues\", values);\r",
											"\r",
											"pm.collectionVariables.set(currentParameter, currentValue);\r",
											"\r",
											"parametersToCheck.push(currentParameter);\r",
											"pm.collectionVariables.set(\"parametersToCheck\", parametersToCheck);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"tp\",\n  \"values\": \"workhours;{{currentParameter}};{{currentValue}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2004] Show available time periods after 'workhours' updates are reverted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"var parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"\r",
											"for(let count1 = 0; count1 < responseJson.result.length; count1++) {\r",
											"    if(responseJson.result[count1].name == \"workhours\") {\r",
											"        const keys = Object.keys(responseJson.result[count1]);\r",
											"        const values = Object.values(responseJson.result[count1]);\r",
											"        for (let count2 = 0; count2 < parametersToCheck.length; count2++) {\r",
											"            let indexOfParameter = keys.indexOf(parametersToCheck[count2]);\r",
											"            if(indexOfParameter != -1) {\r",
											"                pm.test(\"The value '\" + pm.collectionVariables.get(parametersToCheck[count2])  + \"' was found for workhours's parameter '\" + parametersToCheck[count2] + \"'.\", function() {\r",
											"                pm.expect(pm.collectionVariables.get(parametersToCheck[count2])).to.eql(values[indexOfParameter]);\r",
											"                pm.collectionVariables.unset(parametersToCheck[count2]);\r",
											"                }) \r",
											"            } else {\r",
											"                pm.test(\"The parameter \" + parametersToCheck[count2] + \" does not exist or cannot be found.\", function() {\r",
											"                    pm.expect(true).to.eql(false);\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"        pm.collectionVariables.unset(\"parametersToCheck\");\r",
											"        break;\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2004-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2005 - Setting parameters for a new time period",
					"item": [
						{
							"name": "[2005] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2005] Add a new time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The time period has been successfully created, with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"'.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"timePeriodName\", \"TP-Test-API-2005\");\r",
											"pm.collectionVariables.set(\"timePeriodAlias\", \"Time period used for API tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}};{{timePeriodAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2005] Set parameters for newly created time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"currentParameter\") + \" was updated with \" + pm.collectionVariables.get(\"currentValue\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.collectionVariables.get(\"name\") && pm.collectionVariables.get(\"name\") != pm.collectionVariables.get(\"timePeriodName\")) {\r",
											"    pm.collectionVariables.set(\"timePeriodName\", pm.collectionVariables.get(\"name\"));\r",
											"}\r",
											"\r",
											"if (pm.collectionVariables.get(\"alias\") && pm.collectionVariables.get(\"alias\") != pm.collectionVariables.get(\"timePeriodAlias\")) {\r",
											"    pm.collectionVariables.set(\"timePeriodAlias\", pm.collectionVariables.get(\"alias\"));\r",
											"}\r",
											"\r",
											"const parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"[2005] Set parameters for newly created time period\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentParameter\");\r",
											"    pm.collectionVariables.unset(\"currentValue\");\r",
											"    pm.collectionVariables.unset(\"listOfParameters\");\r",
											"    pm.collectionVariables.unset(\"listOfValues\");\r",
											"    postman.setNextRequest(\"[2005] Show available time periods after time period update\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"let parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"let values = pm.collectionVariables.get(\"listOfValues\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"alias\", \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\r",
											"    values = [\"New alias for API tests time period\", \"00:00-24:00\", \"09:00-17:00\", \"09:00-17:00\", \"09:00-17:00\", \"09:17-24:00\", \"09:00-17:00\", \"09:00-13:30\"];\r",
											"    parametersToCheck = [];\r",
											"}\r",
											"\r",
											"let currentParameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"currentParameter\", currentParameter);\r",
											"pm.collectionVariables.set(\"listOfParameters\", parameters);\r",
											"let currentValue = values.shift();\r",
											"pm.collectionVariables.set(\"currentValue\", currentValue);\r",
											"pm.collectionVariables.set(\"listOfValues\", values);\r",
											"\r",
											"pm.collectionVariables.set(currentParameter, currentValue);\r",
											"\r",
											"parametersToCheck.push(currentParameter);\r",
											"pm.collectionVariables.set(\"parametersToCheck\", parametersToCheck);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"tp\",\n  \"values\": \"{{timePeriodName}};{{currentParameter}};{{currentValue}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2005] Show available time periods after time period update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"var parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"\r",
											"for(let count1 = 0; count1 < responseJson.result.length; count1++) {\r",
											"    if(responseJson.result[count1].name == pm.collectionVariables.get(\"timePeriodName\")) {\r",
											"        const keys = Object.keys(responseJson.result[count1]);\r",
											"        const values = Object.values(responseJson.result[count1]);\r",
											"        for (let count2 = 0; count2 < parametersToCheck.length; count2++) {\r",
											"            let indexOfParameter = keys.indexOf(parametersToCheck[count2]);\r",
											"            if(indexOfParameter != -1) {\r",
											"                pm.test(\"The value '\" + pm.collectionVariables.get(parametersToCheck[count2])  + \"' was found for \" + pm.collectionVariables.get(\"timePeriodName\") + \"'s parameter '\" + parametersToCheck[count2] + \"'.\", function() {\r",
											"                pm.expect(pm.collectionVariables.get(parametersToCheck[count2])).to.eql(values[indexOfParameter]);\r",
											"                pm.collectionVariables.unset(parametersToCheck[count2]);\r",
											"                }) \r",
											"            } else {\r",
											"                pm.test(\"The parameter \" + parametersToCheck[count2] + \" does not exist or cannot be found.\", function() {\r",
											"                    pm.expect(true).to.eql(false);\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"        pm.collectionVariables.unset(\"parametersToCheck\");\r",
											"        break;\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2005] Delete the time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The time period with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"' has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"timePeriodName\");\r",
											"    pm.collectionVariables.unset(\"timePeriodAlias\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2005-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2006 - Setting a parameter with a non-compliant format for a time period",
					"item": [
						{
							"name": "[2006] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2006] Add a new time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The time period has been successfully created, with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"'.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"timePeriodName\", \"TP-Test-API-2006\");\r",
											"pm.collectionVariables.set(\"timePeriodAlias\", \"Time period used for API tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}};{{timePeriodAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2006] Set a non-compliant parameter for newly created time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Cannot update parameter with a non-compliant value.\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"tp\",\n  \"values\": \"{{timePeriodName}};monday;non-compliant-parameter\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2006] Check that non-compliant parameter has not been added",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"for (let count1 = 0; count1 < responseJson.result.length; count1++) {\r",
											"    if(responseJson.result[count1].name == pm.collectionVariables.get(\"timePeriodName\")) {\r",
											"        pm.test(\"The parameter 'monday' has not been updated with a non-compliant value.\", function() {\r",
											"            pm.expect(responseJson.result[count1].monday).to.not.eql(\"non-compliant-parameter\");\r",
											"        })\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2006] Delete the time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The time period with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"' has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"timePeriodName\");\r",
											"    pm.collectionVariables.unset(\"timePeriodAlias\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2006-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2007 - Setting exceptions on new time period",
					"item": [
						{
							"name": "[2007] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2007] Add a new time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The time period has been successfully created, with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"'.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"timePeriodName\", \"TP-Test-API-2007\");\r",
											"pm.collectionVariables.set(\"timePeriodAlias\", \"Time period used for API tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}};{{timePeriodAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2007] Set exceptions on newly created time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const exceptionDates = pm.collectionVariables.get(\"listOfExceptionDates\");\r",
											"\r",
											"pm.test(\"An exception has been set on \" + pm.collectionVariables.get(\"currentExceptionDate\") + \" (Timerange: \" + pm.collectionVariables.get(\"currentExceptionTimerange\") + \")\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (exceptionDates && exceptionDates.length > 0) {\r",
											"    postman.setNextRequest(\"[2007] Set exceptions on newly created time period\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentExceptionDate\");\r",
											"    pm.collectionVariables.unset(\"currentExceptionTimerange\");\r",
											"    pm.collectionVariables.unset(\"listOfExceptionDates\");\r",
											"    pm.collectionVariables.unset(\"listOfExceptionTimeranges\");\r",
											"    pm.collectionVariables.unset(\"count\");\r",
											"    postman.setNextRequest(\"[2007] Get exceptions on newly created time period after set\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let exceptionDates = pm.collectionVariables.get(\"listOfExceptionDates\");\r",
											"let exceptionTimeranges = pm.collectionVariables.get(\"listOfExceptionTimeranges\");\r",
											"let count = pm.collectionVariables.get(\"count\");\r",
											"\r",
											"if (!exceptionDates || exceptionDates.length == 0) {\r",
											"    exceptionDates = [\"January 1\", \"December 25\", \"August 15\"];\r",
											"    exceptionTimeranges = [\"00:00-24:00\", \"00:00-24:00\", \"07:00-19:00\"];\r",
											"    pm.collectionVariables.set(\"totalNumberOfExceptions\", exceptionDates.length);\r",
											"    count = 0;\r",
											"}\r",
											"\r",
											"let currentDate = exceptionDates.shift();\r",
											"pm.collectionVariables.set(\"currentExceptionDate\", currentDate);\r",
											"pm.collectionVariables.set(\"listOfExceptionDates\", exceptionDates);\r",
											"\r",
											"let currentTimerange = exceptionTimeranges.shift();\r",
											"pm.collectionVariables.set(\"currentExceptionTimerange\", currentTimerange);\r",
											"pm.collectionVariables.set(\"listOfExceptionTimeranges\", exceptionTimeranges);\r",
											"\r",
											"pm.collectionVariables.set(\"exceptionDate\" + count, currentDate);\r",
											"pm.collectionVariables.set(\"exceptionTimerange\" + count, currentTimerange);\r",
											"count++;\r",
											"pm.collectionVariables.set(\"count\", count);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setexception\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}};{{currentExceptionDate}};{{currentExceptionTimerange}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2007] Get exceptions on newly created time period after set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"var exceptionsFound = 0;",
											"",
											"pm.test(\"A list of exceptions has been returned.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"for (var count1 = 0; count1 < responseJson.result.length; count1++) {",
											"    for(var count2 = 0; count2 < pm.collectionVariables.get(\"totalNumberOfExceptions\"); count2++) {",
											"        var currentDateString = \"exceptionDate\" + count2;",
											"        var currentExceptionDate = pm.collectionVariables.get(currentDateString);",
											"        var currentTimerangeString = \"exceptionTimerange\" + count2;",
											"        var currentExceptionTimerange = pm.collectionVariables.get(currentTimerangeString);",
											"        if(responseJson.result[count1].days == currentExceptionDate) {",
											"            pm.test(\"Exception date \" + currentExceptionDate + \" has been found.\", function() {true;})",
											"            pm.test(\"Exception timerange for \" + currentExceptionDate + \" (\" + currentExceptionTimerange + \") has been found.\", function() {",
											"                pm.expect(currentExceptionTimerange).to.eql(responseJson.result[count1].timerange);",
											"                exceptionsFound++;",
											"                pm.collectionVariables.unset(currentDateString);",
											"                pm.collectionVariables.unset(currentTimerangeString);",
											"            })",
											"        }",
											"    }",
											"}",
											"",
											"pm.test(\"All exceptions have been found.\", function() {",
											"    pm.expect(pm.collectionVariables.get(\"totalNumberOfExceptions\")).to.eql(exceptionsFound);",
											"    pm.collectionVariables.unset(\"count\");",
											"    pm.collectionVariables.unset(\"totalNumberOfExceptions\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"getexception\",\n  \"object\":\"tp\",\n  \"values\": \"{{timePeriodName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2007] Delete the time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The time period with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"' has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"timePeriodName\");\r",
											"    pm.collectionVariables.unset(\"timePeriodAlias\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2007-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2008 - Setting an exception with a non-compliant format on new time period",
					"item": [
						{
							"name": "[2008] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2008] Add a new time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The time period has been successfully created, with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"'.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"timePeriodName\", \"TP-Test-API-2008\");\r",
											"pm.collectionVariables.set(\"timePeriodAlias\", \"Time period used for API tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}};{{timePeriodAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2008] Set a non-compliant exception on newly created time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The non-compliant exception could not be set on the time period.\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setexception\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}};13th Month Day 01;Dark Hour\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2008] Get exceptions on newly created time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"The list should not present any exception, since the exception with the non-compliant format should not have been set on this time period.\", function () {",
											"    pm.expect(responseJson.result.length).to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"getexception\",\n  \"object\":\"tp\",\n  \"values\": \"{{timePeriodName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2008] Delete the time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The time period with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"' has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"timePeriodName\");\r",
											"    pm.collectionVariables.unset(\"timePeriodAlias\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2008-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "21 - Contact management",
			"item": [
				{
					"name": "2101 - Checking actions on admin user",
					"item": [
						{
							"name": "[2101] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"The account that was used to log in has admin rights\", function() {\r",
											"})\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2101] Check admin's actions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Actions on admin user successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"const valuesHosts = Object.values(responseJson.host);\r",
											"const valuesServices = Object.values(responseJson.service);\r",
											"const valuesMetaservices = Object.values(responseJson.metaservice);\r",
											"\r",
											"pm.test(\"Admin user has access to all available actions.\", function() {\r",
											"    pm.expect(valuesHosts).to.not.include(false);\r",
											"    pm.expect(valuesServices).to.not.include(false);\r",
											"    pm.expect(valuesMetaservices).to.not.include(false);\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/acl/actions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"acl",
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2101-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2102 - Listing default users and check the presence of the admin user",
					"item": [
						{
							"name": "[2102] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"The account that was used to log in has admin rights\", function() {\r",
											"})\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"pm.environment.set(\"currentUserEmail\", responseJson.contact.email);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2102] List all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of users succesfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"for (let count = 0; count < responseJson.result.length; count++) {\r",
											"    if(responseJson.result[count].id == pm.environment.get(\"currentUserID\")) {\r",
											"        pm.test(\"Current admin user is registered in the list.\", function() {\r",
											"            pm.expect(pm.environment.get(\"currentUserID\")).to.eql(responseJson.result[count].id);\r",
											"            pm.expect(pm.environment.get(\"api_login\")).to.eql(responseJson.result[count].alias);\r",
											"            pm.expect(pm.environment.get(\"currentUserEmail\")).to.eql(responseJson.result[count].email);\r",
											"            pm.expect(responseJson.result[count].is_admin).to.eql(true);\r",
											"            pm.environment.unset(\"currentUserEmail\");\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"let tableOfUserNames = [];\r",
											"for (let count = 0; count < responseJson.meta.total; count++) {\r",
											"    tableOfUserNames.push(responseJson.result[count].name);\r",
											"}\r",
											"\r",
											"pm.test(\"Only default users are listed, whether they are enabled or not: 'Admin Centreon', 'centreon-gorgone', 'Guest' and 'User'.\", function() {\r",
											"    for (let count = 0; count < responseJson.result.length; count++) {\r",
											"        pm.expect([\"Admin Centreon\", \"centreon-gorgone\", \"Guest\", \"User\"].indexOf(tableOfUserNames[count])).to.not.eql(-1);    \r",
											"    } \r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2102-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2103 - Adding a new non-admin user and assess it is listed",
					"item": [
						{
							"name": "[2103] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"The account that was used to log in has admin rights\", function() {\r",
											"})\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"pm.environment.set(\"currentUserEmail\", responseJson.contact.email);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2103] List all users before user creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of users succesfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"let tableOfTestPeriodNames = [];\r",
											"for (let count = 0; count < responseJson.result.length; count++) {\r",
											"    tableOfTestPeriodNames.push(responseJson.result[count].name);\r",
											"}\r",
											"\r",
											"pm.test(\"Only default users are listed, whether they are enabled or not: 'Admin Centreon', 'centreon-gorgone', 'Guest' and 'User'.\", function() {\r",
											"    for (let count = 0; count < responseJson.result.length; count++) {\r",
											"        pm.expect([\"Admin Centreon\", \"centreon-gorgone\", \"Guest\", \"User\"]).to.include(tableOfTestPeriodNames[count]);\r",
											"    } \r",
											"})\r",
											"\r",
											"pm.collectionVariables.set(\"numberOfListedUsers\", responseJson.result.length);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2103] Add new non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user has been successfully created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserName\", \"User-Test-API-2103\");\r",
											"pm.collectionVariables.set(\"testUserLogin\", \"testUser\");\r",
											"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserName}};{{testUserLogin}};{{testUserEmail}};Centreon!2021;0;0;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2103] List all users after user creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of users succesfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"This list of users now has one more member compared to before the previous request.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"numberOfListedUsers\") + 1);\r",
											"    pm.collectionVariables.unset(\"numberOfListedUsers\");\r",
											"})\r",
											"\r",
											"let tableOfUserNames = [];\r",
											"for (let count = 0; count < responseJson.meta.total; count++) {\r",
											"    tableOfUserNames.push(responseJson.result[count].name);\r",
											"}\r",
											"\r",
											"pm.test(\"Only (enabled) default users are listed as well as the user that was created just now: '\" + pm.collectionVariables.get(\"testUserName\") + \"'.\", function() {\r",
											"    for (let count = 0; count < responseJson.meta.total; count++) {\r",
											"        pm.expect([\"Admin Centreon\", \"centreon-gorgone\", \"Guest\", \"User\", pm.collectionVariables.get(\"testUserName\")].indexOf(tableOfUserNames[count])).to.not.eql(-1);\r",
											"    } \r",
											"})\r",
											"\r",
											"pm.test(\"The information that can be checked in the list are the ones that were registered.\", function() {\r",
											"    pm.expect(responseJson.result[tableOfUserNames.indexOf(pm.collectionVariables.get(\"testUserName\"))].name).to.eql(pm.collectionVariables.get(\"testUserName\"));\r",
											"    pm.expect(responseJson.result[tableOfUserNames.indexOf(pm.collectionVariables.get(\"testUserName\"))].alias).to.eql(pm.collectionVariables.get(\"testUserLogin\"));\r",
											"    pm.expect(responseJson.result[tableOfUserNames.indexOf(pm.collectionVariables.get(\"testUserName\"))].email).to.eql(pm.collectionVariables.get(\"testUserEmail\"));\r",
											"    pm.expect(responseJson.result[tableOfUserNames.indexOf(pm.collectionVariables.get(\"testUserName\"))].is_admin).to.eql(false);\r",
											"    pm.collectionVariables.unset(\"testUserEmail\");\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2103] Delete the non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"testUserLogin\");\r",
											"    pm.collectionVariables.unset(\"testUserName\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2103-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2104 - Adding a non-admin user and disable/enable it",
					"item": [
						{
							"name": "[2104] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"The account that was used to log in has admin rights\", function() {\r",
											"})\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2104] Add new non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user has been successfully created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserName\", \"User-Test-API-2104\");\r",
											"pm.collectionVariables.set(\"testUserLogin\", \"testUser\");\r",
											"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserName}};{{testUserLogin}};{{testUserEmail}};Centreon!2021;0;0;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2104] List all users after user creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of users successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"for(count = 0; count < responseJson.meta.total; count++){\r",
											"    if(responseJson.result[count].name == pm.collectionVariables.get(\"testUserName\")) {\r",
											"        pm.collectionVariables.set(\"testUserId\", responseJson.result[count].id);\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2104] Disable non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user has been successfully disabled.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"disable\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2104] List all users after non-admin user disable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of users has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"for (let count = 0; count < responseJson.result.length; count++) {\r",
											"    if(responseJson.result[count].name == pm.collectionVariables.get(\"testUserName\") && parseInt(responseJson.result[count].id) == pm.collectionVariables.get(\"testUserId\")) {\r",
											"        pm.test(\"The selected user can be found, but has been disabled.\", function() {\r",
											"            pm.expect(parseInt(responseJson.result[count].activate)).to.eql(0);\r",
											"            pm.collectionVariables.unset(\"testUserId\");\r",
											"        })\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"contact\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2104] Delete the non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"testUserName\");\r",
											"    pm.collectionVariables.unset(\"testUserLogin\");\r",
											"    pm.collectionVariables.unset(\"testUserEmail\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2104-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2105 - Trying to disable the current admin user",
					"item": [
						{
							"name": "[2105] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"The account that was used to log in has admin rights\", function() {\r",
											"})\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2105] Try to disable the current admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The admin user cannot be disabled.\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"if(pm.response.status == 200) {\r",
											"    postman.setNextRequest(\"[2105-DEBUG] Enable the admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"disable\",\n  \"object\": \"contact\",\n  \"values\": \"{{api_login}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2105-DEBUG] Enable the admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The admin user, which could not have been disabled, has been enabled.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"enable\",\n  \"object\": \"contact\",\n  \"values\": \"{{api_login}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2105-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2106 - Adding a non-admin user, give it API access and log in on it",
					"item": [
						{
							"name": "[2106] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2106] Add new non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user has been successfully created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserName\", \"User-Test-API-2106\");\r",
											"pm.collectionVariables.set(\"testUserLogin\", \"testUser\");\r",
											"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");\r",
											"pm.collectionVariables.set(\"testUserPassword\", \"Centreon!2021\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserName}};{{testUserLogin}};{{testUserEmail}};{{testUserPassword}};0;0;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2106] Add access to API configuration & realtime to the new user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"let values = pm.collectionVariables.get(\"listOfValues\");\r",
											"let parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"reach_api\", \"reach_api_rt\"];\r",
											"    values = [1, 0];\r",
											"}\r",
											"\r",
											"let currentParameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"currentParameter\", currentParameter);\r",
											"pm.collectionVariables.set(\"listOfParameters\", parameters);\r",
											"let currentValue = values.shift();\r",
											"pm.collectionVariables.set(\"currentValue\", currentValue);\r",
											"pm.collectionVariables.set(\"listOfValues\", values);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"\r",
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"currentParameter\") + \" was updated with \" + pm.collectionVariables.get(\"currentValue\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"[2106] Add access to API configuration & realtime to the new user\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentParameter\");\r",
											"    pm.collectionVariables.unset(\"currentValue\");\r",
											"    pm.collectionVariables.unset(\"listOfParameters\");\r",
											"    pm.collectionVariables.unset(\"listOfValues\");\r",
											"    postman.setNextRequest(\"[2106] Log out from admin user after non-admin user update\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\":\"setparam\",\r\n  \"object\":\"contact\",\r\n  \"values\": \"{{testUserLogin}};{{currentParameter}};{{currentValue}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2106] Log out from admin user after non-admin user update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[2106] Login on newly created user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and does not have admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get(\"testUserLogin\"));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{testUserLogin}}\",\n      \"password\": \"{{testUserPassword}}\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to retrieve an authentication token."
							},
							"response": []
						},
						{
							"name": "[2106] Check actions on non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Actions on non-admin user \" + pm.collectionVariables.get(\"testUserName\") + \" successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"const valuesHosts = Object.values(responseJson.host);\r",
											"const valuesServices = Object.values(responseJson.service);\r",
											"const valuesMetaservices = Object.values(responseJson.metaservice);\r",
											"\r",
											"pm.test(\"Newly created user has access to no available actions.\", function() {\r",
											"    pm.expect(valuesHosts).to.not.include(true);\r",
											"    pm.expect(valuesServices).to.not.include(true);\r",
											"    pm.expect(valuesMetaservices).to.not.include(true);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/acl/actions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"acl",
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2106] List users with new admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Since the non-admin user was granted API access rights, it can access the list of users, which is not void.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.result.length).to.not.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2106] Log out from non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[2106] Login with admin user after non-admin user check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2106] Delete the non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"testUserLogin\");\r",
											"    pm.collectionVariables.unset(\"testUserName\");\r",
											"    pm.collectionVariables.unset(\"testUserPassword\");\r",
											"    pm.collectionVariables.unset(\"testUserEmail\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2106-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2107 - Adding an admin user, give it API access and log in on it",
					"item": [
						{
							"name": "[2107] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2107] Add new admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user has been successfully created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserName\", \"User-Test-API-2107\");\r",
											"pm.collectionVariables.set(\"testUserLogin\", \"testUser\");\r",
											"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");\r",
											"pm.collectionVariables.set(\"testUserPassword\", \"Centreon!2021\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserName}};{{testUserLogin}};{{testUserEmail}};{{testUserPassword}};1;0;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2107] Add access to API configuration & realtime to the new admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"let values = pm.collectionVariables.get(\"listOfValues\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"reach_api\", \"reach_api_rt\"];\r",
											"    values = [1, 1];\r",
											"}\r",
											"\r",
											"let currentParameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"currentParameter\", currentParameter);\r",
											"pm.collectionVariables.set(\"listOfParameters\", parameters);\r",
											"let currentValue = values.shift();\r",
											"pm.collectionVariables.set(\"currentValue\", currentValue);\r",
											"pm.collectionVariables.set(\"listOfValues\", values);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"\r",
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"currentParameter\") + \" was updated with \" + pm.collectionVariables.get(\"currentValue\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"[2107] Add access to API configuration & realtime to the new admin user\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentParameter\");\r",
											"    pm.collectionVariables.unset(\"currentValue\");\r",
											"    pm.collectionVariables.unset(\"listOfParameters\");\r",
											"    pm.collectionVariables.unset(\"listOfValues\");\r",
											"    postman.setNextRequest(\"[2107] Log out from admin user after new admin user update\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\":\"setparam\",\r\n  \"object\":\"contact\",\r\n  \"values\": \"{{testUserLogin}};{{currentParameter}};{{currentValue}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2107] Log out from admin user after new admin user update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[2107] Login on newly created user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials, is not default admin user but has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get(\"testUserLogin\"));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{testUserLogin}}\",\n      \"password\": \"{{testUserPassword}}\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to retrieve an authentication token."
							},
							"response": []
						},
						{
							"name": "[2107] Check actions on admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Actions on admin user \" + pm.collectionVariables.get(\"testUserName\") + \" successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"const valuesHosts = Object.values(responseJson.host);\r",
											"const valuesServices = Object.values(responseJson.service);\r",
											"const valuesMetaservices = Object.values(responseJson.metaservice);\r",
											"\r",
											"pm.test(\"Admin user has access to all available actions.\", function() {\r",
											"    pm.expect(valuesHosts).to.not.include(false);\r",
											"    pm.expect(valuesServices).to.not.include(false);\r",
											"    pm.expect(valuesMetaservices).to.not.include(false);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/acl/actions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"acl",
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2107] Log out from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[2107] Login with admin user after new admin user check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2107] Delete the admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"testUserLogin\");\r",
											"    pm.collectionVariables.unset(\"testUserName\");\r",
											"    pm.collectionVariables.unset(\"testUserPassword\");\r",
											"    pm.collectionVariables.unset(\"testUserEmail\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2107-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2108 - Adding a user and trying to log in with it without API access rights",
					"item": [
						{
							"name": "[2108] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2108] Add new non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user has been successfully created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserName\", \"User-Test-API-2108\");\r",
											"pm.collectionVariables.set(\"testUserLogin\", \"testUser\");\r",
											"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");\r",
											"pm.collectionVariables.set(\"testUserPassword\", \"Centreon!2021\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserName}};{{testUserLogin}};{{testUserEmail}};{{testUserPassword}};0;0;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2108] Log out from non-admin user after admin user creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[2108] Login on newly created non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and does not have admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get(\"testUserLogin\"));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{testUserLogin}}\",\n      \"password\": \"{{testUserPassword}}\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to retrieve an authentication token."
							},
							"response": []
						},
						{
							"name": "[2108] Attempt to list users with new non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the non-admin user was not granted API access rights, it could not access the list of users.\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2108] Log out from non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[2108] Login with admin user after non-admin user check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2108] Delete the non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"testUserLogin\");\r",
											"    pm.collectionVariables.unset(\"testUserName\");\r",
											"    pm.collectionVariables.unset(\"testUserPassword\");\r",
											"    pm.collectionVariables.unset(\"testUserEmail\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2108-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2109 - Adding a user with duplicate fields",
					"item": [
						{
							"name": "[2109] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"The account that was used to log in has admin rights\", function() {\r",
											"})\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"pm.environment.set(\"currentUserEmail\", responseJson.contact.email);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2109] Add new non-admin user with defined fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserName\") + \" has been successfully created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserName\", \"User-Test-API-2109\");\r",
											"pm.collectionVariables.set(\"testUserLogin\", \"testUser\");\r",
											"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserName}};{{testUserLogin}};{{testUserEmail}};Centreon!2021;0;0;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2109] Add new non-admin user with an already taken email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Having two users with the same email is allowed by the application, therefore the host \" + pm.collectionVariables.get(\"testUserNameBis\") + \" with duplicate email \" + pm.collectionVariables.get(\"testUserEmailBis\") + \" was created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"testUserNameBis\");\r",
											"    pm.collectionVariables.unset(\"testUserEmailBis\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserNameBis\", pm.collectionVariables.get(\"testUserName\").concat(\"\", \"-bis\"));\r",
											"pm.collectionVariables.set(\"testUserLoginBis\", pm.collectionVariables.get(\"testUserLogin\").concat(\"\", \"-bis\"));\r",
											"pm.collectionVariables.set(\"testUserEmailBis\", pm.collectionVariables.get(\"testUserEmail\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserNameBis}};{{testUserLoginBis}};{{testUserEmailBis}};Centreon!2021;0;0;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2109] Delete the non-admin user with duplicate email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserLoginBis\") + \" with duplicate email has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"testUserLoginBis\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLoginBis}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2109] Add new non-admin user with an already taken login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the login \" + pm.collectionVariables.get(\"testUserLogin\") + \" is already taken, the new user \" + pm.collectionVariables.get(\"testUserNameBis\") + \" with this login could not be created.\", function () {\r",
											"    pm.collectionVariables.unset(\"testUserNameBis\");\r",
											"    pm.collectionVariables.unset(\"testUserEmailBis\");\r",
											"    postman.setNextRequest(\"[2109-DEBUG] Delete the non-admin user with duplicate login\");\r",
											"    pm.response.to.have.status(409);\r",
											"    postman.setNextRequest(\"[2109] Add new non-admin user with an already taken name\");\r",
											"    pm.collectionVariables.unset(\"testUserLoginBis\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserNameBis\", pm.collectionVariables.get(\"testUserName\").concat(\"\", \"-bis\"));\r",
											"pm.collectionVariables.set(\"testUserLoginBis\", pm.collectionVariables.get(\"testUserLogin\"));\r",
											"pm.collectionVariables.set(\"testUserEmailBis\", pm.collectionVariables.get(\"testUserEmail\").concat(\"\", \"-bis\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserNameBis}};{{testUserLoginBis}};{{testUserEmailBis}};Centreon!2021;0;0;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2109-DEBUG] Delete the non-admin user with duplicate login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserLoginBis\") + \" with duplicate login has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"testUserLoginBis\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLoginBis}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2109] Add new non-admin user with an already taken name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the name \" + pm.collectionVariables.get(\"testUserName\") + \" is already taken, the new user \" + pm.collectionVariables.get(\"testUserNameBis\") + \" could not be created.\", function () {\r",
											"    pm.collectionVariables.unset(\"testUserNameBis\");\r",
											"    pm.collectionVariables.unset(\"testUserEmailBis\");\r",
											"    postman.setNextRequest(\"[2109-DEBUG] Delete the non-admin user with duplicate name\");\r",
											"    pm.response.to.have.status(409);\r",
											"    postman.setNextRequest(\"[2109] Delete the original non-admin user\");\r",
											"    pm.collectionVariables.unset(\"testUserLoginBis\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserNameBis\", pm.collectionVariables.get(\"testUserName\"));\r",
											"pm.collectionVariables.set(\"testUserLoginBis\", pm.collectionVariables.get(\"testUserLogin\").concat(\"\", \"-bis\"));\r",
											"pm.collectionVariables.set(\"testUserEmailBis\", pm.collectionVariables.get(\"testUserEmail\").concat(\"\", \"-bis\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserNameBis}};{{testUserLoginBis}};{{testUserEmailBis}};Centreon!2021;0;0;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2109-DEBUG] Delete the non-admin user with duplicate name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserLoginBis\") + \" with duplicate name has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"testUserLoginBis\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLoginBis}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2109] Delete the original non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserLoginBis\") + \" with duplicate email has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"testUserLogin\");\r",
											"    pm.collectionVariables.unset(\"testUserName\");\r",
											"    pm.collectionVariables.unset(\"testUserEmail\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2109-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "22 - Contact template management",
			"item": [
				{
					"name": "2201 - Create a new contact template",
					"item": [
						{
							"name": "[2201] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"The account that was used to log in has admin rights\", function() {\r",
											"})\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2201] List contact templates before contact template creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of contact templates has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/contacts/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"contacts",
										"templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2201] Create a new contact template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contact template \" + pm.collectionVariables.get(\"contactTemplateName\") + \" has been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"contactTemplateName\", \"CTPL-Test-API-2201\");\r",
											"pm.collectionVariables.set(\"contactTemplateAlias\", \"Contact_Template_for_API_Testing\");\r",
											"pm.collectionVariables.set(\"contactTemplateMail\", \"dummymail@centreon\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateName}};{{contactTemplateAlias}};{{contactTemplateMail}};0;1;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2201] List contact templates after contact template creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of contact templates has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The contact template that was just created is registered.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"contactTemplateName\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/contacts/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"contacts",
										"templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2201] Delete the new contact template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contact template \" + pm.collectionVariables.get(\"contactTemplateName\") + \" has been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"contactTemplateName\");\r",
											"    pm.collectionVariables.unset(\"contactTemplateAlias\");\r",
											"    pm.collectionVariables.unset(\"contactTemplateMail\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2201-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2202 - Create contact templates with duplicate fields",
					"item": [
						{
							"name": "[2202] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"The account that was used to log in has admin rights\", function() {\r",
											"})\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2202] Create a new contact template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contact template \" + pm.collectionVariables.get(\"contactTemplateName\") + \" has been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"contactTemplateName\", \"CTPL-Test-API-2202\");\r",
											"pm.collectionVariables.set(\"contactTemplateAlias\", \"Contact_Template_for_API_Testing\");\r",
											"pm.collectionVariables.set(\"contactTemplateMail\", \"dummymail@centreon\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateName}};{{contactTemplateAlias}};{{contactTemplateMail}};0;1;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2202] Attempt to create contact template with duplicate name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the name is not a unique identifier, the contact template has been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"contactTemplateAliasBis\", pm.collectionVariables.get(\"contactTemplateAlias\").concat(\"\", \"-bis\"));\r",
											"pm.collectionVariables.set(\"contactTemplateMailBis\", \"dummymail2@centreon\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateName}};{{contactTemplateAliasBis}};{{contactTemplateMailBis}};0;1;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2202] Attempt to create contact template with duplicate alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the alias is a unique identifier, the contact template with name \" + pm.collectionVariables.get(\"contactTemplateNameBis\") + \" has not been created.\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"contactTemplateNameBis\", pm.collectionVariables.get(\"contactTemplateName\").concat(\"\", \"-bis\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateNameBis}};{{contactTemplateAlias}};{{contactTemplateMailBis}};0;1;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2202] Attempt to create contact template with duplicate mail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the mail is not a unique identifier, the contact template has been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"contactTemplateAliasTer\", pm.collectionVariables.get(\"contactTemplateAlias\").concat(\"\", \"-ter\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateNameBis}};{{contactTemplateAliasTer}};{{contactTemplateMail}};0;1;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2202] Show list of contact templates after contact template creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of contact templates has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"There should be three contact templates displayed, each with a different alias since its the unique identifier for this resource.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(3);\r",
											"    pm.expect(responseJson.result[0].alias).to.not.eql(responseJson.result[1].alias);\r",
											"    pm.expect(responseJson.result[0].alias).to.not.eql(responseJson.result[2].alias);\r",
											"    pm.expect(responseJson.result[1].alias).to.not.eql(responseJson.result[2].alias);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"contacttpl\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2202] Delete the new contact templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let contactTemplateList = pm.collectionVariables.get(\"contactTemplateList\");\r",
											"\r",
											"pm.test(\"Contact template \" + pm.collectionVariables.get(\"currentContactTemplate\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (contactTemplateList && contactTemplateList.length > 0) {\r",
											"    postman.setNextRequest(\"[2202] Delete the new contact templates\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"contactTemplateAlias\");\r",
											"    pm.collectionVariables.unset(\"contactTemplateAliasBis\");\r",
											"    pm.collectionVariables.unset(\"contactTemplateAliasTer\");\r",
											"    pm.collectionVariables.unset(\"contactTemplateName\");\r",
											"    pm.collectionVariables.unset(\"contactTemplateNameBis\");\r",
											"    pm.collectionVariables.unset(\"contactTemplateMail\");\r",
											"    pm.collectionVariables.unset(\"contactTemplateMailBis\");\r",
											"    pm.collectionVariables.unset(\"currentContactTemplate\");\r",
											"    pm.collectionVariables.unset(\"contactTemplateList\");\r",
											"    postman.setNextRequest(\"[2202-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let contactTemplateList = pm.collectionVariables.get(\"contactTemplateList\");\r",
											"\r",
											"if (!contactTemplateList || contactTemplateList.length == 0) {\r",
											"    contactTemplateList = [pm.collectionVariables.get(\"contactTemplateAlias\"), pm.collectionVariables.get(\"contactTemplateAliasBis\"), pm.collectionVariables.get(\"contactTemplateAliasTer\")];\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentContactTemplate\", contactTemplateList.shift());\r",
											"pm.collectionVariables.set(\"contactTemplateList\", contactTemplateList);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{currentContactTemplate}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2202-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2203 - Create contact templates with empty fields",
					"item": [
						{
							"name": "[2203] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"The account that was used to log in has admin rights\", function() {\r",
											"})\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2203] Create a new contact template with no name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the name is a mandatory field for creating contact templates, this contact template has not been created.\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"contactTemplateAlias\", \"Contact_Template_for_API_Testing\");\r",
											"pm.collectionVariables.set(\"contactTemplateMail\", \"dummymail@centreon\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contacttpl\",\n  \"values\": \";{{contactTemplateAlias}};{{contactTemplateMail}};0;1;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2203] Create a new contact template with no alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the alias is a mandatory field for creating contact templates, this contact template has not been created.\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"contactTemplateName\", \"CTPL-Test-API-2203\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateName}};;{{contactTemplateMail}};0;1;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2203] Create a new contact template with no mail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the mail is not a mandatory field for creating contact templates, this contact template has not been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"contactTemplateAliasBis\", \"Contact_Template_for_API_Testing_bis\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateName}};{{contactTemplateAliasBis}};;0;1;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2203] Show list of contact templates after contact template creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of contact templates has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"let aliasGetter = [];\r",
											"for(let count = 0; count < responseJson.result.length; count++) {\r",
											"    aliasGetter.push(responseJson.result[count].alias);\r",
											"}\r",
											"pm.collectionVariables.set(\"contactTemplateList\", aliasGetter);\r",
											"\r",
											"pm.test(\"There should only be a single contact template, with an empty mail.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"contactTemplateName\"));\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(pm.collectionVariables.get(\"contactTemplateAlias\"));\r",
											"    pm.expect(responseJson.result[0].email).to.be.empty;\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"contacttpl\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2203] Delete the new contact templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let contactTemplateList = pm.collectionVariables.get(\"contactTemplateList\");\r",
											"\r",
											"pm.test(\"Contact template \" + pm.collectionVariables.get(\"currentContactTemplate\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (contactTemplateList && contactTemplateList.length > 0) {\r",
											"    postman.setNextRequest(\"[2203] Delete the new contact templates\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentContactTemplate\");\r",
											"    pm.collectionVariables.unset(\"contactTemplateList\");\r",
											"    postman.setNextRequest(\"[2203-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let contactTemplateList = pm.collectionVariables.get(\"contactTemplateList\");\r",
											"pm.collectionVariables.set(\"currentContactTemplate\", contactTemplateList.shift());\r",
											"pm.collectionVariables.set(\"contactTemplateList\", contactTemplateList);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{currentContactTemplate}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2203-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2204 - Assigning a contact template to a contact",
					"item": [
						{
							"name": "[2204] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"The account that was used to log in has admin rights\", function() {\r",
											"})\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2204] Create a new contact template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contact template \" + pm.collectionVariables.get(\"contactTemplateName\") + \" has been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"contactTemplateName\", \"CTPL-Test-API-2204\");\r",
											"pm.collectionVariables.set(\"contactTemplateAlias\", \"Contact_Template_for_API_Testing\");\r",
											"pm.collectionVariables.set(\"contactTemplateMail\", \"dummymail@centreon\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateName}};{{contactTemplateAlias}};{{contactTemplateMail}};0;1;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2204] Create a new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new user has been successfully created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserName\", \"User-Test-2204\");\r",
											"pm.collectionVariables.set(\"testUserLogin\", \"Contact_for_API_Testing\");\r",
											"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserName}};{{testUserLogin}};{{testUserEmail}};Centreon!2021;0;0;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2204] Assign template to contact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The user \" + pm.collectionVariables.get(\"testUserName\") + \" has been successfully assigned to the contact template \" + pm.collectionVariables.get(\"contactTemplateName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"contactTemplateName\", \"CTPL-Test-API-2201\");\r",
											"pm.collectionVariables.set(\"contactTemplateAlias\", \"Contact_Template_for_API_Testing\");\r",
											"pm.collectionVariables.set(\"contactTemplateMail\", \"dummymail@centreon\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"contact\",\n  \"values\":\"{{testUserLogin}};template;{{contactTemplateAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2204] Delete new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"testUserName\");\r",
											"    pm.collectionVariables.unset(\"testUserLogin\");\r",
											"    pm.collectionVariables.unset(\"testUserEmail\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserName\", \"User-Test-2204\");\r",
											"pm.collectionVariables.set(\"testUserLogin\", \"Contact_for_API_Testing\");\r",
											"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2204] Delete new contact template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contact template \" + pm.collectionVariables.get(\"contactTemplateName\") + \" has been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"contactTemplateName\");\r",
											"    pm.collectionVariables.unset(\"contactTemplateAlias\");\r",
											"    pm.collectionVariables.unset(\"contactTemplateMail\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"contactTemplateName\", \"CTPL-Test-API-2204\");\r",
											"pm.collectionVariables.set(\"contactTemplateAlias\", \"Contact_Template_for_API_Testing\");\r",
											"pm.collectionVariables.set(\"contactTemplateMail\", \"dummymail@centreon\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2204-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "23 - Contact group management",
			"item": [
				{
					"name": "2301 - Listing default contact groups and their members",
					"item": [
						{
							"name": "[2301] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2301] List all contact groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of contact groups succesfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"pm.test(\"Only the default groups are listed: Guest and Supervisors.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(2);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(\"Guest\");\r",
											"    pm.expect(responseJson.result[1].name).to.eql(\"Supervisors\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/contacts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"contacts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2301] Get list of users in default contact group \"Supervisors\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of users in the contact group has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"This default contact group only has one user attached to it: the default admin.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.environment.get(\"api_login\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getcontact\",\n  \"object\": \"cg\",\n  \"values\": \"Supervisors\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2301] Get list of users in default contact group \"Guest\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of users in the contact group has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"This default contact group only has two user attached to it: a guest and a template user.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(\"guest\");\r",
											"    pm.expect(responseJson.result[1].name).to.eql(\"user\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getcontact\",\n  \"object\": \"cg\",\n  \"values\": \"Guest\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2301-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2302 - Adding a new contact to default contact group",
					"item": [
						{
							"name": "[2302] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2302] List all contact groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of contact groups succesfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"pm.test(\"Only the default groups are listed: Guest and Supervisors.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(2);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(\"Guest\");\r",
											"    pm.expect(responseJson.result[1].name).to.eql(\"Supervisors\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/contacts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"contacts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2302] Add new non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user has been successfully created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserName\", \"User-Test-2302\");\r",
											"pm.collectionVariables.set(\"testUserLogin\", \"testUser\");\r",
											"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");\r",
											"pm.collectionVariables.set(\"testUserPassword\", \"Centreon!2021\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserName}};{{testUserLogin}};{{testUserEmail}};Centreon!2021;0;0;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2302] Add the non-admin user to the \"Guest\" contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Users successfully added to the contact group.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addcontact\",\n  \"object\": \"cg\",\n  \"values\": \"Guest;{{testUserLogin}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2302] Get list of users in default contact group \"Guest\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of users in the contact group has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"This default contact group has three users attached to it: a guest, a template user and the non-admin user that we created.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(3);\r",
											"    let tableOfUserNames = [];\r",
											"    for (let count = 0; count < responseJson.result.length; count++) {\r",
											"        tableOfUserNames.push(responseJson.result[count].name);\r",
											"    }\r",
											"    pm.expect(tableOfUserNames).to.contain(\"guest\");\r",
											"    pm.expect(tableOfUserNames).to.contain(\"user\");\r",
											"    pm.expect(tableOfUserNames).to.contain(pm.collectionVariables.get(\"testUserLogin\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getcontact\",\n  \"object\": \"cg\",\n  \"values\": \"Guest\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2302] Delete the non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"testUserLogin\");\r",
											"    pm.collectionVariables.unset(\"testUserName\");\r",
											"    pm.collectionVariables.unset(\"testUserPassword\");\r",
											"    pm.collectionVariables.unset(\"testUserEmail\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2302-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2303 - Creating a new contact group",
					"item": [
						{
							"name": "[2303] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2303] List all contact groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of contact groups succesfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"pm.test(\"Only the default groups are listed: Guest and Supervisors.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(2);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(\"Guest\");\r",
											"    pm.expect(responseJson.result[1].name).to.eql(\"Supervisors\");\r",
											"    pm.collectionVariables.set(\"numberOfListedContactGroups\", responseJson.meta.total);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/contacts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"contacts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2303] Add a new contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contact group \" + pm.collectionVariables.get(\"contactGroupName\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"contactGroupName\", \"CG-Test-API-2303\");\r",
											"pm.collectionVariables.set(\"contactGroupAlias\", \"Contact Group Test API\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}};{{contactGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2303] List all contact groups after contact group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of contact groups succesfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"pm.test(\"Three contact groups are listed: Guest, Supervisors and the newly created \" + pm.collectionVariables.get(\"contactGroupName\") + \".\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"numberOfListedContactGroups\") + 1);\r",
											"    pm.collectionVariables.unset(\"numberOfListedContactGroups\");\r",
											"    pm.expect(responseJson.result[0].name).to.eql(\"Guest\");\r",
											"    pm.expect(responseJson.result[1].name).to.eql(\"Supervisors\");\r",
											"    pm.expect(responseJson.result[2].name).to.eql(pm.collectionVariables.get(\"contactGroupName\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/contacts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"contacts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2303] Get list of users in this new contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of users in the contact group has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Since it was just created, this default contact group is empty.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(0);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getcontact\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2303] Delete the contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new contact group \" + pm.collectionVariables.get(\"contactGroupName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"contactGroupName\");\r",
											"    pm.collectionVariables.unset(\"contactGroupAlias\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2303-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2304 - Adding dummy users to new contact group",
					"item": [
						{
							"name": "[2304] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2304] Add new non-admin dummy users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const users = pm.collectionVariables.get(\"dummyUserNames\");\r",
											"\r",
											"pm.test(\"User \" + pm.collectionVariables.get(\"currentUser\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (users && users.length > 0) {\r",
											"    postman.setNextRequest(\"[2304] Add new non-admin dummy users\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentUser\");\r",
											"    pm.collectionVariables.unset(\"dummyUserNames\");\r",
											"    postman.setNextRequest(\"[2304] Add a new contact group\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let dummyUserNames = pm.collectionVariables.get(\"dummyUserNames\");\r",
											"\r",
											"if(!dummyUserNames || dummyUserNames.length == 0) {\r",
											"    dummyUserNames = [\"user01\", \"user02\", \"user03\", \"user04\", \"user05\"];\r",
											"    usersCreated = [];\r",
											"}\r",
											"\r",
											"let currentUser = dummyUserNames.shift();\r",
											"pm.collectionVariables.set(\"currentUser\", currentUser);\r",
											"pm.collectionVariables.set(\"dummyUserNames\", dummyUserNames);\r",
											"usersCreated.push(currentUser);\r",
											"pm.collectionVariables.set(\"usersCreated\", usersCreated);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{currentUser}};{{currentUser}};dummymail@centreon.com;Centreon!2021;0;0;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2304] Add a new contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contact group \" + pm.collectionVariables.get(\"contactGroupName\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"contactGroupName\", \"CG-Test-API-2304\");\r",
											"pm.collectionVariables.set(\"contactGroupAlias\", \"Contact Group Test API\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}};{{contactGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2304] Add dummy users to contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The dummy users \" + pm.collectionVariables.get(\"usersCreated\") + \" have been successfully added to the contact group.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"listOfUsersToAddToContactGroup\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let usersCreated = pm.collectionVariables.get(\"usersCreated\");\r",
											"if (usersCreated || usersCreated.length != 0) {\r",
											"    var finalParameter = \"\";\r",
											"    for(var i = 0; i < usersCreated.length; i++) {\r",
											"        finalParameter = finalParameter.concat('|', usersCreated[i]);\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"listOfUsersToAddToContactGroup\", finalParameter.substring(1));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setcontact\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}};{{listOfUsersToAddToContactGroup}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2304] Get list of users in contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of users in the contact group has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"const listOfUsers = pm.collectionVariables.get(\"usersCreated\");\r",
											"pm.test(\"It is composed of \" + listOfUsers.length + \" users, which are the dummy users we added to it.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(listOfUsers.length);\r",
											"})\r",
											"\r",
											"for (var count = 0; count < responseJson.result.length; count++) {\r",
											"    pm.test(\"User \" + responseJson.result[count].name + \" has been found.\"), function(){\r",
											"        pm.expect(listOfUsers).to.contain(responseJson.result[count].name);\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getcontact\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2304] Remove the last created dummy user from the contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The dummy user \" + pm.collectionVariables.get(\"userToRemoveFromTheContactGroup\") + \" have been successfully removed from the contact group.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"usersCreated = pm.collectionVariables.get(\"usersCreated\");\r",
											"pm.collectionVariables.set(\"userToRemoveFromTheContactGroup\", usersCreated[usersCreated.length - 1]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"delcontact\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}};{{userToRemoveFromTheContactGroup}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2304] Get list of users in contact group after dummy user removal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of users in the contact group has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"const listOfUsers = pm.collectionVariables.get(\"usersCreated\");\r",
											"pm.test(\"It is composed of \" + (listOfUsers.length - 1) + \" users, which are the dummy users we added to it minus the one we removed, \" + pm.collectionVariables.get(\"userToRemoveFromTheContactGroup\") + \".\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(listOfUsers.length - 1);\r",
											"    let tableOfUserNames = [];\r",
											"    for (let count = 0; count < responseJson.result.length; count++) {\r",
											"        tableOfUserNames.push(responseJson.result[count].name);\r",
											"    }    \r",
											"    pm.expect(tableOfUserNames).to.not.contain(\"userToRemoveFromTheContactGroup\");\r",
											"    pm.collectionVariables.unset(\"userToRemoveFromTheContactGroup\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getcontact\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2304] Delete new non-admin dummy users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const users = pm.collectionVariables.get(\"usersCreated\");\r",
											"\r",
											"pm.test(\"User \" + pm.collectionVariables.get(\"currentUser\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (users && users.length > 0) {\r",
											"    postman.setNextRequest(\"[2304] Delete new non-admin dummy users\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"usersCreated\");\r",
											"    pm.collectionVariables.unset(\"currentUser\");\r",
											"    postman.setNextRequest(\"[2304] Get list of users in contact group after dummy users deletion\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let usersCreated = pm.collectionVariables.get(\"usersCreated\");\r",
											"pm.collectionVariables.set(\"currentUser\", usersCreated.shift());\r",
											"pm.collectionVariables.set(\"usersCreated\", usersCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{currentUser}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2304] Get list of users in contact group after dummy users deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of users in the contact group has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"After the deletion of the dummy users, the contact group is back to being empty.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(0);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getcontact\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2304] Delete the contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new contact group \" + pm.collectionVariables.get(\"contactGroupName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"contactGroupName\");\r",
											"    pm.collectionVariables.unset(\"contactGroupAlias\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2304-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2305 - Disabling/enabling a new contact group",
					"item": [
						{
							"name": "[2305] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2305] Add a new contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contact group \" + pm.collectionVariables.get(\"contactGroupName\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"contactGroupName\", \"CG-Test-API-2305\");\r",
											"pm.collectionVariables.set(\"contactGroupAlias\", \"Contact Group Test API\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}};{{contactGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2305] List all contact groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of contact groups succesfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"pm.test(\"Three contact groups are listed: Guest, Supervisors and the new contact group \" + pm.collectionVariables.get(\"contactGroupName\") + \".\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(3);\r",
											"    let tableOfUserNames = [];\r",
											"    for (let count = 0; count < responseJson.result.length; count++) {\r",
											"        tableOfUserNames.push(responseJson.result[count].name);\r",
											"    }\r",
											"    pm.expect(tableOfUserNames).to.contain(\"Guest\");\r",
											"    pm.expect(tableOfUserNames).to.contain(\"Supervisors\");\r",
											"    pm.expect(tableOfUserNames).to.contain(pm.collectionVariables.get(\"contactGroupName\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/contacts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"contacts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2305] Disable new contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The contact group \" + pm.collectionVariables.get(\"contactGroupName\") + \" has been successfully disabled.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"disable\",\n  \"object\": \"CG\",\n  \"values\": \"{{contactGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2305] List all contact groups after contact group disabling",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of contact groups succesfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"pm.test(\"Only the default groups are listed: Guest and Supervisors. The contact group \" + pm.collectionVariables.get(\"contactGroupName\") + \" is not listed anymore.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(2);\r",
											"    let tableOfUserNames = [];\r",
											"    for (let count = 0; count < responseJson.result.length; count++) {\r",
											"        tableOfUserNames.push(responseJson.result[count].name);\r",
											"    }\r",
											"    pm.expect(tableOfUserNames).to.contain(\"Guest\");\r",
											"    pm.expect(tableOfUserNames).to.contain(\"Supervisors\");\r",
											"    pm.expect(tableOfUserNames).to.not.contain(pm.collectionVariables.get(\"contactGroupName\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/contacts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"contacts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2305] Enable new contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The contact group \" + pm.collectionVariables.get(\"contactGroupName\") + \" has been successfully enabled.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"enable\",\n  \"object\": \"CG\",\n  \"values\": \"{{contactGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2305] List all contact groups after contact group enabling",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of contact groups succesfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"pm.test(\"The listed contact groups are now back to three: Guest, Supervisors and the new contact group \" + pm.collectionVariables.get(\"contactGroupName\") + \".\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(3);\r",
											"    let tableOfUserNames = [];\r",
											"    for (let count = 0; count < responseJson.result.length; count++) {\r",
											"        tableOfUserNames.push(responseJson.result[count].name);\r",
											"    }\r",
											"    pm.expect(tableOfUserNames).to.contain(\"Guest\");\r",
											"    pm.expect(tableOfUserNames).to.contain(\"Supervisors\");\r",
											"    pm.expect(tableOfUserNames).to.contain(pm.collectionVariables.get(\"contactGroupName\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/contacts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"contacts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2305] Delete the contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new contact group \" + pm.collectionVariables.get(\"contactGroupName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"contactGroupName\");\r",
											"    pm.collectionVariables.unset(\"contactGroupAlias\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2305-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2306 - Adding a user to a disabled contact group",
					"item": [
						{
							"name": "[2306] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2306] Add a new contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contact group \" + pm.collectionVariables.get(\"contactGroupName\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"contactGroupName\", \"CG-Test-API-2306\");\r",
											"pm.collectionVariables.set(\"contactGroupAlias\", \"Contact Group Test API\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}};{{contactGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2306] Add new non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user has been successfully created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserName\", \"User-Test-2306\");\r",
											"pm.collectionVariables.set(\"testUserLogin\", \"testUser\");\r",
											"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");\r",
											"pm.collectionVariables.set(\"testUserPassword\", \"Centreon!2021\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserName}};{{testUserLogin}};{{testUserEmail}};Centreon!2021;0;0;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2306] Disable contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The contact group \" + pm.collectionVariables.get(\"contactGroupName\") + \" has been successfully disabled.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"disable\",\n  \"object\": \"CG\",\n  \"values\": \"{{contactGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2306] Adding a non-admin user to a disabled contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Even though the contact group is disbaled, you can still add users to it, just like in the UI.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setcontact\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}};{{testUserLogin}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2306] Delete the non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"testUserName\");\r",
											"    pm.collectionVariables.unset(\"testUserLogin\");\r",
											"    pm.collectionVariables.unset(\"testUserEmail\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2306] Delete the contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new contact group \" + pm.collectionVariables.get(\"contactGroupName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"contactGroupName\");\r",
											"    pm.collectionVariables.unset(\"contactGroupAlias\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2306-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "2307 - Checking addcontact/setcontact properties on contact groups",
					"item": [
						{
							"name": "[2307] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and has admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[2307] Add two non-admin users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const users = pm.collectionVariables.get(\"listOfUserNames\");\r",
											"\r",
											"pm.test(\"User \" + pm.collectionVariables.get(\"currentUser\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (users && users.length > 0) {\r",
											"    pm.collectionVariables.set(\"userAdd\", pm.collectionVariables.get(\"currentUser\"));\r",
											"    postman.setNextRequest(\"[2307] Add two non-admin users\");\r",
											"} else {\r",
											"    pm.collectionVariables.set(\"userSet\", pm.collectionVariables.get(\"currentUser\"));\r",
											"    pm.collectionVariables.unset(\"currentUser\");\r",
											"    pm.collectionVariables.unset(\"listOfUserNames\");\r",
											"    postman.setNextRequest(\"[2307] Add a new contact group\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let listOfUserNames = pm.collectionVariables.get(\"listOfUserNames\");\r",
											"\r",
											"if(!listOfUserNames || listOfUserNames.length == 0) {\r",
											"    listOfUserNames = [\"userAdd\", \"userSet\"];\r",
											"}\r",
											"\r",
											"let currentUser = listOfUserNames.shift();\r",
											"pm.collectionVariables.set(\"currentUser\", currentUser);\r",
											"pm.collectionVariables.set(\"listOfUserNames\", listOfUserNames);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{currentUser}};{{currentUser}};dummymail@centreon.com;Centreon!2021;0;0;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2307] Add a new contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contact group \" + pm.collectionVariables.get(\"contactGroupName\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"contactGroupName\", \"CG-Test-API-2307\");\r",
											"pm.collectionVariables.set(\"contactGroupAlias\", \"Contact Group Test API\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}};{{contactGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2307] Add the first user to the contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The user \" + pm.collectionVariables.get(\"userAdd\") + \" has been successfully added to the contact group.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addcontact\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}};{{userAdd}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2307] Get list of users in this new contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of users in the contact group has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The only listed user is \" + pm.collectionVariables.get(\"userAdd\") + \".\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"userAdd\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getcontact\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2307] Set the second user to the contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The user \" + pm.collectionVariables.get(\"userSet\") + \" has been successfully assigned to the contact group.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setcontact\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}};{{userSet}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2307] Get list of users in this new contact group after user set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of users in the contact group has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The only listed user is \" + pm.collectionVariables.get(\"userSet\") + \", since the previous command has overwritten any previous definition of what is inside the contact group.\" , function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"userSet\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getcontact\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2307] Add the first user to the contact group for the second time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The user \" + pm.collectionVariables.get(\"userAdd\") + \" has been successfully added to the contact group.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addcontact\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}};{{userAdd}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2307] Get list of users in this new contact group after second user add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of users in the contact group has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The two created users are now listed in the contact group, in their chronological order of addition.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"userSet\"));\r",
											"    pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"userAdd\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getcontact\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2307] Delete the contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new contact group \" + pm.collectionVariables.get(\"contactGroupName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"contactGroupName\");\r",
											"    pm.collectionVariables.unset(\"contactGroupAlias\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2307] Delete the two non-admin users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const users = pm.collectionVariables.get(\"listOfUserNames\");\r",
											"\r",
											"pm.test(\"User \" + pm.collectionVariables.get(\"currentUser\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (users && users.length > 0) {\r",
											"    pm.collectionVariables.unset(\"userAdd\");\r",
											"    postman.setNextRequest(\"[2307] Delete the two non-admin users\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"userSet\");\r",
											"    pm.collectionVariables.unset(\"currentUser\");\r",
											"    pm.collectionVariables.unset(\"listOfUserNames\");\r",
											"    postman.setNextRequest(\"[2307-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let listOfUserNames = pm.collectionVariables.get(\"listOfUserNames\");\r",
											"\r",
											"if(!listOfUserNames || listOfUserNames.length == 0) {\r",
											"    listOfUserNames = [\"userAdd\", \"userSet\"];\r",
											"}\r",
											"\r",
											"let currentUser = listOfUserNames.shift();\r",
											"pm.collectionVariables.set(\"currentUser\", currentUser);\r",
											"pm.collectionVariables.set(\"listOfUserNames\", listOfUserNames);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{currentUser}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[2307-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "30 - Host management",
			"item": [
				{
					"name": "3001 - Creating a new host",
					"item": [
						{
							"name": "[3001] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3001] List all hosts before host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of hosts successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"numberOfHostsBeforeCreation\", responseJson.meta.total);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3001] Create a new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \", IP address \" + pm.collectionVariables.get(\"hostIpAddr\") + \" and template \" + pm.collectionVariables.get(\"hostTemplate\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-3001\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", \"127.0.0.1\");\r",
											"pm.collectionVariables.set(\"hostTemplate\", \"generic-active-host-custom\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};{{hostIpAddr}};{{hostTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3001] Export configuration after host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3001] List all hosts after host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"A new host has been added.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"numberOfHostsBeforeCreation\") + 1);\r",
											"    pm.collectionVariables.unset(\"numberOfHostsBeforeCreation\");\r",
											"})\r",
											"\r",
											"pm.test(\"This host has the features we set for it.\", function() {\r",
											"    for (let count = 0; count < responseJson.result.length; count++) {\r",
											"        if(responseJson.result[count].name == pm.collectionVariables.get(\"hostName\")) {\r",
											"            pm.expect(responseJson.result[count].name).to.eql(pm.collectionVariables.get(\"hostName\"));\r",
											"            pm.expect(responseJson.result[count].alias).to.eql(pm.collectionVariables.get(\"hostName\"));\r",
											"        }\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3001] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostAlias\");   \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3001] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3001] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3001] List all hosts after host deletion\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3001] List all hosts after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of hosts successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"After exporting the configuration, the host list is back to being empty.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(0);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3001-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3002 - Adding hosts with duplicate fields",
					"item": [
						{
							"name": "[3002] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3002] Create a new host with defined characteristics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostAlias\") + \", IP address \" + pm.collectionVariables.get(\"hostIpAddr\") + \" and template \" + pm.collectionVariables.get(\"hostTemplate\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-3002\");\r",
											"pm.collectionVariables.set(\"hostAlias\", \"Host for API Scenario 3002\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", \"127.0.0.1\");\r",
											"pm.collectionVariables.set(\"hostTemplate\", \"generic-active-host-custom\");\r",
											"\r",
											"pm.collectionVariables.set(\"hostNameBis\", pm.collectionVariables.get(\"hostName\").concat(\"\", \"-bis\"));\r",
											"pm.collectionVariables.set(\"hostAliasBis\", pm.collectionVariables.get(\"hostAlias\").concat(\"\", \" (1)\"));\r",
											"pm.collectionVariables.set(\"hostIpAddrBis\", \"127.0.0.2\");\r",
											"\r",
											"pm.collectionVariables.set(\"hostNameTer\", pm.collectionVariables.get(\"hostName\").concat(\"\", \"-ter\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostAlias}};{{hostIpAddr}};{{hostTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3002] Create a new host with same name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the name \" + pm.collectionVariables.get(\"hostName\") + \" has been already taken by another host, this host template creation request has not ended successfully.\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostAliasBis}};{{hostIpAddrBis}};{{hostTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3002] Create a new host with same alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A host with the same alias as the original one could be created, since the alias is not a unique identifier.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostNameBis}};{{hostAlias}};{{hostIpAddrBis}};{{hostTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3002] Create a new host with same IP address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A host with the same IP address as the original one could be created, since the IP address is not a unique identifier.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostNameTer}};{{hostAliasBis}};{{hostIpAddr}};{{hostTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3002] Check if host name is case-sensitive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host names are not case-sensitive: therefore, this host could not be created.\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.collectionVariables.unset(\"hostNameCaseSensitivity\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.collectionVariables.get(\"hostName\") == pm.collectionVariables.get(\"hostName\").toLowerCase()) {\r",
											"    pm.collectionVariables.set(\"hostNameCaseSensitivity\", pm.collectionVariables.get(\"hostName\").toUpperCase());\r",
											"} else {\r",
											"    pm.collectionVariables.set(\"hostNameCaseSensitivity\", pm.collectionVariables.get(\"hostName\").toLowerCase());\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostAliasBis}};{{hostIpAddrBis}};{{hostTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3002] Export configuration after host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3002] List all created hosts and check their specificities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Three new hosts have been added.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(3);\r",
											"})\r",
											"\r",
											"pm.test(\"The information about these hosts ensure that the name cannot be already taken when creating a new host.\", function() {\r",
											"    pm.expect(responseJson.result[0].name).to.not.eql(responseJson.result[1].name);\r",
											"    pm.expect(responseJson.result[1].name).to.not.eql(responseJson.result[2].name);\r",
											"    pm.expect(responseJson.result[0].name).to.not.eql(responseJson.result[2].name);\r",
											"})\r",
											"\r",
											"pm.test(\"However, aliases and IP addresses can be shared among different hosts.\", function() {\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(responseJson.result[1].alias);\r",
											"    pm.expect(responseJson.result[0].address_ip).to.eql(responseJson.result[2].address_ip);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3002] Batch delete hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostList\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[3002] Batch delete hosts\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"hostList\");\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostNameBis\");\r",
											"    pm.collectionVariables.unset(\"hostNameTer\");\r",
											"    pm.collectionVariables.unset(\"hostAlias\");\r",
											"    pm.collectionVariables.unset(\"hostAliasBis\");\r",
											"    pm.collectionVariables.unset(\"hostIpAddr\");\r",
											"    pm.collectionVariables.unset(\"hostIpAddrBis\");\r",
											"    pm.collectionVariables.unset(\"hostTemplate\");\r",
											"    postman.setNextRequest(\"[3002] Export configuration after batch host deletion\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hosts = pm.collectionVariables.get(\"hostList\");\r",
											"\r",
											"if (!hosts || hosts.length == 0) {\r",
											"    hosts = [pm.collectionVariables.get(\"hostName\"), pm.collectionVariables.get(\"hostNameBis\"), pm.collectionVariables.get(\"hostNameTer\")];\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentHost\", hosts.shift());\r",
											"pm.collectionVariables.set(\"hostList\", hosts);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"del\",\r\n  \"object\": \"host\",\r\n  \"values\": \"{{currentHost}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3002] Export configuration after batch host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3002] Export configuration after batch host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3002-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3002-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3003 - Adding hosts with empty mandatory fields",
					"item": [
						{
							"name": "[3003] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3003] Create a new host with defined characteristics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostAlias\") + \", IP address \" + pm.collectionVariables.get(\"hostIpAddr\") + \" and template \" + pm.collectionVariables.get(\"hostTemplate\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-3003\");\r",
											"pm.collectionVariables.set(\"hostAlias\", \"Host for API Scenario 3003\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", \"127.0.0.1\");\r",
											"pm.collectionVariables.set(\"hostTemplate\", \"generic-active-host-custom\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostAlias}};{{hostIpAddr}};{{hostTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3003] Create a new host with an empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the name field is mandatory, a host with an empty name field could not be created.\", function () {\r",
											"    postman.setNextRequest(\"[3003-DEBUG] Give name to new host\");\r",
											"    pm.response.to.not.have.status(200);\r",
											"    postman.setNextRequest(\"[3003] Create a host with an empty alias\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \";{{hostAlias}};{{hostIpAddr}};{{hostTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3003-DEBUG] Give name to new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostNameNoName\", pm.collectionVariables.get(\"hostName\").concat(\"\", \"-No-Name\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"host\",\n  \"values\": \";name;{{hostNameNoName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3003] Create a new host with an empty alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the alias field is not mandatory, the host \" + pm.collectionVariables.get(\"hostNameNoAlias\") + \" has been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostNameNoAlias\", pm.collectionVariables.get(\"hostName\").concat(\"\", \"-No-Alias\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostNameNoAlias}};;{{hostIpAddr}};{{hostTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3003] Create a new host with an empty IP address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the IP address field is mandatory, a host with an empty IP address field could not be created.\", function () {\r",
											"    postman.setNextRequest(\"[3003-DEBUG] Give IP address to new host\");\r",
											"    pm.response.to.not.have.status(200);    \r",
											"    postman.setNextRequest(\"[3003] Create a host with an empty template\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostNameNoIpAddr\", pm.collectionVariables.get(\"hostName\").concat(\"\", \"-No-IP-Addr\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostNameNoIpAddr}};{{hostAlias}};;{{hostTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3003-DEBUG] Give IP address to new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"host\",\n  \"values\": \"{{hostNameNoIpAddr}};address;127.0.0.1\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3003] Create a new host with an empty template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the template field is not mandatory, the host \" + pm.collectionVariables.get(\"hostNameNoTemplate\") + \" has been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostNameNoTemplate\", pm.collectionVariables.get(\"hostName\").concat(\"\", \"-No-Template\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostNameNoTemplate}};{{hostAlias}};{{hostIpAddr}};;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3003] Export configuration after host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3003] List all created hosts and check their specificities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Only three new hosts should have been added.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(3);\r",
											"})\r",
											"\r",
											"pm.test(\"These hosts should not be the hosts with empty name or ip address.\", function() {\r",
											"    let nameGetter = [];\r",
											"    for (let count = 0; count < responseJson.result.length; count++) {\r",
											"        nameGetter.push(responseJson.result[count].name);\r",
											"    }\r",
											"    pm.collectionVariables.set(\"hostsCreated\", nameGetter);\r",
											"    pm.expect(nameGetter).to.not.contain(pm.collectionVariables.get(\"hostNameNoName\"));\r",
											"    pm.expect(nameGetter).to.not.contain(pm.collectionVariables.get(\"hostNameNoIpAddr\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3003] Batch delete hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[3003] Batch delete hosts\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"hostsCreated\");\r",
											"    postman.setNextRequest(\"[3003] Export configuration after batch host deletion\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"let currentHost = hostsCreated.shift();\r",
											"pm.collectionVariables.set(\"currentHost\", currentHost);\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3003] Export configuration after batch host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3003] Export configuration after batch host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    pm.collectionVariables.unset(\"hostNameNoName\");\r",
											"    pm.collectionVariables.unset(\"hostNameNoAlias\");\r",
											"    pm.collectionVariables.unset(\"hostNameNoIpAddr\");\r",
											"    pm.collectionVariables.unset(\"hostNameNoTemplate\");\r",
											"    postman.setNextRequest(\"[3003-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3003-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3004 - Batch creating hosts and finding a specific one through search parameters",
					"item": [
						{
							"name": "[3004] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3004] Batch create dummy hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostList\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[3004] Batch create dummy hosts\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"hostList\");\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    postman.setNextRequest(\"[3004] Create a new host with specific characteristics\");\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hosts = pm.collectionVariables.get(\"hostList\");\r",
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"if(!hosts || hosts.length == 0) {\r",
											"    hosts = [\"host_name_0\", \"host_name_1\", \"host_name_2\", \"host_name_3\", \"host_name_4\", \"host_name_5\", \"host_name_6\", \"host_name_7\", \"host_name_8\", \"host_name_9\", \"host_name_10\"];\r",
											"    hostsCreated = [];\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentHost\", hosts.shift());\r",
											"pm.collectionVariables.set(\"hostList\", hosts);\r",
											"\r",
											"hostsCreated.push(pm.collectionVariables.get(\"currentHost\"));\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}};{{currentHost}};127.0.0.1;generic-active-host-custom;central;\"\n}\n\n"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3004] Create a new host with specific characteristics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"hostsCreated.push(pm.collectionVariables.get(\"hostName\"));\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-3004\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", pm.environment.get(\"server\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};{{hostIpAddr}};generic-active-host-custom;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3004] Export configuration after batch host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3004] List all hosts after batch host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of hosts successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"All the hosts that were created are in real-time monitoring.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"hostsCreated\").length);\r",
											"})\r",
											"\r",
											"pm.test(\"However, the query does not list all of them.\", function(){\r",
											"    pm.expect(responseJson.result.length).to.not.eql(pm.collectionVariables.get(\"hostsCreated\").length);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3004] Find a specific host with a search request containing its name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of hosts successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"A specific host can be found in a search request with its name.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostName\"));\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(pm.collectionVariables.get(\"hostName\"));\r",
											"    pm.expect(responseJson.result[0].address_ip).to.eql(pm.collectionVariables.get(\"hostIpAddr\"));\r",
											"    pm.collectionVariables.set(\"hostID\", responseJson.result[0].id);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?search={\"host.name\":\"{{hostName}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "{\"host.name\":\"{{hostName}}\"}"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3004] Find a specific host with a search request containing its alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of hosts successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"A specific host can be found in a search request with its alias.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostName\"));\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(pm.collectionVariables.get(\"hostName\"));\r",
											"    pm.expect(responseJson.result[0].address_ip).to.eql(pm.collectionVariables.get(\"hostIpAddr\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?search={\"host.alias\":\"{{hostName}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "{\"host.alias\":\"{{hostName}}\"}"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3004] Find a specific host with a search request containing its IP address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of hosts successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"A specific host can be found in a search request with its IP address.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostName\"));\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(pm.collectionVariables.get(\"hostName\"));\r",
											"    pm.expect(responseJson.result[0].address_ip).to.eql(pm.collectionVariables.get(\"hostIpAddr\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?search={\"host.address\":\"{{hostIpAddr}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "{\"host.address\":\"{{hostIpAddr}}\"}"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3004] Find a specific host with a search request containing its unique ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of hosts successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"A specific host can be found in a search request with its ID.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostName\"));\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(pm.collectionVariables.get(\"hostName\"));\r",
											"    pm.expect(responseJson.result[0].address_ip).to.eql(pm.collectionVariables.get(\"hostIpAddr\"));\r",
											"    pm.collectionVariables.unset(\"hostID\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?search={\"host.id\":\"{{hostId}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "{\"host.id\":\"{{hostId}}\"}"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3004] Batch delete hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[3004] Batch delete hosts\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"hostsCreated\");\r",
											"    postman.setNextRequest(\"[3004] Export configuration after batch host deletion\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"let currentHost = hostsCreated.shift();\r",
											"pm.collectionVariables.set(\"currentHost\", currentHost);\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3004] Export configuration after batch host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3004] Export configuration after batch host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3004-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3004-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3005 - Setting and getting parameters for a new host [v1]",
					"item": [
						{
							"name": "[3005] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3005] Create a new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostAlias\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-3005\");\r",
											"pm.collectionVariables.set(\"hostAlias\", \"Host for API Scenario 3005\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostAlias}};127.0.0.1;generic-active-host-custom;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3005] Set parameters for a specific newly created host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"\r",
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"currentParameter\") + \" was updated with \" + pm.collectionVariables.get(\"currentValue\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.collectionVariables.get(\"name\") && pm.collectionVariables.get(\"name\") != pm.collectionVariables.get(\"hostName\")) {\r",
											"    pm.collectionVariables.set(\"hostName\", pm.collectionVariables.get(\"name\"));\r",
											"}\r",
											"\r",
											"if (pm.collectionVariables.get(\"alias\") && pm.collectionVariables.get(\"alias\") != pm.collectionVariables.get(\"hostAlias\")) {\r",
											"    pm.collectionVariables.set(\"hostAlias\", pm.collectionVariables.get(\"alias\"));\r",
											"}\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"[3005] Set parameters for a specific newly created host\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentParameter\");\r",
											"    pm.collectionVariables.unset(\"currentValue\");\r",
											"    pm.collectionVariables.unset(\"listOfParameters\");\r",
											"    pm.collectionVariables.unset(\"listOfValues\");\r",
											"    postman.setNextRequest(\"[3005] Export configuration after host creation and update\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"let values = pm.collectionVariables.get(\"listOfValues\");\r",
											"let parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"name\", \"alias\", \"timezone\", \"active_checks_enabled\", \"check_period\", \"check_interval\", \"max_check_attempts\", \"notifications_enabled\", \"host_notification_options\", \"notification_interval\", \"notification_period\"];\r",
											"    parametersToCheck = [];\r",
											"    pm.collectionVariables.set(\"parametersToCheck\", parametersToCheck);\r",
											"    values = [pm.collectionVariables.get(\"hostName\").concat(\"\", \"-updated\"), pm.collectionVariables.get(\"hostAlias\").concat(\"\", \" Updated\"), \"Europe/Paris\", 1, \"workhours\", 5, 3, 1, [\"d\",\"u\",\"r\",\"f\"], 5, \"workhours\"];\r",
											"}\r",
											"\r",
											"let currentParameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"currentParameter\", currentParameter);\r",
											"pm.collectionVariables.set(\"listOfParameters\", parameters);\r",
											"let currentValue = values.shift();\r",
											"pm.collectionVariables.set(\"currentValue\", currentValue);\r",
											"pm.collectionVariables.set(\"listOfValues\", values);\r",
											"\r",
											"pm.collectionVariables.set(currentParameter, currentValue);\r",
											"\r",
											"parametersToCheck.push(currentParameter);\r",
											"pm.collectionVariables.set(\"parametersToCheck\", parametersToCheck);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"host\",\n  \"values\": \"{{hostName}};{{currentParameter}};{{currentValue}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3005] Export configuration after host creation and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3005] Get parameters of newly created host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Parameters about the host successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"listOfParametersToCheck\");\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"const keys = Object.keys(responseJson.result[0]);\r",
											"const values = Object.values(responseJson.result[0]);\r",
											"var parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"let parametersChecked = 0;\r",
											"\r",
											"for (let count = 0; count < parametersToCheck.length; count++) {\r",
											"    var indexOfParameterInResponse = keys.indexOf(parametersToCheck[count]);\r",
											"    if(indexOfParameterInResponse != -1) {\r",
											"        pm.test(\"Parameter \" + parametersToCheck[count] + \" now has value \" + pm.collectionVariables.get(parametersToCheck[count]), function() {\r",
											"            if (typeof pm.collectionVariables.get(parametersToCheck[count]) === 'number') {\r",
											"                pm.expect(pm.collectionVariables.get(parametersToCheck[count])).to.eql(parseInt(values[indexOfParameterInResponse]));\r",
											"            } else if (parametersToCheck[count] == 'host_notification_options') {\r",
											"                let host_notification_options = pm.collectionVariables.get(\"host_notification_options\");\r",
											"                let finalParameter = \"\";\r",
											"                for(count2 = 0; count2 < host_notification_options.length; count2++) {\r",
											"                    finalParameter = finalParameter.concat(\",\", host_notification_options[count2]);\r",
											"                }\r",
											"                pm.expect(finalParameter.substring(1)).to.eql(values[indexOfParameterInResponse]);\r",
											"            } else {\r",
											"                pm.expect(pm.collectionVariables.get(parametersToCheck[count])).to.eql(values[indexOfParameterInResponse]);\r",
											"            }\r",
											"            pm.collectionVariables.unset(parametersToCheck[count]);\r",
											"            parametersChecked++;\r",
											"        }) \r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"All parameters have been checked.\", function() {\r",
											"    pm.expect(parametersChecked).to.eql(parametersToCheck.length);\r",
											"    pm.collectionVariables.unset(\"parametersToCheck\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"if (parametersToCheck || parametersToCheck.length != 0) {\r",
											"    let finalParameter = \"\";\r",
											"    for(let count = 0; count < parametersToCheck.length; count++) {\r",
											"        finalParameter = finalParameter.concat('|', parametersToCheck[count]); \r",
											"    }\r",
											"    pm.collectionVariables.set(\"listOfParametersToCheck\", finalParameter.substring(1));\r",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"getparam\",\n  \"object\":\"host\",\n  \"values\": \"{{hostName}};{{listOfParametersToCheck}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3005] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostAlias\");   \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3005] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3005] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3005-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3005-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3006 - Setting and getting parameters for a new host [v2]",
					"item": [
						{
							"name": "[3006] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3006] Create a new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostAlias\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-3006\");\r",
											"pm.collectionVariables.set(\"hostAlias\", \"Host for API Scenario 3006\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostAlias}};127.0.0.1;generic-active-host-custom;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3006] Set parameters for a specific newly created host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"\r",
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"currentParameter\") + \" was updated with \" + pm.collectionVariables.get(\"currentValue\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.collectionVariables.get(\"name\") && pm.collectionVariables.get(\"name\") != pm.collectionVariables.get(\"hostName\")) {\r",
											"    pm.collectionVariables.set(\"hostName\", pm.collectionVariables.get(\"name\"));\r",
											"}\r",
											"\r",
											"if (pm.collectionVariables.get(\"alias\") && pm.collectionVariables.get(\"alias\") != pm.collectionVariables.get(\"hostAlias\")) {\r",
											"    pm.collectionVariables.set(\"hostAlias\", pm.collectionVariables.get(\"alias\"));\r",
											"}\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"[3006] Set parameters for a specific newly created host\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentParameter\");\r",
											"    pm.collectionVariables.unset(\"currentValue\");\r",
											"    pm.collectionVariables.unset(\"listOfParameters\");\r",
											"    pm.collectionVariables.unset(\"listOfValues\");\r",
											"    postman.setNextRequest(\"[3006] Export configuration after host creation and update\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"let values = pm.collectionVariables.get(\"listOfValues\");\r",
											"let parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"name\", \"alias\", \"timezone\", \"active_checks_enabled\", \"check_period\", \"check_interval\", \"max_check_attempts\", \"notifications_enabled\", \"host_notification_options\", \"notification_interval\", \"notification_period\"];\r",
											"    parametersToCheck = [];\r",
											"    pm.collectionVariables.set(\"parametersToCheck\", parametersToCheck);\r",
											"    values = [pm.collectionVariables.get(\"hostName\").concat(\"\", \"-updated\"), pm.collectionVariables.get(\"hostAlias\").concat(\"\", \" Updated\"), \"Europe/Paris\", 1, \"workhours\", 5, 3, 1, [\"d\",\"u\",\"r\",\"f\"], 5, \"workhours\"];\r",
											"}\r",
											"\r",
											"let currentParameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"currentParameter\", currentParameter);\r",
											"pm.collectionVariables.set(\"listOfParameters\", parameters);\r",
											"let currentValue = values.shift();\r",
											"pm.collectionVariables.set(\"currentValue\", currentValue);\r",
											"pm.collectionVariables.set(\"listOfValues\", values);\r",
											"\r",
											"pm.collectionVariables.set(currentParameter, currentValue);\r",
											"\r",
											"parametersToCheck.push(currentParameter);\r",
											"pm.collectionVariables.set(\"parametersToCheck\", parametersToCheck);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"host\",\n  \"values\": \"{{hostName}};{{currentParameter}};{{currentValue}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3006] Export configuration after host creation and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3006] Get updated host ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of hosts successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"for(let count = 0; count < responseJson.result.length; count++) {\r",
											"    if(responseJson.result[count].name == pm.collectionVariables.get(\"hostName\")) {\r",
											"        pm.collectionVariables.set(\"hostID\", responseJson.result[count].id);\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[3006] Check the updated host",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"\r",
											"if(parametersToCheck) {\r",
											"    for (let i = 0; i < parametersToCheck.length; i++) {\r",
											"        switch (parametersToCheck[i]) {\r",
											"            case 'active_checks_enabled': \r",
											"                pm.collectionVariables.set(\"active_checks\", pm.collectionVariables.get(\"active_checks_enabled\"));\r",
											"                pm.collectionVariables.unset(\"active_checks_enabled\");\r",
											"                parametersToCheck[i] = \"active_checks\";\r",
											"                if(pm.collectionVariables.get(\"active_checks\") == 1){pm.collectionVariables.set(\"active_checks\", true)} else {pm.collectionVariables.set(\"active_checks\", false)}\r",
											"                break;\r",
											"            case 'passive_checks_enabled': \r",
											"                pm.collectionVariables.set(\"passive_checks\", pm.collectionVariables.get(\"passive_checks_enabled\"));\r",
											"                pm.collectionVariables.unset(\"passive_checks_enabled\");\r",
											"                parametersToCheck[i] = \"passive_checks\";\r",
											"                if(pm.collectionVariables.get(\"passive_checks\") == 1){pm.collectionVariables.set(\"passive_checks\", true)} else {pm.collectionVariables.set(\"passive_checks\", false)}\r",
											"                break;\r",
											"            case 'notifications_enabled':\r",
											"                pm.collectionVariables.set(\"notify\", pm.collectionVariables.get(\"notifications_enabled\"));\r",
											"                pm.collectionVariables.unset(\"notifications_enabled\");\r",
											"                parametersToCheck[i] = \"notify\";\r",
											"                if(pm.collectionVariables.get(\"notify\") == 1){pm.collectionVariables.set(\"notify\", true)} else {pm.collectionVariables.set(\"notify\", false)}\r",
											"                break;\r",
											"            case 'host_notification_options':\r",
											"                host_notification_options = pm.collectionVariables.get(\"host_notification_options\");\r",
											"                for(let j = 0; j < host_notification_options.length; j++) {\r",
											"                    switch (host_notification_options[j]) {\r",
											"                        case 'd':\r",
											"                            pm.collectionVariables.set(\"notify_on_down\", true);\r",
											"                            parametersToCheck.push(\"notify_on_down\");\r",
											"                            break;\r",
											"                        case 'u':\r",
											"                            pm.collectionVariables.set(\"notify_on_unreachable\", true);\r",
											"                            parametersToCheck.push(\"notify_on_unreachable\");\r",
											"                            break;\r",
											"                        case 'r':\r",
											"                            pm.collectionVariables.set(\"notify_on_recovery\", true);\r",
											"                            parametersToCheck.push(\"notify_on_recovery\");\r",
											"                            break;\r",
											"                        case 'f':\r",
											"                            pm.collectionVariables.set(\"notify_on_flapping\", true);\r",
											"                            parametersToCheck.push(\"notify_on_flapping\");\r",
											"                            break;                                                                            \r",
											"                    }          \r",
											"                }\r",
											"                pm.collectionVariables.unset(\"host_notification_options\");\r",
											"                parametersToCheck.splice(parametersToCheck.indexOf(\"host_notification_options\"), 1);\r",
											"                break;\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"parametersToCheck\", parametersToCheck);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Information on selected host successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"const keys = Object.keys(responseJson);\r",
											"console.log(keys);\r",
											"const values = Object.values(responseJson);\r",
											"let parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"let parametersChecked = 0;\r",
											"\r",
											"for (let count = 0; count < parametersToCheck.length; count++) {\r",
											"    var indexOfParameterInResponse = keys.indexOf(parametersToCheck[count]);\r",
											"    if(indexOfParameterInResponse != -1) {\r",
											"        pm.test(\"Parameter \" + parametersToCheck[count] + \" now has value \" + pm.collectionVariables.get(parametersToCheck[count]), function() {\r",
											"            pm.expect(pm.collectionVariables.get(parametersToCheck[count])).to.eql(values[indexOfParameterInResponse]);\r",
											"            pm.collectionVariables.unset(parametersToCheck[count]);\r",
											"            parametersChecked++;\r",
											"        }) \r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"All parameters have been checked.\", function() {\r",
											"    pm.expect(parametersChecked).to.eql(parametersToCheck.length);\r",
											"    pm.collectionVariables.unset(\"parametersToCheck\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[3006] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostAlias\");   \r",
											"    pm.collectionVariables.unset(\"hostID\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3006] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3006] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3006-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3006-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3007 - Disabling/enabling a host",
					"item": [
						{
							"name": "[3007] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3007] Batch create several hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostList\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[3007] Batch create several hosts\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"hostList\");\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    postman.setNextRequest(\"[3007] Export configuration after batch host creation\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hosts = pm.collectionVariables.get(\"hostList\");\r",
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"if(!hosts || hosts.length == 0) {\r",
											"    hosts = [\"Host-Test-API-3007\", \"host_name_0\", \"host_name_1\", \"host_name_2\", \"host_name_3\"];\r",
											"    hostsCreated = [];\r",
											"}\r",
											"\r",
											"hostsCreated.push(hosts.shift());\r",
											"pm.collectionVariables.set(\"currentHost\", hostsCreated[hostsCreated.length - 1]);\r",
											"pm.collectionVariables.set(\"hostList\", hosts);\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}};{{currentHost}};127.0.0.1;generic-active-host-custom;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3007] Export configuration after batch host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3007] Export configuration after batch host creation\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3007] List all hosts after batch host creation\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3007] List all hosts after batch host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of hosts successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"All the hosts that were created are listed in real-time monitoring.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"hostsCreated\").length);\r",
											"    let nameGetter = [];\r",
											"    for (let count = 0; count < responseJson.result.length; count++) {\r",
											"        nameGetter.push(responseJson.result[count].name);\r",
											"    }\r",
											"    pm.expect(nameGetter).to.eql(pm.collectionVariables.get(\"hostsCreated\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3007] Disable the first created host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host was successfully disabled.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostToDisable\", pm.collectionVariables.get(\"hostsCreated\")[0]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"disable\",\n  \"object\": \"host\",\n  \"values\": \"{{hostToDisable}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3007] Show hosts after host disable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of configured hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host that we disabled is listed as such in the list.\", function() {\r",
											"    for(let count = 0; count < responseJson.result.length; count++) {\r",
											"        if(responseJson.result[count].name == pm.collectionVariables.get(\"hostToDisable\")) {\r",
											"            pm.expect(parseInt(responseJson.result[count].activate)).to.eql(0);\r",
											"            pm.collectionVariables.set(\"hostToDisableId\", parseInt(responseJson.result[count].id));\r",
											"        }\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"host\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3007] Export configuration after host disable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    setTimeout(function(){}, [1000]);\r",
											"    postman.setNextRequest(\"[3007] Export configuration after host disable\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [3000]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3007] List all hosts in real-time monitoring after host disable\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3007] List all hosts in real-time monitoring after host disable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts in real-time monitoring has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host has been disabled and is not listed anymore.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"hostsCreated\").length - 1);\r",
											"    let table = [];\r",
											"    for(let count = 0; count < responseJson.result.length; count++) {\r",
											"        table.push(responseJson.result[count].name);\r",
											"    }\r",
											"    pm.expect(table).to.not.contain(pm.collectionVariables.get(\"hostToDisable\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3007] Check the disabled host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host that has been disabled cannot be accessed.\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostToDisableId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostToDisableId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3007] Enable disabled host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host has been enabled.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"enable\",\n  \"object\": \"host\",\n  \"values\": \"{{hostToDisable}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3007] Show hosts after host enable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of configured hosts has been succesfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host that we enabled is listed as such in the list.\", function() {\r",
											"    for(let count = 0; count < responseJson.result.length; count++) {\r",
											"        if(responseJson.result[count].name == pm.collectionVariables.get(\"hostToDisable\")) {\r",
											"            pm.expect(parseInt(responseJson.result[count].activate)).to.eql(1);\r",
											"        }\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"host\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3007] Export configuration after host enable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3007] Export configuration after host enable\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [3000]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3007] List all hosts in real-time monitoring after host enable\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3007] List all hosts in real-time monitoring after host enable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts in real-time monitoring has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host has been enabled and is now back to being listed.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"hostsCreated\").length);\r",
											"    let table = [];\r",
											"    for(let count = 0; count < responseJson.result.length; count++) {\r",
											"        table.push(responseJson.result[count].name);\r",
											"    }\r",
											"    pm.expect(table).to.contain(pm.collectionVariables.get(\"hostToDisable\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3007] Batch delete hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[3007] Batch delete hosts\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"hostToDisable\");\r",
											"    pm.collectionVariables.unset(\"hostToDisableId\");\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"hostsCreated\");\r",
											"    postman.setNextRequest(\"[3007] Export configuration after batch host deletion\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"let currentHost = hostsCreated.shift();\r",
											"pm.collectionVariables.set(\"currentHost\", currentHost);\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3007] Export configuration after batch host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3007] Export configuration after batch host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3007-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3007-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3008 - Assigning host groups to a host",
					"item": [
						{
							"name": "[3008] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3008] Create a new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \", IP address \" + pm.collectionVariables.get(\"hostIpAddr\") + \" and template \" + pm.collectionVariables.get(\"hostTemplate\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-3008\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", \"127.0.0.1\");\r",
											"pm.collectionVariables.set(\"hostTemplate\", \"generic-active-host-custom\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};{{hostIpAddr}};{{hostTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3008] Get host ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of configured hosts has been fetched.\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"hostID\", parseInt(responseJson.result[0].id));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"host\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3008] Add a new host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new host group with name \" + pm.collectionVariables.get(\"hostGroupName\") + \" has been added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostGroupName\", \"HG-Test-API-3008\");\r",
											"pm.collectionVariables.set(\"hostGroupAlias\", \"Host Group API Tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}};{{hostGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3008] Assign a host group to the selected host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host group has been successfully assigned to the host.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"sethostgroup\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3008] Get host groups for the selected host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host groups assigned to the host has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"This host has one group associated with it: the host group that we assigned in the previous request.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostGroupName\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"gethostgroup\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3008] Export configuration after host creation and host group assignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [3000]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3008] Check the host groups assigned to the host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Information about the host's assigned host groups have been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"This host has one group associated with it: the host group that we assigned in the previous request.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostGroupName\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/hostgroups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"hostgroups"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3008] Delete the new host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host group with name \" + pm.collectionVariables.get(\"hostGroupName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostGroupName\");\r",
											"    pm.collectionVariables.unset(\"hostGroupAlias\");   \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3008] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostAlias\");  \r",
											"    pm.collectionVariables.unset(\"hostID\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3008] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    setTimeout(function(){}, [500]);\r",
											"    postman.setNextRequest(\"[3008] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3008-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3008-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3009 - Checking addhostgroup/sethostgroup properties on hosts",
					"item": [
						{
							"name": "[3009] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3009] Create a new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \", IP address \" + pm.collectionVariables.get(\"hostIpAddr\") + \" and template \" + pm.collectionVariables.get(\"hostTemplate\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-3008\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", \"127.0.0.1\");\r",
											"pm.collectionVariables.set(\"hostTemplate\", \"generic-active-host-custom\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};{{hostIpAddr}};{{hostTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3009] Get host ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of configured hosts has been fetched.\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"hostID\", parseInt(responseJson.result[0].id));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"host\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3009] Add two new host groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hostGroups = pm.collectionVariables.get(\"listOfHostGroupNames\");\r",
											"\r",
											"pm.test(\"Host group \" + pm.collectionVariables.get(\"currentHostGroup\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hostGroups && hostGroups.length > 0) {\r",
											"    pm.collectionVariables.set(\"hostGroupAdd\", pm.collectionVariables.get(\"currentHostGroup\"));\r",
											"    postman.setNextRequest(\"[3009] Add two new host groups\");\r",
											"} else {\r",
											"    pm.collectionVariables.set(\"hostGroupSet\", pm.collectionVariables.get(\"currentHostGroup\"));\r",
											"    pm.collectionVariables.unset(\"currentHostGroup\");\r",
											"    pm.collectionVariables.unset(\"listOfHostGroupNames\");\r",
											"    postman.setNextRequest(\"[3009] Assign the host to the first host group using addhostgroup\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let listOfHostGroupNames = pm.collectionVariables.get(\"listOfHostGroupNames\");\r",
											"\r",
											"if(!listOfHostGroupNames || listOfHostGroupNames.length == 0) {\r",
											"    listOfHostGroupNames = [\"hostGroupAdd-3009\", \"hostGroupSet-3009\"];\r",
											"}\r",
											"\r",
											"let currentHostGroup = listOfHostGroupNames.shift();\r",
											"pm.collectionVariables.set(\"currentHostGroup\", currentHostGroup);\r",
											"pm.collectionVariables.set(\"listOfHostGroupNames\", listOfHostGroupNames);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \"{{currentHostGroup}};{{currentHostGroup}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3009] Assign the host to the first host group using addhostgroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host group \" + pm.collectionVariables.get(\"hostGroupAdd\") + \" has been successfully assigned to the host.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addhostgroup\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostGroupAdd}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3009] Get host groups for the selected host after host group add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host groups assigned to the host has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"This host has one group associated with it: the host group that we assigned in the previous request.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostGroupAdd\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"gethostgroup\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3009] Assign the host to the second host group using sethostgroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host group \" + pm.collectionVariables.get(\"hostGroupSet\") + \" has been successfully assigned to the host.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"sethostgroup\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostGroupSet}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3009] Get host groups for the selected host after host group set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host groups assigned to the host has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"This host has one group associated with it: the host group that we assigned in the previous request, since the previous command has overwritten any previous definition of the host groups assigned to the host.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostGroupSet\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"gethostgroup\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3009] Assign the host to the first host group using second addhostgroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host group \" + pm.collectionVariables.get(\"hostGroupAdd\") + \" has been successfully assigned to the host.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addhostgroup\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostGroupAdd}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3009] Get host groups for the selected host after second host group add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host groups assigned to the host has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"This host has now two host groups associated with it.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostGroupSet\"));\r",
											"    pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"hostGroupAdd\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"gethostgroup\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3009] Delete the two host groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hostGroups = pm.collectionVariables.get(\"listOfHostGroupNames\");\r",
											"\r",
											"pm.test(\"Host group \" + pm.collectionVariables.get(\"currentHostGroup\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hostGroups && hostGroups.length > 0) {\r",
											"    pm.collectionVariables.unset(\"hostGroupAdd\");\r",
											"    postman.setNextRequest(\"[3009] Delete the two host groups\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"hostGroupSet\");\r",
											"    pm.collectionVariables.unset(\"currentHostGroup\");\r",
											"    pm.collectionVariables.unset(\"listOfHostGroupNames\");\r",
											"    postman.setNextRequest(\"[3009] Delete the new host\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let listOfHostGroupNames = pm.collectionVariables.get(\"listOfHostGroupNames\");\r",
											"\r",
											"if(!listOfHostGroupNames || listOfHostGroupNames.length == 0) {\r",
											"    listOfHostGroupNames = [pm.collectionVariables.get(\"hostGroupAdd\"), pm.collectionVariables.get(\"hostGroupSet\")];\r",
											"}\r",
											"\r",
											"let currentHostGroup = listOfHostGroupNames.shift();\r",
											"pm.collectionVariables.set(\"currentHostGroup\", currentHostGroup);\r",
											"pm.collectionVariables.set(\"listOfHostGroupNames\", listOfHostGroupNames);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hg\",\n  \"values\": \"{{currentHostGroup}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3009] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostAlias\");  \r",
											"    pm.collectionVariables.unset(\"hostID\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3009] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    setTimeout(function(){}, [500]);\r",
											"    postman.setNextRequest(\"[3009] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3009-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3009-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3010 - Adding parents to hosts",
					"item": [
						{
							"name": "[3010] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3010] Batch create several hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostList\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[3010] Batch create several hosts\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"hostList\");\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"IPAddressList\");\r",
											"    pm.collectionVariables.unset(\"currentIpAddr\");\r",
											"    pm.collectionVariables.unset(\"templateList\");\r",
											"    pm.collectionVariables.unset(\"currentTemplate\");\r",
											"    pm.collectionVariables.set(\"hostGrandParent\", pm.collectionVariables.get(\"hostsCreated\")[0]);\r",
											"    pm.collectionVariables.set(\"hostParent\", pm.collectionVariables.get(\"hostsCreated\")[1]);\r",
											"    pm.collectionVariables.set(\"hostChild\", pm.collectionVariables.get(\"hostsCreated\")[2]);\r",
											"    postman.setNextRequest(\"[3010] Export configuration after batch host creation\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hosts = pm.collectionVariables.get(\"hostList\");\r",
											"let IPAddresses = pm.collectionVariables.get(\"IPAddressList\");\r",
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"let templates = pm.collectionVariables.get(\"templateList\");\r",
											"\r",
											"if(!hosts || hosts.length == 0) {\r",
											"    hosts = [\"hostGrandParent\", \"hostParent\", \"hostChild\"];\r",
											"    hostsCreated = [];\r",
											"    IPAddresses = [pm.environment.get(\"server\"), \"127.0.0.1\", \"127.0.0.2\"];\r",
											"    templates = [\"app-monitoring-centreon-central-custom\", \"generic-active-host-custom\", \"generic-active-host-custom\"];\r",
											"}\r",
											"\r",
											"hostsCreated.push(hosts.shift());\r",
											"pm.collectionVariables.set(\"currentHost\", hostsCreated[hostsCreated.length - 1]);\r",
											"pm.collectionVariables.set(\"hostList\", hosts);\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);\r",
											"\r",
											"pm.collectionVariables.set(\"currentIpAddr\", IPAddresses.shift());\r",
											"pm.collectionVariables.set(\"IPAddressList\", IPAddresses);\r",
											"\r",
											"pm.collectionVariables.set(\"currentTemplate\", templates.shift());\r",
											"pm.collectionVariables.set(\"templateList\", templates);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}};{{currentHost}};{{currentIpAddr}};{{currentTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3010] Export configuration after batch host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3010] Export configuration after batch host creation\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3010] List all hosts after batch host creation\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3010] List all hosts after batch host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of hosts successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"All the hosts that were created are listed in real-time monitoring.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"hostsCreated\").length);\r",
											"    let nameGetter = [];\r",
											"    for (let count = 0; count < responseJson.result.length; count++) {\r",
											"        nameGetter.push(responseJson.result[count].name);\r",
											"    }\r",
											"    pm.expect(nameGetter).to.include(pm.collectionVariables.get(\"hostGrandParent\"));\r",
											"    pm.expect(nameGetter).to.include(pm.collectionVariables.get(\"hostParent\"));\r",
											"    pm.expect(nameGetter).to.include(pm.collectionVariables.get(\"hostChild\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3010] Add parent to parent host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostGrandParent\") + \" has been set as parent of host \" + pm.collectionVariables.get(\"hostParent\") + \".\", function (){\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addparent\",\n  \"object\": \"host\",\n  \"values\": \"{{hostParent}};{{hostGrandParent}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3010] Add child to parent host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostChild\") + \" has been set as child of host \" + pm.collectionVariables.get(\"hostParent\") + \".\", function (){\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addparent\",\n  \"object\": \"host\",\n  \"values\": \"{{hostChild}};{{hostParent}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3010] Export configuration after parent manipulations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3010] Export configuration after parent manipulations\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3010] Get parent of parent host\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3010] Get parent of parent host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of parents for this host has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host \" + pm.collectionVariables.get(\"hostGrandParent\") + \" is displayed.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostGrandParent\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getparent\",\n  \"object\": \"host\",\n  \"values\": \"{{hostParent}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3010] Get parent of child host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of parents for this host has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host \" + pm.collectionVariables.get(\"hostParent\") + \" is displayed, but the grandparent host \" + pm.collectionVariables.get(\"hostGrandParent\") + \" is not.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostParent\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getparent\",\n  \"object\": \"host\",\n  \"values\": \"{{hostChild}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3010] Batch delete hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[3010] Batch delete hosts\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"hostsCreated\");\r",
											"    postman.setNextRequest(\"[3010] Export configuration after batch host deletion\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"let currentHost = hostsCreated.shift();\r",
											"pm.collectionVariables.set(\"currentHost\", currentHost);\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3010] Export configuration after batch host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3010] Export configuration after batch host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3010-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3010-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3011 - Checking addparent/setparent properties on hosts",
					"item": [
						{
							"name": "[3011] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3011] Batch create several hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostList\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[3011] Batch create several hosts\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"hostList\");\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"IPAddressList\");\r",
											"    pm.collectionVariables.unset(\"currentIpAddr\");\r",
											"    pm.collectionVariables.unset(\"templateList\");\r",
											"    pm.collectionVariables.unset(\"currentTemplate\");\r",
											"    pm.collectionVariables.set(\"hostChild\", pm.collectionVariables.get(\"hostsCreated\")[0]);\r",
											"    pm.collectionVariables.set(\"hostParent1\", pm.collectionVariables.get(\"hostsCreated\")[1]);\r",
											"    pm.collectionVariables.set(\"hostParent2\", pm.collectionVariables.get(\"hostsCreated\")[2]);\r",
											"    postman.setNextRequest(\"[3011] Export configuration after batch host creation\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hosts = pm.collectionVariables.get(\"hostList\");\r",
											"let IPAddresses = pm.collectionVariables.get(\"IPAddressList\");\r",
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"let templates = pm.collectionVariables.get(\"templateList\");\r",
											"\r",
											"if(!hosts || hosts.length == 0) {\r",
											"    hosts = [\"3011-hostChild\", \"3011-hostParent1\", \"3011-hostParent2\"];\r",
											"    hostsCreated = [];\r",
											"    IPAddresses = [pm.environment.get(\"server\"), \"127.0.0.1\", \"127.0.0.2\"];\r",
											"    templates = [\"app-monitoring-centreon-central-custom\", \"generic-active-host-custom\", \"generic-active-host-custom\"];\r",
											"}\r",
											"\r",
											"hostsCreated.push(hosts.shift());\r",
											"pm.collectionVariables.set(\"currentHost\", hostsCreated[hostsCreated.length - 1]);\r",
											"pm.collectionVariables.set(\"hostList\", hosts);\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);\r",
											"\r",
											"pm.collectionVariables.set(\"currentIpAddr\", IPAddresses.shift());\r",
											"pm.collectionVariables.set(\"IPAddressList\", IPAddresses);\r",
											"\r",
											"pm.collectionVariables.set(\"currentTemplate\", templates.shift());\r",
											"pm.collectionVariables.set(\"templateList\", templates);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}};{{currentHost}};{{currentIpAddr}};{{currentTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3011] Export configuration after batch host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3011] Export configuration after batch host creation\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3011] List all hosts after batch host creation\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3011] List all hosts after batch host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of hosts successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"All the hosts that were created are listed in real-time monitoring.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"hostsCreated\").length);\r",
											"    let nameGetter = [];\r",
											"    for (let count = 0; count < responseJson.result.length; count++) {\r",
											"        nameGetter.push(responseJson.result[count].name);\r",
											"    }\r",
											"    pm.expect(nameGetter).to.include(pm.collectionVariables.get(\"hostChild\"));\r",
											"    pm.expect(nameGetter).to.include(pm.collectionVariables.get(\"hostParent1\"));\r",
											"    pm.expect(nameGetter).to.include(pm.collectionVariables.get(\"hostParent2\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3011] Assign first parent to host using addparent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostParent1\") + \" has been assigned as parent of host \" + pm.collectionVariables.get(\"hostChild\") + \".\", function (){\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addparent\",\n  \"object\": \"host\",\n  \"values\": \"{{hostChild}};{{hostParent1}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3011] Get parent of host after addparent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of parents for this host has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host \" + pm.collectionVariables.get(\"hostChild\") + \" has exactly one parent, that is, \" + pm.collectionVariables.get(\"hostParent1\") + \".\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostParent1\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getparent\",\n  \"object\": \"host\",\n  \"values\": \"{{hostChild}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3011] Assign second parent to host using setparent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostParent2\") + \" has been set as parent of host \" + pm.collectionVariables.get(\"hostChild\") + \".\", function (){\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setparent\",\n  \"object\": \"host\",\n  \"values\": \"{{hostChild}};{{hostParent2}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3011] Get parent of host after setparent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of parents for this host has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host \" + pm.collectionVariables.get(\"hostChild\") + \" has exactly one parent, that is, \" + pm.collectionVariables.get(\"hostParent2\") + \", which we assigned at the previous request, overwriting any previous definition.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostParent2\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getparent\",\n  \"object\": \"host\",\n  \"values\": \"{{hostChild}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3011] Assign first parent to host using second addparent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostParent1\") + \" has been added as parent of host \" + pm.collectionVariables.get(\"hostChild\") + \".\", function (){\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addparent\",\n  \"object\": \"host\",\n  \"values\": \"{{hostChild}};{{hostParent1}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3011] Get parent of host after second addparent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of parents for this host has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host now has both hosts as parents, which are listed in chronological order.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostParent2\"));\r",
											"    pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"hostParent1\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getparent\",\n  \"object\": \"host\",\n  \"values\": \"{{hostChild}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3011] Batch delete hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[3011] Batch delete hosts\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"hostsCreated\");\r",
											"    pm.collectionVariables.unset(\"hostParent1\");\r",
											"    pm.collectionVariables.unset(\"hostParent2\");\r",
											"    postman.setNextRequest(\"[3011] Export configuration after batch host deletion\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"let currentHost = hostsCreated.shift();\r",
											"pm.collectionVariables.set(\"currentHost\", currentHost);\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3011] Export configuration after batch host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3011] Export configuration after batch host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3011-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3011-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3012 - Checking the impossibility of cyclical parenting on hosts",
					"item": [
						{
							"name": "[3012] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3012] Create two hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostList\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[3012] Create two hosts\");\r",
											"    pm.collectionVariables.set(\"hostParent1\", pm.collectionVariables.get(\"currentHost\"));\r",
											"} else {\r",
											"    pm.collectionVariables.set(\"hostParent2\", pm.collectionVariables.get(\"currentHost\"));\r",
											"    pm.collectionVariables.unset(\"hostList\");\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"IPAddressList\");\r",
											"    pm.collectionVariables.unset(\"currentIpAddr\");\r",
											"    pm.collectionVariables.unset(\"templateList\");\r",
											"    pm.collectionVariables.unset(\"currentTemplate\");\r",
											"    postman.setNextRequest(\"[3012] Export configuration after host creation\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hosts = pm.collectionVariables.get(\"hostList\");\r",
											"let IPAddresses = pm.collectionVariables.get(\"IPAddressList\");\r",
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"let templates = pm.collectionVariables.get(\"templateList\");\r",
											"\r",
											"if(!hosts || hosts.length == 0) {\r",
											"    hosts = [\"3012-hostParent1\", \"3012-hostParent2\"];\r",
											"    hostsCreated = [];\r",
											"    IPAddresses = [\"127.0.0.1\", \"127.0.0.2\"];\r",
											"    templates = [\"generic-active-host-custom\", \"generic-active-host-custom\"];\r",
											"}\r",
											"\r",
											"hostsCreated.push(hosts.shift());\r",
											"pm.collectionVariables.set(\"currentHost\", hostsCreated[hostsCreated.length - 1]);\r",
											"pm.collectionVariables.set(\"hostList\", hosts);\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);\r",
											"\r",
											"pm.collectionVariables.set(\"currentIpAddr\", IPAddresses.shift());\r",
											"pm.collectionVariables.set(\"IPAddressList\", IPAddresses);\r",
											"\r",
											"pm.collectionVariables.set(\"currentTemplate\", templates.shift());\r",
											"pm.collectionVariables.set(\"templateList\", templates);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}};{{currentHost}};{{currentIpAddr}};{{currentTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3012] Export configuration after host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [3000]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3012] Assign first host as parent of second host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostParent1\") + \" has been assigned as parent of host \" + pm.collectionVariables.get(\"hostParent2\") + \".\", function (){\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setparent\",\n  \"object\": \"host\",\n  \"values\": \"{{hostParent2}};{{hostParent1}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3012] Assign second host as parent of first host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostParent2\") + \" has been assigned as parent of host \" + pm.collectionVariables.get(\"hostParent1\") + \" in config, as nothing prevents the application from reacting this way at this step.\", function (){\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setparent\",\n  \"object\": \"host\",\n  \"values\": \"{{hostParent1}};{{hostParent2}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3012] Trying to export configuration after host parent/child chain setup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"However, trying to export the configuration will result in an error about a parent/child chain being listed.\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"    pm.expect(responseJson).to.contain(\"Error: The host '\" + pm.collectionVariables.get(\"hostParent1\") + \"' is part of a circular parent/child chain!\");\r",
											"    pm.expect(responseJson).to.contain(\"Error: The host '\" + pm.collectionVariables.get(\"hostParent2\") + \"' is part of a circular parent/child chain!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3012] Unassign second host as parent of first host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostParent2\") + \" has been unassigned as parent of host \" + pm.collectionVariables.get(\"hostParent1\") + \".\", function (){\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"delparent\",\n  \"object\": \"host\",\n  \"values\": \"{{hostParent1}};{{hostParent2}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3012] Export configuration after removal of parent/child chain setup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [3000]);\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"After removal of the chain setup, the configuration can be successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.result).to.not.contain(\"Error: The host '\" + pm.collectionVariables.get(\"hostParent1\") + \"' is part of a circular parent/child chain!\");\r",
											"    pm.expect(responseJson.result).to.not.contain(\"Error: The host '\" + pm.collectionVariables.get(\"hostParent2\") + \"' is part of a circular parent/child chain!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3012] Get parent of first parent host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of parents for this host has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"No host should be displayed in this list.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(0);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getparent\",\n  \"object\": \"host\",\n  \"values\": \"{{hostParent1}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3012] Get parent of second parent host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of parents for this host has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host \" + pm.collectionVariables.get(\"hostParent1\") + \" is displayed.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostParent1\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getparent\",\n  \"object\": \"host\",\n  \"values\": \"{{hostParent2}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3012] Batch delete hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[3012] Batch delete hosts\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"hostsCreated\");\r",
											"    pm.collectionVariables.unset(\"hostParent1\");\r",
											"    pm.collectionVariables.unset(\"hostParent2\");\r",
											"    postman.setNextRequest(\"[3012] Export configuration after batch host deletion\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"let currentHost = hostsCreated.shift();\r",
											"pm.collectionVariables.set(\"currentHost\", currentHost);\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3012] Export configuration after batch host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3012] Export configuration after batch host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3012-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3012-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3013 - Adding contacts to hosts",
					"item": [
						{
							"name": "[3013] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3013] Create a new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-3013\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};127.0.0.1;generic-active-host-custom;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3013] Get host ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"hostID\", parseInt(responseJson.result[0].id));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"host\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3013] Add new non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user has been successfully created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserName\", \"User-Test-API-3013\");\r",
											"pm.collectionVariables.set(\"testUserLogin\", \"testUser\");\r",
											"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserName}};{{testUserLogin}};{{testUserEmail}};Centreon!2021;0;0;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3013] Set notification commands to user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"let values = pm.collectionVariables.get(\"listOfValues\");\r",
											"\r",
											"pm.collectionVariables.set(\"notificationTimePeriod\", \"workhours\");\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"hostnotifcmd\", \"svcnotifcmd\", \"hostnotifperiod\", \"svcnotifperiod\"];\r",
											"    values = [\"host-notify-by-email\", \"service-notify-by-email\", pm.collectionVariables.get(\"notificationTimePeriod\"), pm.collectionVariables.get(\"notificationTimePeriod\")];\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentParameter\", parameters.shift());\r",
											"pm.collectionVariables.set(\"listOfParameters\", parameters);\r",
											"\r",
											"pm.collectionVariables.set(\"currentValue\", values.shift());\r",
											"pm.collectionVariables.set(\"listOfValues\", values);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"\r",
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"currentParameter\") + \" was updated with \" + pm.collectionVariables.get(\"currentValue\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"[3013] Set notification commands to user\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentParameter\");\r",
											"    pm.collectionVariables.unset(\"currentValue\");\r",
											"    pm.collectionVariables.unset(\"listOfParameters\");\r",
											"    pm.collectionVariables.unset(\"listOfValues\");\r",
											"    postman.setNextRequest(\"[3013] Assign contact to host\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\":\"setparam\",\r\n  \"object\":\"contact\",\r\n  \"values\": \"{{testUserLogin}};{{currentParameter}};{{currentValue}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3013] Assign contact to host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The user \" + pm.collectionVariables.get(\"testUserName\") + \" has been assigned to the host \" + pm.collectionVariables.get(\"hostName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addcontact\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{testUserLogin}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3013] Get contact of host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of users associated to the host has been fetched\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();    \r",
											"pm.test(\"The user \" + pm.collectionVariables.get(\"testUserName\") + \" is listed is associated to the host \" + pm.collectionVariables.get(\"hostName\") + \".\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"testUserLogin\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getcontact\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3013] Export configuration after host creation and user assignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3013] Export configuration after host creation and user assignment\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3013] List information about the host's notification policy\");\r",
											"}   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3013] List information about the host's notification policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The notification policy for the selected host has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"It depicts the parameters we have set up for it.\", function() {\r",
											"    pm.expect(responseJson.contacts.length).to.eql(1);\r",
											"    pm.expect(responseJson.contacts[0].name).to.eql(pm.collectionVariables.get(\"testUserName\"));\r",
											"    pm.expect(responseJson.contacts[0].alias).to.eql(pm.collectionVariables.get(\"testUserLogin\"));\r",
											"    pm.expect(responseJson.contacts[0].email).to.eql(pm.collectionVariables.get(\"testUserEmail\"));\r",
											"    pm.collectionVariables.unset(\"testUserName\");\r",
											"    pm.collectionVariables.unset(\"testUserEmail\");\r",
											"    pm.expect(responseJson.contacts[0].notifications.host.time_period.name).to.eql(pm.collectionVariables.get(\"notificationTimePeriod\"));\r",
											"    pm.expect(responseJson.contacts[0].notifications.service.time_period.name).to.eql(pm.collectionVariables.get(\"notificationTimePeriod\"));\r",
											"    pm.collectionVariables.unset(\"notificationTimePeriod\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/{{hostID}}/notification-policy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"{{hostID}}",
										"notification-policy"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3013] Delete the non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserLogin\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"testUserLogin\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3013] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostID\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3013] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3013] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3013-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3013-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3014 - Checking addcontact/setcontact properties on hosts",
					"item": [
						{
							"name": "[3014] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3014] Add two new non-admin users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const users = pm.collectionVariables.get(\"userNames\");\r",
											"\r",
											"pm.test(\"User \" + pm.collectionVariables.get(\"currentUser\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (users && users.length > 0) {\r",
											"    pm.collectionVariables.set(\"userAdd\", pm.collectionVariables.get(\"currentUser\"));\r",
											"    postman.setNextRequest(\"[3014] Add two new non-admin users\");\r",
											"} else {\r",
											"    pm.collectionVariables.set(\"userSet\", pm.collectionVariables.get(\"currentUser\"));\r",
											"    pm.collectionVariables.unset(\"currentUser\");\r",
											"    pm.collectionVariables.unset(\"userNames\");\r",
											"    postman.setNextRequest(\"[3014] Create a new host\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let userNames = pm.collectionVariables.get(\"userNames\");\r",
											"\r",
											"if(!userNames || userNames.length == 0) {\r",
											"    userNames = [\"3014-userAdd\", \"3014-userSet\"];\r",
											"    usersCreated = [];\r",
											"}\r",
											"\r",
											"let currentUser = userNames.shift();\r",
											"pm.collectionVariables.set(\"currentUser\", currentUser);\r",
											"pm.collectionVariables.set(\"userNames\", userNames);\r",
											"usersCreated.push(currentUser);\r",
											"pm.collectionVariables.set(\"usersCreated\", usersCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{currentUser}};{{currentUser}};dummymail@centreon.com;Centreon!2021;0;0;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3014] Create a new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-3014\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};127.0.0.1;generic-active-host-custom;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3014] Assign first user to host using addcontact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The user \" + pm.collectionVariables.get(\"userAdd\") + \" has been assigned to the host \" + pm.collectionVariables.get(\"hostName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addcontact\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{userAdd}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3014] Get users assigned to host after addcontact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of contacts assigned to this host has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host \" + pm.collectionVariables.get(\"hostName\") + \" has exactly one user assigned to it, that is, \" + pm.collectionVariables.get(\"userAdd\") + \".\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"userAdd\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getcontact\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3014] Assign second user to host using setcontact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The user \" + pm.collectionVariables.get(\"userSet\") + \" has been assigned to the host \" + pm.collectionVariables.get(\"hostName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setcontact\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{userSet}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3014] Get users assigned to host after setcontact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of contacts assigned to this host has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host \" + pm.collectionVariables.get(\"hostName\") + \" has exactly one user assigned to it, that is, \" + pm.collectionVariables.get(\"userSet\") + \", which we assigned at the previous request, overwriting any previous definition.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"userSet\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getcontact\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3014] Assign first user to host using second addcontact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The user \" + pm.collectionVariables.get(\"userAdd\") + \" has been assigned to the host \" + pm.collectionVariables.get(\"hostName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addcontact\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{userAdd}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3014] Get users assigned to host after second addcontact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of contacts assigned to this host has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host now has both users assigned to it, which are listed in chronological order.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"userSet\"));\r",
											"    pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"userAdd\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getcontact\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3014] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostAlias\");   \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3014] Delete new non-admin users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const users = pm.collectionVariables.get(\"usersCreated\");\r",
											"\r",
											"pm.test(\"User \" + pm.collectionVariables.get(\"currentUser\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (users && users.length > 0) {\r",
											"    pm.collectionVariables.unset(\"userAdd\");\r",
											"    postman.setNextRequest(\"[3014] Delete new non-admin users\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"userSet\");\r",
											"    pm.collectionVariables.unset(\"usersCreated\");\r",
											"    pm.collectionVariables.unset(\"currentUser\");\r",
											"    postman.setNextRequest(\"[3014] Export configuration after host deletion\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let usersCreated = pm.collectionVariables.get(\"usersCreated\");\r",
											"pm.collectionVariables.set(\"currentUser\", usersCreated.shift());\r",
											"pm.collectionVariables.set(\"usersCreated\", usersCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{currentUser}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3014] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3014] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3014-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3014-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3015 - Adding contact groups to hosts",
					"item": [
						{
							"name": "[3015] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3015] Create a new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-3015\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};127.0.0.1;generic-active-host-custom;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3015] Get host ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"hostID\", parseInt(responseJson.result[0].id));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"host\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3015] Add new non-admin dummy users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const users = pm.collectionVariables.get(\"dummyUserNames\");\r",
											"\r",
											"pm.test(\"User \" + pm.collectionVariables.get(\"currentUser\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (users && users.length > 0) {\r",
											"    postman.setNextRequest(\"[3015] Add new non-admin dummy users\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentUser\");\r",
											"    pm.collectionVariables.unset(\"dummyUserNames\");\r",
											"    postman.setNextRequest(\"[3015] Create a new contact template\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let dummyUserNames = pm.collectionVariables.get(\"dummyUserNames\");\r",
											"\r",
											"if(!dummyUserNames || dummyUserNames.length == 0) {\r",
											"    dummyUserNames = [\"user01\", \"user02\", \"user03\", \"user04\", \"user05\"];\r",
											"    usersCreated = [];\r",
											"}\r",
											"\r",
											"let currentUser = dummyUserNames.shift();\r",
											"pm.collectionVariables.set(\"currentUser\", currentUser);\r",
											"pm.collectionVariables.set(\"dummyUserNames\", dummyUserNames);\r",
											"usersCreated.push(currentUser);\r",
											"pm.collectionVariables.set(\"usersCreated\", usersCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{currentUser}};{{currentUser}};dummymail@centreon.com;Centreon!2021;0;0;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3015] Create a new contact template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contact template \" + pm.collectionVariables.get(\"contactTemplateName\") + \" has been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"contactTemplateName\", \"CTPL-Test-API-3015\");\r",
											"pm.collectionVariables.set(\"contactTemplateAlias\", \"Contact_Template_for_API_Testing\");\r",
											"pm.collectionVariables.set(\"contactTemplateMail\", \"dummymail@centreon\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateName}};{{contactTemplateAlias}};{{contactTemplateMail}};0;1;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3015] Set parameters for the contact template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"\r",
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"currentParameter\") + \" was updated with \" + pm.collectionVariables.get(\"currentValue\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.collectionVariables.get(\"name\") && pm.collectionVariables.get(\"name\") != pm.collectionVariables.get(\"hostName\")) {\r",
											"    pm.collectionVariables.set(\"hostName\", pm.collectionVariables.get(\"name\"));\r",
											"}\r",
											"\r",
											"if (pm.collectionVariables.get(\"alias\") && pm.collectionVariables.get(\"alias\") != pm.collectionVariables.get(\"hostAlias\")) {\r",
											"    pm.collectionVariables.set(\"hostAlias\", pm.collectionVariables.get(\"alias\"));\r",
											"}\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"[3015] Set parameters for the contact template\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentParameter\");\r",
											"    pm.collectionVariables.unset(\"currentValue\");\r",
											"    pm.collectionVariables.unset(\"listOfParameters\");\r",
											"    pm.collectionVariables.unset(\"listOfValues\");\r",
											"    pm.collectionVariables.unset(\"notificationTimePeriod\");\r",
											"    postman.setNextRequest(\"[3015] Assign the contact template to dummy users\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"let values = pm.collectionVariables.get(\"listOfValues\");\r",
											"\r",
											"pm.collectionVariables.set(\"notificationTimePeriod\", \"workhours\");\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"hostnotifcmd\", \"svcnotifcmd\", \"hostnotifperiod\", \"svcnotifperiod\"];\r",
											"    values = [\"host-notify-by-email\", \"service-notify-by-email\", pm.collectionVariables.get(\"notificationTimePeriod\"), pm.collectionVariables.get(\"notificationTimePeriod\")];\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentParameter\", parameters.shift());\r",
											"pm.collectionVariables.set(\"listOfParameters\", parameters);\r",
											"\r",
											"pm.collectionVariables.set(\"currentValue\", values.shift());\r",
											"pm.collectionVariables.set(\"listOfValues\", values);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"contacttpl\",\n  \"values\":\"{{contactTemplateAlias}};{{currentParameter}};{{currentValue}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3015] Assign the contact template to dummy users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The user \" + pm.collectionVariables.get(\"currentUser\") + \" has been successfully assigned to the contact template \" + pm.collectionVariables.get(\"contactTemplateName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const users = pm.collectionVariables.get(\"dummyUserNames\");\r",
											"\r",
											"if (users && users.length > 0) {\r",
											"    postman.setNextRequest(\"[3015] Assign the contact template to dummy users\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentUser\");\r",
											"    pm.collectionVariables.unset(\"dummyUserNames\");\r",
											"    postman.setNextRequest(\"[3015] Add a new contact group\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let dummyUserNames = pm.collectionVariables.get(\"dummyUserNames\");\r",
											"\r",
											"if(!dummyUserNames || dummyUserNames.length == 0) {\r",
											"    dummyUserNames = pm.collectionVariables.get(\"usersCreated\");\r",
											"}\r",
											"\r",
											"let currentUser = dummyUserNames.shift();\r",
											"pm.collectionVariables.set(\"currentUser\", currentUser);\r",
											"pm.collectionVariables.set(\"dummyUserNames\", dummyUserNames);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"contact\",\n  \"values\":\"{{currentUser}};template;{{contactTemplateAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3015] Add a new contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contact group \" + pm.collectionVariables.get(\"contactGroupName\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"contactGroupName\", \"CG-Test-API-3015\");\r",
											"pm.collectionVariables.set(\"contactGroupAlias\", \"Contact Group Test API\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}};{{contactGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3015] Assign dummy users to contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The dummy users \" + pm.collectionVariables.get(\"usersCreated\") + \" have been successfully added to the contact group.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"listOfUsersToAddToContactGroup\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let usersCreated = pm.collectionVariables.get(\"usersCreated\");\r",
											"if (usersCreated || usersCreated.length != 0) {\r",
											"    var finalParameter = \"\";\r",
											"    for(var i = 0; i < usersCreated.length; i++) {\r",
											"        finalParameter = finalParameter.concat('|', usersCreated[i]);\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"listOfUsersToAddToContactGroup\", finalParameter.substring(1));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setcontact\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}};{{listOfUsersToAddToContactGroup}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3015] Assign contact group to host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The user \" + pm.collectionVariables.get(\"testUserName\") + \" has been assigned to the host \" + pm.collectionVariables.get(\"hostName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addcontactgroup\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{contactGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3015] Export configuration after host creation and contact group assignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3015] Export configuration after host creation and contact group assignment\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3015] List information about the host's notification policy\");\r",
											"}   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3015] List information about the host's notification policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The notification policy for the selected host has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"It depicts the parameters we have set up for it.\", function() {\r",
											"    postman.setNextRequest(null);\r",
											"    pm.expect(responseJson.contact_groups.length).to.eql(1);\r",
											"    pm.expect(responseJson.contact_groups[0].name).to.eql(pm.collectionVariables.get(\"contactGroupName\"));\r",
											"    pm.expect(responseJson.contact_groups[0].alias).to.eql(pm.collectionVariables.get(\"contactGroupAlias\"));\r",
											"    postman.setNextRequest(\"[3015] Delete the new contact group\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/{{hostID}}/notification-policy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"{{hostID}}",
										"notification-policy"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3015] Delete the new contact group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contact group \" + pm.collectionVariables.get(\"contactGroupName\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"contactGroupName\");\r",
											"    pm.collectionVariables.unset(\"contactGroupAlias\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3015] Delete the new contact template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contact template \" + pm.collectionVariables.get(\"contactTemplateName\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"contactTemplateName\");\r",
											"    pm.collectionVariables.unset(\"contactTemplateAlias\");\r",
											"    pm.collectionVariables.unset(\"contactTemplateMail\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3015] Delete new non-admin dummy users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const users = pm.collectionVariables.get(\"usersCreated\");\r",
											"\r",
											"pm.test(\"User \" + pm.collectionVariables.get(\"currentUser\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (users && users.length > 0) {\r",
											"    postman.setNextRequest(\"[3015] Delete new non-admin dummy users\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"usersCreated\");\r",
											"    pm.collectionVariables.unset(\"currentUser\");\r",
											"    postman.setNextRequest(\"[3015] Delete the new host\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let usersCreated = pm.collectionVariables.get(\"usersCreated\");\r",
											"pm.collectionVariables.set(\"currentUser\", usersCreated.shift());\r",
											"pm.collectionVariables.set(\"usersCreated\", usersCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{currentUser}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3015] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3015] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3015] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3015-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3015-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "31 - Host group management",
			"item": [
				{
					"name": "3101 - Adding a new host group in config",
					"item": [
						{
							"name": "[3101] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3101] List all host groups before host group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"numberOfHostGroupsBeforeCreation\", responseJson.meta.total);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3101] Add a new host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new host group with name \" + pm.collectionVariables.get(\"hostGroupName\") + \" has been added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostGroupName\", \"HG-Test-API-3101\");\r",
											"pm.collectionVariables.set(\"hostGroupAlias\", \"Host Group API Tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}};{{hostGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3101] List all host groups after host group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"A new host group has been added.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"numberOfHostGroupsBeforeCreation\") + 1);\r",
											"    pm.collectionVariables.unset(\"numberOfHostGroupsBeforeCreation\");\r",
											"})\r",
											"\r",
											"pm.test(\"This host group has the features we set for it.\", function() {\r",
											"    for (let count = 0; count < responseJson.result.length; count++) {\r",
											"        if(responseJson.result[count].name == pm.collectionVariables.get(\"hostGroupName\")) {\r",
											"            pm.expect(responseJson.result[count].name).to.eql(pm.collectionVariables.get(\"hostGroupName\"));\r",
											"            pm.expect(responseJson.result[count].alias).to.eql(pm.collectionVariables.get(\"hostGroupAlias\"));\r",
											"        }\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3101] Delete the host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host group with name \" + pm.collectionVariables.get(\"hostGroupName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostGroupName\");\r",
											"    pm.collectionVariables.unset(\"hostGroupAlias\");   \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3101-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3102 - Adding a host group with duplicate fields",
					"item": [
						{
							"name": "[3102] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3102] Add a new host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new host group with name \" + pm.collectionVariables.get(\"hostGroupName\") + \" has been added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostGroupName\", \"HG-Test-API-3102\");\r",
											"pm.collectionVariables.set(\"hostGroupAlias\", \"Host Group API Tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}};{{hostGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3102] Add a new host group with duplicate alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new host group with name \" + pm.collectionVariables.get(\"hostGroupNameBis\") + \" has been added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostGroupNameBis\", pm.collectionVariables.get(\"hostGroupName\").concat(\"\",\"-bis\"));\r",
											"pm.collectionVariables.set(\"hostGroupAlias\", \"Host Group API Tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupNameBis}};{{hostGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3102] Add a new host group with duplicate name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new host group with name \" + pm.collectionVariables.get(\"hostGroupName\") + \" could not be created since the name was already taken.\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.collectionVariables.unset(\"hostGroupAliasBis\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostGroupAliasBis\", \"Host Group API Tests - Duplicate Name\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}};{{hostGroupAliasBis}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3102] List the new host groups after host group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Two new host groups were added.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(2);\r",
											"})\r",
											"\r",
											"pm.test(\"These host groups have the same alias, but not the same name.\", function() {\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(responseJson.result[1].alias);\r",
											"    pm.expect(responseJson.result[0].name).to.not.eql(responseJson.result[1].name);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3102] Delete the host group with duplicate alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host group with name \" + pm.collectionVariables.get(\"hostGroupNameBis\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostGroupNameBis\");\r",
											"    pm.collectionVariables.unset(\"hostGroupAlias\");   \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupNameBis}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3102] Delete the original host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host group with name \" + pm.collectionVariables.get(\"hostGroupName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostGroupName\");});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3102-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3103 - Adding a host group with empty fields",
					"item": [
						{
							"name": "[3103] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3103] Add a new host group with empty alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the alias field is not mandatory for host groups, a host group with an empty alias has been created successfully.\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostGroupName\", \"HG-Test-API-3103\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}};\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3103] List all host groups following host group with empty alias creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"There is a single host group in the list, and it has an empty alias.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostGroupName\"));\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(\"\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3103] Delete the host group with empty alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host group with name \" + pm.collectionVariables.get(\"hostGroupName\") + \"and empty alias has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostGroupName\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3103] Add a new host group with empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the name is an obligatory field for a host group, a host group with an empty name could not be added.\", function() {\r",
											"    pm.response.to.not.have.status(200);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostGroupAlias\", \"Host Group for API Tests - Empty name\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \";{{hostGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3103] List all host groups before after host group with empty name creation attempt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"There is no host group in the list.\", function() {\r",
											"    postman.setNextRequest(\"[3103-DEBUG] Delete the host group with an empty name\");\r",
											"    pm.expect(responseJson.result.length).to.eql(0);\r",
											"    pm.collectionVariables.unset(\"hostGroupAlias\");\r",
											"    postman.setNextRequest(\"[3103-aftermath] Logout from admin user\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3103-DEBUG] Delete the host group with an empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"[DEBUG] Host group with empty name has been successfully deleted.\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.unset(\"hostGroupAlias\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hg\",\n  \"values\": \"\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3103-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"user\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "3104 - Assigning hosts to a host group",
					"item": [
						{
							"name": "[3104] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3104] Add a new host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new host group with name \" + pm.collectionVariables.get(\"hostGroupName\") + \" has been added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostGroupName\", \"HG-Test-API-3104\");\r",
											"pm.collectionVariables.set(\"hostGroupAlias\", \"Host Group API Tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}};{{hostGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3104] Create a new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-3104\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", \"127.0.0.1\");\r",
											"pm.collectionVariables.set(\"hostTemplate\", \"generic-active-host-custom\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};{{hostIpAddr}};{{hostTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3104] Assign the newly created host to the host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \" has successfully been assigned to the host group \" + pm.collectionVariables.get(\"hostGroupName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setmember\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}};{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3104] List the hosts assigned to the host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts assigned to the host group has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"A single host is assigned to the host group, and it is the one we have assigned for it.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostName\"));\r",
											"    pm.collectionVariables.set(\"hostID\", parseInt(responseJson.result[0].id));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getmember\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3104] Export configuration after host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3104] List all host groups assigned to the newly created host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of host groups successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"This host is assigned to exactly one host group and it is the one we have assigned for it.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostGroupName\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/hostgroups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"hostgroups"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3104] Delete the host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostIpAddr\");\r",
											"    pm.collectionVariables.unset(\"hostTemplate\");\r",
											"    pm.collectionVariables.unset(\"hostID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3104] Delete the host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host group \" + pm.collectionVariables.get(\"hostGroupName\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostGroupName\");\r",
											"    pm.collectionVariables.unset(\"hostGroupAlias\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3104] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3104] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3104-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3104-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3105 - Checking addmember/setmember properties on host groups",
					"item": [
						{
							"name": "[3105] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3105] Add two new hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"listOfHostNames\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    pm.collectionVariables.set(\"hostAdd\", pm.collectionVariables.get(\"currentHost\"));\r",
											"    postman.setNextRequest(\"[3105] Add two new hosts\");\r",
											"} else {\r",
											"    pm.collectionVariables.set(\"hostSet\", pm.collectionVariables.get(\"currentHost\"));\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"listOfHostNames\");\r",
											"    postman.setNextRequest(\"[3105] Add a new host group\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let listOfHostNames = pm.collectionVariables.get(\"listOfHostNames\");\r",
											"\r",
											"if(!listOfHostNames || listOfHostNames.length == 0) {\r",
											"    listOfHostNames = [\"hostAdd-3105\", \"hostSet-3105\"];\r",
											"}\r",
											"\r",
											"let currentHost = listOfHostNames.shift();\r",
											"pm.collectionVariables.set(\"currentHost\", currentHost);\r",
											"pm.collectionVariables.set(\"listOfHostNames\", listOfHostNames);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}};{{currentHost}};127.0.0.1;generic-active-host-custom;Central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3105] Add a new host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new host group with name \" + pm.collectionVariables.get(\"hostGroupName\") + \" has been added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostGroupName\", \"HG-Test-API-3105\");\r",
											"pm.collectionVariables.set(\"hostGroupAlias\", \"Host Group API Tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}};{{hostGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3105] Add the first created host to the host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostAdd\") + \" has successfully been added to the host group \" + pm.collectionVariables.get(\"hostGroupName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addmember\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}};{{hostAdd}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3105] Export configuration after host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3105] List the hosts assigned to the host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts assigned to the host group has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"A single host is assigned to the host group, and it is the one we have assigned for it.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostAdd\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getmember\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3105] Set the second created host to the host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostSet\") + \" has successfully been set to the host group \" + pm.collectionVariables.get(\"hostGroupName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setmember\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}};{{hostSet}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3105] List the hosts assigned to the host group after host set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts assigned to the host group has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The only listed host is \" + pm.collectionVariables.get(\"hostSet\") + \", since the previous command has overwritten any previous definition of what is inside the host group.\" , function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostSet\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getmember\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3105] Delete the host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host group \" + pm.collectionVariables.get(\"hostGroupName\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostGroupName\");\r",
											"    pm.collectionVariables.unset(\"hostGroupAlias\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3105] Delete the two hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"listOfHostNames\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    pm.collectionVariables.unset(\"hostAdd\");\r",
											"    postman.setNextRequest(\"[3105] Delete the two hosts\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"hostSet\");\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"listOfHostNames\");\r",
											"    postman.setNextRequest(\"[3105] Export configuration after host deletion\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let listOfHostNames = pm.collectionVariables.get(\"listOfHostNames\");\r",
											"\r",
											"if(!listOfHostNames || listOfHostNames.length == 0) {\r",
											"    listOfHostNames = [pm.collectionVariables.get(\"hostAdd\"), pm.collectionVariables.get(\"hostSet\")];\r",
											"}\r",
											"\r",
											"let currentHost = listOfHostNames.shift();\r",
											"pm.collectionVariables.set(\"currentHost\", currentHost);\r",
											"pm.collectionVariables.set(\"listOfHostNames\", listOfHostNames);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3105] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3105] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3105-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3105-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3106 - Disabling/enabling a host group",
					"item": [
						{
							"name": "[3106] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3106] Add a new host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new host group with name \" + pm.collectionVariables.get(\"hostGroupName\") + \" has been added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostGroupName\", \"HG-Test-API-3106\");\r",
											"pm.collectionVariables.set(\"hostGroupAlias\", \"Host Group API Tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}};{{hostGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3106] List all host groups after host group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host group has been created and is listed.\", function() {\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostGroupName\"));\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(pm.collectionVariables.get(\"hostGroupAlias\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								},
								"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3106] Disable new host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host group \" + pm.collectionVariables.get(\"hostGroupName\") + \" has been successfully disabled.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"disable\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3106] List all host groups after host group disable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host group is listed, but has been disabled.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostGroupName\"));\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(pm.collectionVariables.get(\"hostGroupAlias\"));\r",
											"    pm.expect(responseJson.result[0].is_activated).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								},
								"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3106] Enable the disabled host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host group \" + pm.collectionVariables.get(\"hostGroupName\") + \" has been successfully disabled.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"disable\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3106] List all host groups after host group enabling",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host group is listed and is back to being enabled.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostGroupName\"));\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(pm.collectionVariables.get(\"hostGroupAlias\"));\r",
											"    pm.expect(responseJson.result[0].is_activated).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								},
								"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3106] Delete the host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host group \" + pm.collectionVariables.get(\"hostGroupName\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostGroupName\");\r",
											"    pm.collectionVariables.unset(\"hostGroupAlias\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3106-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3107 - Setting and getting parameters for a host group [v1]",
					"item": [
						{
							"name": "[3107] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3107] Add a new host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new host group with name \" + pm.collectionVariables.get(\"hostGroupName\") + \" has been added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostGroupName\", \"HG-Test-API-3107\");\r",
											"pm.collectionVariables.set(\"hostGroupAlias\", \"Host Group API Tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}};{{hostGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3107] Get the host group before host update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Information about the newly created host group has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.meta.total).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostGroupName\"));\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(pm.collectionVariables.get(\"hostGroupAlias\"));\r",
											"    pm.collectionVariables.set(\"hostGroupId\", responseJson.result[0].id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups?search={\"name\":\"{{hostGroupName}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"name\":\"{{hostGroupName}}\"}"
										}
									]
								},
								"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3107] Set parameters for newly created host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"\r",
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"currentParameter\") + \" was updated with \" + pm.collectionVariables.get(\"currentValue\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.collectionVariables.get(\"name\") && pm.collectionVariables.get(\"name\") != pm.collectionVariables.get(\"hostGroupName\")) {\r",
											"    pm.collectionVariables.set(\"hostGroupName\", pm.collectionVariables.get(\"name\"));\r",
											"}\r",
											"\r",
											"if (pm.collectionVariables.get(\"alias\") && pm.collectionVariables.get(\"alias\") != pm.collectionVariables.get(\"hostGroupAlias\")) {\r",
											"    pm.collectionVariables.set(\"hostGroupAlias\", pm.collectionVariables.get(\"alias\"));\r",
											"}\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"[3107] Set parameters for newly created host group\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentParameter\");\r",
											"    pm.collectionVariables.unset(\"currentValue\");\r",
											"    pm.collectionVariables.unset(\"listOfParameters\");\r",
											"    pm.collectionVariables.unset(\"listOfValues\");\r",
											"    postman.setNextRequest(\"[3107] Get parameters of newly created host group\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"let values = pm.collectionVariables.get(\"listOfValues\");\r",
											"let parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"alias\", \"activate\", \"notes\", \"notes_url\", \"action_url\", \"comment\"];\r",
											"    values = [\"HG-3107-New-Alias\", 1, \"my_notes\",\"my_note_url\",\"my_action_url\", \"my_comment\"];\r",
											"    parametersToCheck = [];\r",
											"}\r",
											"\r",
											"let currentParameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"currentParameter\", currentParameter);\r",
											"pm.collectionVariables.set(\"listOfParameters\", parameters);\r",
											"\r",
											"let currentValue = values.shift();\r",
											"pm.collectionVariables.set(\"currentValue\", currentValue);\r",
											"pm.collectionVariables.set(\"listOfValues\", values);\r",
											"\r",
											"pm.collectionVariables.set(currentParameter, currentValue);\r",
											"\r",
											"parametersToCheck.push(currentParameter);\r",
											"pm.collectionVariables.set(\"parametersToCheck\", parametersToCheck);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setparam\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}};{{currentParameter}};{{currentValue}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3107] Get parameters of newly created host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Parameters about the host group successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"listOfParametersToCheck\");\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"const keys = Object.keys(responseJson.result[0]);\r",
											"const values = Object.values(responseJson.result[0]);\r",
											"var parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"let parametersChecked = 0;\r",
											"\r",
											"for (let count = 0; count < parametersToCheck.length; count++) {\r",
											"    var indexOfParameterInResponse = keys.indexOf(parametersToCheck[count]);\r",
											"    if(indexOfParameterInResponse != -1) {\r",
											"        pm.test(\"Parameter \" + parametersToCheck[count] + \" now has value \" + pm.collectionVariables.get(parametersToCheck[count]), function() {\r",
											"            if (typeof pm.collectionVariables.get(parametersToCheck[count]) === 'number') {\r",
											"                pm.expect(pm.collectionVariables.get(parametersToCheck[count])).to.eql(parseInt(values[indexOfParameterInResponse]));\r",
											"            } else {\r",
											"                pm.expect(pm.collectionVariables.get(parametersToCheck[count])).to.eql(values[indexOfParameterInResponse]);\r",
											"            }\r",
											"            pm.collectionVariables.unset(parametersToCheck[count]);\r",
											"            parametersChecked++;\r",
											"        }) \r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"All parameters have been checked.\", function() {\r",
											"    pm.expect(parametersChecked).to.eql(parametersToCheck.length);\r",
											"    pm.collectionVariables.unset(\"parametersToCheck\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"if (parametersToCheck || parametersToCheck.length != 0) {\r",
											"    let finalParameter = \"\";\r",
											"    for(let count = 0; count < parametersToCheck.length; count++) {\r",
											"        finalParameter = finalParameter.concat('|', parametersToCheck[count]); \r",
											"    }\r",
											"    pm.collectionVariables.set(\"listOfParametersToCheck\", finalParameter.substring(1));\r",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"getparam\",\n  \"object\":\"hg\",\n  \"values\": \"{{hostGroupName}};{{listOfParametersToCheck}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3107] Delete the host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host group \" + pm.collectionVariables.get(\"hostGroupName\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostGroupName\");\r",
											"    pm.collectionVariables.unset(\"hostGroupAlias\");\r",
											"    pm.collectionVariables.unset(\"hostGroupId\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3107-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3108 - Setting and getting parameters for a host group [v2]",
					"item": [
						{
							"name": "[3108] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3108] Add a new host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new host group with name \" + pm.collectionVariables.get(\"hostGroupName\") + \" has been added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostGroupName\", \"HG-Test-API-3108\");\r",
											"pm.collectionVariables.set(\"hostGroupAlias\", \"Host Group API Tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}};{{hostGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3108] Get the host group before host update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Information about the newly created host group has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.meta.total).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostGroupName\"));\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(pm.collectionVariables.get(\"hostGroupAlias\"));\r",
											"    pm.collectionVariables.set(\"hostGroupId\", responseJson.result[0].id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups?search={\"name\":\"{{hostGroupName}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"name\":\"{{hostGroupName}}\"}"
										}
									]
								},
								"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3108] Set parameters for newly created host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"\r",
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"currentParameter\") + \" was updated with \" + pm.collectionVariables.get(\"currentValue\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.collectionVariables.get(\"name\") && pm.collectionVariables.get(\"name\") != pm.collectionVariables.get(\"hostGroupName\")) {\r",
											"    pm.collectionVariables.set(\"hostGroupName\", pm.collectionVariables.get(\"name\"));\r",
											"}\r",
											"\r",
											"if (pm.collectionVariables.get(\"alias\") && pm.collectionVariables.get(\"alias\") != pm.collectionVariables.get(\"hostGroupAlias\")) {\r",
											"    pm.collectionVariables.set(\"hostGroupAlias\", pm.collectionVariables.get(\"alias\"));\r",
											"}\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"[3108] Set parameters for newly created host group\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentParameter\");\r",
											"    pm.collectionVariables.unset(\"currentValue\");\r",
											"    pm.collectionVariables.unset(\"listOfParameters\");\r",
											"    pm.collectionVariables.unset(\"listOfValues\");\r",
											"    postman.setNextRequest(\"[3108] List the host group with updated parameters\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"let values = pm.collectionVariables.get(\"listOfValues\");\r",
											"let parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"alias\", \"activate\", \"notes\", \"notes_url\", \"action_url\", \"icon_image\", \"map_icon_image\", \"comment\"];\r",
											"    values = [\"HG-3108-New-Alias\", 1, \"my_notes\",\"my_note_url\",\"my_action_url\",\"ppm/applications-monitoring-centreon-poller-centreon-128-2.png\",\"ppm/applications-monitoring-centreon-poller-centreon-128-2.png\", \"my_comment\"];\r",
											"    parametersToCheck = [];\r",
											"}\r",
											"\r",
											"let currentParameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"currentParameter\", currentParameter);\r",
											"pm.collectionVariables.set(\"listOfParameters\", parameters);\r",
											"\r",
											"let currentValue = values.shift();\r",
											"pm.collectionVariables.set(\"currentValue\", currentValue);\r",
											"pm.collectionVariables.set(\"listOfValues\", values);\r",
											"\r",
											"pm.collectionVariables.set(currentParameter, currentValue);\r",
											"\r",
											"parametersToCheck.push(currentParameter);\r",
											"pm.collectionVariables.set(\"parametersToCheck\", parametersToCheck);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setparam\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}};{{currentParameter}};{{currentValue}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3108] List the host group with updated parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Information about the newly created host group has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.meta.total).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostGroupName\"));\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(pm.collectionVariables.get(\"hostGroupAlias\"));\r",
											"});\r",
											"\r",
											"const keys = Object.keys(responseJson.result[0]);\r",
											"const values = Object.values(responseJson.result[0]);\r",
											"let parametersChecked = 0;\r",
											"\r",
											"let parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"for(let count = 0; count < parametersToCheck.length; count++) {\r",
											"    pm.test(\"The value \" + pm.collectionVariables.get(parametersToCheck[count])  + \" was found for \" + pm.collectionVariables.get(\"hostGroupName\") + \"'s parameter \" + parametersToCheck[count], function() {\r",
											"        var indexOfParameterInResponse = keys.indexOf(parametersToCheck[count]);\r",
											"        if(indexOfParameterInResponse != -1) {\r",
											"            pm.expect(pm.collectionVariables.get(parametersToCheck[count])).to.eql(values[indexOfParameterInResponse]);\r",
											"        } else {\r",
											"            switch (parametersToCheck[count]) {\r",
											"                case 'icon_image':\r",
											"                pm.expect(responseJson.result[0].icon.path).to.contain(pm.collectionVariables.get(parametersToCheck[count]));\r",
											"                break;\r",
											"                case 'map_icon_image':\r",
											"                pm.expect(responseJson.result[0].icon_map.path).to.contain(pm.collectionVariables.get(parametersToCheck[count]));\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"        pm.collectionVariables.unset(parametersToCheck[count]);\r",
											"        parametersChecked++;\r",
											"    })\r",
											"}\r",
											"\r",
											"pm.test(\"All parameters have been checked.\", function() {\r",
											"    pm.expect(parametersChecked).to.eql(parametersToCheck.length);\r",
											"    pm.collectionVariables.unset(\"parametersToCheck\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"\r",
											"if(parametersToCheck) {\r",
											"    for (let count = 0; count < parametersToCheck.length; count++) {\r",
											"        switch (parametersToCheck[count]) {\r",
											"            case 'activate': \r",
											"                if (pm.collectionVariables.get(\"activate\") == 1) {\r",
											"                    pm.collectionVariables.set(\"is_activated\", true);\r",
											"                } else {pm.collectionVariables.set(\"is_activated\", false);}\r",
											"                pm.collectionVariables.unset(\"activate\");\r",
											"                parametersToCheck[count] = \"is_activated\";\r",
											"                break;\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"parametersToCheck\", parametersToCheck);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups?search={\"id\":\"{{hostGroupId}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"id\":\"{{hostGroupId}}\"}"
										}
									]
								},
								"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3108] Delete the host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host group \" + pm.collectionVariables.get(\"hostGroupName\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostGroupName\");\r",
											"    pm.collectionVariables.unset(\"hostGroupAlias\");\r",
											"    pm.collectionVariables.unset(\"hostGroupId\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hg\",\n  \"values\": \"{{hostGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3108-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "32 - Host template management",
			"item": [
				{
					"name": "3201 - List existing host templates",
					"item": [
						{
							"name": "[3201] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3201] Listing all available host templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host templates has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"It is not empty, proving that the end-user already has several plugin packs installed.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.not.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3201] Get information about the generic-active-host template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host templates has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"It specifically lists a single host template, which is generic-active-host.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(\"generic-active-host\");\r",
											"    pm.collectionVariables.set(\"genericActivehostID\", responseJson.result[0].id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/templates?search={\"name\":\"generic-active-host\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"templates"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"name\":\"generic-active-host\"}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3201] Get information about the generic-active-host-custom template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host templates has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"It specifically lists a single host template, which is generic-active-host-custom.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(\"generic-active-host-custom\");\r",
											"});\r",
											"\r",
											"pm.test(\"It is the child of the standard generic-active-host template.\", function() {\r",
											"    pm.expect(responseJson.result[0].parent_ids[0]).to.eql(pm.collectionVariables.get(\"genericActivehostID\"));\r",
											"    pm.collectionVariables.unset(\"genericActivehostID\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/templates?search={\"name\":\"generic-active-host-custom\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"templates"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"name\":\"generic-active-host-custom\"}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3201-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3202 - Adding a new host template",
					"item": [
						{
							"name": "[3202] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3202] Listing all available host templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host templates has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"It is not empty, proving that the end-user already has several plugin packs installed.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.not.eql(0);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"numberOfHostTemplates\", responseJson.meta.total);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3202] Create a new host template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host template with name \" + pm.collectionVariables.get(\"hostTemplateName\") + \" and alias \" + pm.collectionVariables.get(\"hostTemplateName\") + \" has been successfully created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostTemplateName\", \"HT-TEST-API-3202\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"htpl\",\n  \"values\": \"{{hostTemplateName}};{{hostTemplateName}};;;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3202] Listing all available host templates after host template creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host templates has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"A new host template has been created, since the number of listed host templates just increased.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"numberOfHostTemplates\") + 1);\r",
											"    pm.collectionVariables.unset(\"numberOfHostTemplates\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3202] List information about this specific new template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host templates has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200); \r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Given the search parameters that we input, a single host template has been returned.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"The new template is indeed in the list, with the information we provided when creating it.\", function() {\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostTemplateName\"));\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(pm.collectionVariables.get(\"hostTemplateName\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/templates?search={\"name\":\"{{hostTemplateName}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"templates"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"name\":\"{{hostTemplateName}}\"}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3202] Delete the new host template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host template with name \" + pm.collectionVariables.get(\"hostTemplateName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostTemplateName\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostTemplateName\", \"HT-TEST-API-3202\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"htpl\",\n  \"values\": \"{{hostTemplateName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3202-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3203 - Adding a new host template with duplicate fields",
					"item": [
						{
							"name": "[3203] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3203] List all available host templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host templates has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"It is not empty, proving that the end-user already has several plugin packs installed.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.not.eql(0);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"numberOfHostTemplates\", responseJson.meta.total);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3203] Create a new host template with defined characteristics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host template with name \" + pm.collectionVariables.get(\"hostTemplateName\") + \", alias \" + pm.collectionVariables.get(\"hostTemplateAlias\") + \" and IP address \" + pm.collectionVariables.get(\"hostTemplateIPAddr\") + \" has been successfully created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostTemplateName\", \"HT-API-Test-3203\");\r",
											"pm.collectionVariables.set(\"hostTemplateAlias\", \"Host_Template_For_API_Tests\");\r",
											"pm.collectionVariables.set(\"hostTemplateIPAddr\", \"0.0.0.0\");\r",
											"\r",
											"pm.collectionVariables.set(\"hostTemplateNameBis\", pm.collectionVariables.get(\"hostTemplateName\").concat(\"\", \"-bis\"));\r",
											"pm.collectionVariables.set(\"hostTemplateAliasBis\", pm.collectionVariables.get(\"hostTemplateAlias\").concat(\"\",\"-bis\"));\r",
											"pm.collectionVariables.set(\"hostTemplateIPAddrBis\", \"1.0.0.0\");\r",
											"\r",
											"pm.collectionVariables.set(\"hostTemplateNameTer\", pm.collectionVariables.get(\"hostTemplateName\").concat(\"\", \"-ter\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"htpl\",\n  \"values\": \"{{hostTemplateName}};{{hostTemplateAlias}};{{hostTemplateIPAddr}};;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3203] Create a new host template with the same name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the name \" + pm.collectionVariables.get(\"hostTemplateName\") + \" has been already taken by another host template, this host template creation request has not ended successfully.\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"htpl\",\n  \"values\": \"{{hostTemplateName}};{{hostTemplateAliasBis}};{{hostTemplateIPAddrBis}};;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3203] Create a new host template with the same alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the alias is not a field that must have a unique value, a new host template has been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"htpl\",\n  \"values\": \"{{hostTemplateNameBis}};{{hostTemplateAlias}};{{hostTemplateIPAddrBis}};;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3203] Create a new host template with the same IP Address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the IP Address is not a field that must have a unique value, a new host template has been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"htpl\",\n  \"values\": \"{{hostTemplateNameTer}};{{hostTemplateAliasBis}};{{hostTemplateIPAddr}};;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3203] List all available host templates after host creation tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host templates has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Three new host templates have been created.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"numberOfHostTemplates\") + 3);\r",
											"    pm.collectionVariables.unset(\"numberOfHostTemplates\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3203] Batch delete the created host templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const listOfHostTemplatesToDelete = pm.collectionVariables.get(\"listOfHostTemplatesToDelete\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (listOfHostTemplatesToDelete && listOfHostTemplatesToDelete.length > 0) {\r",
											"    postman.setNextRequest(\"[3203] Batch delete the created host templates\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentHostTemplate\");\r",
											"    pm.collectionVariables.unset(\"listOfHostTemplatesToDelete\");\r",
											"    pm.collectionVariables.unset(\"hostTemplateName\");\r",
											"    pm.collectionVariables.unset(\"hostTemplateNameBis\");\r",
											"    pm.collectionVariables.unset(\"hostTemplateNameTer\");\r",
											"    pm.collectionVariables.unset(\"hostTemplateAlias\");\r",
											"    pm.collectionVariables.unset(\"hostTemplateAliasBis\");\r",
											"    pm.collectionVariables.unset(\"hostTemplateIPAddr\");\r",
											"    pm.collectionVariables.unset(\"hostTemplateIPAddrBis\");\r",
											"    postman.setNextRequest(\"[3203-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let listOfHostTemplatesToDelete = pm.collectionVariables.get(\"listOfHostTemplatesToDelete\");\r",
											"\r",
											"if(!listOfHostTemplatesToDelete || listOfHostTemplatesToDelete.length == 0) {\r",
											"    listOfHostTemplatesToDelete = [pm.collectionVariables.get(\"hostTemplateName\"), pm.collectionVariables.get(\"hostTemplateNameBis\"), pm.collectionVariables.get(\"hostTemplateNameTer\")];\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentHostTemplate\", listOfHostTemplatesToDelete.shift());\r",
											"pm.collectionVariables.set(\"listOfHostTemplatesToDelete\", listOfHostTemplatesToDelete);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"htpl\",\n  \"values\": \"{{currentHostTemplate}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3203-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3204 - Adding a new host template with empty mandatory fields",
					"item": [
						{
							"name": "[3204] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3204] List all available host templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host templates has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"It is not empty, proving that the end-user already has several plugin packs installed.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.not.eql(0);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"numberOfHostTemplates\", responseJson.meta.total);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3204] Create a new host template with an empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the name is a mandatory field, this host template creation request has not ended successfully.\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostTemplateAlias\", \"Host_Template_For_API_Tests\");\r",
											"pm.collectionVariables.set(\"hostTemplateIPAddr\", \"0.0.0.0\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"htpl\",\n  \"values\": \";{{hostTemplateAlias}};{{hostTemplateIPAddr}};;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3204] Create a new host template with an empty alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the alias is a mandatory field, this host template creation request has not ended successfully.\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostTemplateNameNoAlias\", \"HT-API-Test-3204-No-Alias\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"htpl\",\n  \"values\": \"{{hostTemplateNameNoAlias}};;{{hostTemplateIPAddr}};;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3204] Create a new host template with an empty IP address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the IP Address is not a mandatory field, this new host template has been created successfully.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostTemplateNameNoIPAddr\", \"HT-API-Test-3204-No-IP-Addr\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"htpl\",\n  \"values\": \"{{hostTemplateNameNoIPAddr}};{{hostTemplateAlias}};;;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3204] List all available host templates after host creation tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host templates has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"One new host templates has been created, which should be the one with an empty IP address.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"numberOfHostTemplates\") + 1);\r",
											"    pm.collectionVariables.unset(\"numberOfHostTemplates\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3204] Batch delete the created host templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const listOfHostTemplatesToDelete = pm.collectionVariables.get(\"listOfHostTemplatesToDelete\");\r",
											"\r",
											"pm.test(\"Host template \" + pm.collectionVariables.get(\"currentHostTemplate\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (listOfHostTemplatesToDelete && listOfHostTemplatesToDelete.length > 0) {\r",
											"    postman.setNextRequest(\"[3204] Batch delete the created host templates\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentHostTemplate\");\r",
											"    pm.collectionVariables.unset(\"listOfHostTemplatesToDelete\");\r",
											"    pm.collectionVariables.unset(\"hostTemplateAlias\");\r",
											"    pm.collectionVariables.unset(\"hostTemplateNameNoAlias\");\r",
											"    pm.collectionVariables.unset(\"hostTemplateIPAddr\");\r",
											"    pm.collectionVariables.unset(\"hostTemplateNameNoIPAddr\");\r",
											"    pm.collectionVariables.unset(\"numberOfHostTemplates\");\r",
											"    postman.setNextRequest(\"[3204-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let listOfHostTemplatesToDelete = pm.collectionVariables.get(\"listOfHostTemplatesToDelete\");\r",
											"\r",
											"if(!listOfHostTemplatesToDelete || listOfHostTemplatesToDelete.length == 0) {\r",
											"    listOfHostTemplatesToDelete = [\"\", pm.collectionVariables.get(\"hostTemplateNameNoAlias\"), pm.collectionVariables.get(\"hostTemplateNameNoIPAddr\")];\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentHostTemplate\", listOfHostTemplatesToDelete.shift());\r",
											"pm.collectionVariables.set(\"listOfHostTemplatesToDelete\", listOfHostTemplatesToDelete);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"htpl\",\n  \"values\": \"{{currentHostTemplate}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3204-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "33 - Host category management",
			"item": [
				{
					"name": "3301 - Creating a new host category",
					"item": [
						{
							"name": "[3301] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3301] List all host categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host categories has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"categories"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "List of all host category configurations\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"categories"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"host-category\",\n      \"alias\": \"host-category\",\n      \"is_activated\": false,\n      \"comments\": \"minim laborum\"\n    },\n    {\n      \"id\": 1,\n      \"name\": \"host-category\",\n      \"alias\": \"host-category\",\n      \"is_activated\": true,\n      \"comments\": \"nisi Ut velit id\"\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"categories"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"categories"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3301] Add host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host category with name \" + pm.collectionVariables.get(\"hostCategoryName\") + \" and alias \" + pm.collectionVariables.get(\"hostCategoryAlias\") + \" has been successfully added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostCategoryName\", \"HC-TEST-API-3301\");\r",
											"pm.collectionVariables.set(\"hostCategoryAlias\", \"Host_Category_For_API_Tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hc\",\n  \"values\": \"{{hostCategoryName}};{{hostCategoryAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3301] List all host categories after host category creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host categories has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"for (let count = 0; count < responseJson.result.length; count++) {\r",
											"    if(pm.collectionVariables.get(\"hostCategoryName\") == responseJson.result[count].name) {\r",
											"        pm.test(\"Newly created host category is registered in the list and is enabled.\", function() {\r",
											"            pm.expect(pm.collectionVariables.get(\"hostCategoryName\")).to.eql(responseJson.result[count].name);\r",
											"            pm.expect(pm.collectionVariables.get(\"hostCategoryAlias\")).to.eql(responseJson.result[count].alias);\r",
											"            pm.expect(responseJson.result[count].is_activated).to.eql(true);\r",
											"        });\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"categories"
									]
								},
								"description": "List of all host category configurations\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"categories"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"host-category\",\n      \"alias\": \"host-category\",\n      \"is_activated\": false,\n      \"comments\": \"minim laborum\"\n    },\n    {\n      \"id\": 1,\n      \"name\": \"host-category\",\n      \"alias\": \"host-category\",\n      \"is_activated\": true,\n      \"comments\": \"nisi Ut velit id\"\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"categories"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"categories"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3301] Delete host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host category with name \" + pm.collectionVariables.get(\"hostCategoryName\") + \" and alias \" + pm.collectionVariables.get(\"hostCategoryAlias\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostCategoryName\");\r",
											"    pm.collectionVariables.unset(\"hostCategoryAlias\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hc\",\n  \"values\": \"{{hostCategoryName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3301-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3302 - Creating host categories with duplicate fields",
					"item": [
						{
							"name": "[3302] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3302] Add host category with defined characteristics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host category with name \" + pm.collectionVariables.get(\"hostCategoryName\") + \" and alias \" + pm.collectionVariables.get(\"hostCategoryAlias\") + \" has been successfully added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostCategoryName\", \"HC-TEST-API-3302\");\r",
											"pm.collectionVariables.set(\"hostCategoryNameBis\", pm.collectionVariables.get(\"hostCategoryName\").concat(\"\", \"-bis\"));\r",
											"\r",
											"pm.collectionVariables.set(\"hostCategoryAlias\", \"Host_Category_For_API_Tests\");\r",
											"pm.collectionVariables.set(\"hostCategoryAliasBis\", pm.collectionVariables.get(\"hostCategoryAlias\").concat(\"\", \"-bis\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hc\",\n  \"values\": \"{{hostCategoryName}};{{hostCategoryAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3302] Add host category with duplicate name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the name \" + pm.collectionVariables.get(\"hostCategoryName\") + \" is already taken by another host category, the resource has not been created.\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hc\",\n  \"values\": \"{{hostCategoryName}};{{hostCategoryAliasBis}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3302] Add host category with duplicate alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the alias is not a unique identifier, the host with name \" + pm.collectionVariables.get(\"hostCategoryNameBis\") + \" has been successfully created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hc\",\n  \"values\": \"{{hostCategoryNameBis}};{{hostCategoryAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3302] List all host categories after host category creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host categories has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"There should be two available host categories, each with the same alias but a different name.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(2);\r",
											"    pm.expect(responseJson.result[0].name).to.not.eql(responseJson.result[1].name);\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(responseJson.result[1].alias);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"categories"
									]
								},
								"description": "List of all host category configurations\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"categories"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"host-category\",\n      \"alias\": \"host-category\",\n      \"is_activated\": false,\n      \"comments\": \"minim laborum\"\n    },\n    {\n      \"id\": 1,\n      \"name\": \"host-category\",\n      \"alias\": \"host-category\",\n      \"is_activated\": true,\n      \"comments\": \"nisi Ut velit id\"\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"categories"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"categories"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3302] Delete host categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hostCategories = pm.collectionVariables.get(\"hostCategories\");\r",
											"\r",
											"pm.test(\"Host category \" + pm.collectionVariables.get(\"currentHostCategory\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hostCategories && hostCategories.length > 0) {\r",
											"    postman.setNextRequest(\"[3302] Delete host categories\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentHosCategory\");\r",
											"    pm.collectionVariables.unset(\"hostCategories\");\r",
											"    pm.collectionVariables.unset(\"hostCategoryName\");\r",
											"    pm.collectionVariables.unset(\"hostCategoryNameBis\");\r",
											"    pm.collectionVariables.unset(\"hostCategoryAlias\");\r",
											"    pm.collectionVariables.unset(\"hostCategoryAliasBis\");\r",
											"    postman.setNextRequest(\"[3302-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"hostCategories = pm.collectionVariables.get(\"hostCategories\");\r",
											"\r",
											"if(!hostCategories || hostCategories.length == 0) {\r",
											"    hostCategories = [pm.collectionVariables.get(\"hostCategoryName\"), pm.collectionVariables.get(\"hostCategoryNameBis\")];\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentHostCategory\", hostCategories.shift());\r",
											"pm.collectionVariables.set(\"hostCategories\", hostCategories);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hc\",\n  \"values\": \"{{currentHostCategory}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3302-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3303 - Creating host categories with empty fields",
					"item": [
						{
							"name": "[3303] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3303] Add host category with empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the name is a mandatory field, a host category with an empty name could not have been added.\", function () {\r",
											"    postman.setNextRequest(\"[3303-DEBUG] Delete host category with empty name\");\r",
											"    pm.response.to.not.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostCategoryAlias\");\r",
											"    postman.setNextRequest(\"[3303] Add host category with empty alias\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostCategoryAlias\", \"Host_Category_For_API_Tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hc\",\n  \"values\": \";{{hostCategoryAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3303-DEBUG] Delete host category with empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.unset(\"hostCategoryAlias\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hc\",\n  \"values\": \"\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3303] Add host category with empty alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the name is a mandatory field, a host category with an empty name could not have been added.\", function () {\r",
											"    postman.setNextRequest(\"[3303-DEBUG] Delete host category with empty alias\");\r",
											"    pm.response.to.not.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostCategoryName\");\r",
											"    postman.setNextRequest(\"[3303-aftermath] Logout from admin user\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostCategoryName\", \"HC-TEST-API-3303\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hc\",\n  \"values\": \"{{hostCategoryName}};\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3303-DEBUG] Delete host category with empty alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.unset(\"hostCategoryName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hc\",\n  \"values\": \"{{hostCategoryName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3303-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3304 - Adding members to a host category",
					"item": [
						{
							"name": "[3304] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3304] Add host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host category with name \" + pm.collectionVariables.get(\"hostCategoryName\") + \" and alias \" + pm.collectionVariables.get(\"hostCategoryAlias\") + \" has been successfully added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostCategoryName\", \"HC-TEST-API-3304\");\r",
											"pm.collectionVariables.set(\"hostCategoryAlias\", \"Host_Category_For_API_Tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hc\",\n  \"values\": \"{{hostCategoryName}};{{hostCategoryAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3304] Create dummy hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostList\");\r",
											"\r",
											"pm.test(\"Dummy host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[3304] Create dummy hosts\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"hostList\");\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"hostIPAddrList\");\r",
											"    pm.collectionVariables.unset(\"currentIpAddr\");\r",
											"    postman.setNextRequest(\"[3304] Set members to newly created host category\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hosts = pm.collectionVariables.get(\"hostList\");\r",
											"let hostIPAddrList = pm.collectionVariables.get(\"hostIPAddrList\");\r",
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"if(!hosts || hosts.length == 0) {\r",
											"    hosts = [\"central\", \"host_name_1\", \"host_name_2\", \"host_name_3\", \"host_name_4\"];\r",
											"    hostsCreated = [];\r",
											"    ipAddresses = [pm.collectionVariables.get(\"server\"), \"127.0.0.1\", \"127.0.0.2\", \"127.0.0.3\", \"127.0.0.4\"];\r",
											"}\r",
											"\r",
											"let currentHost = hosts.shift();\r",
											"pm.collectionVariables.set(\"currentHost\", currentHost);\r",
											"pm.collectionVariables.set(\"hostList\", hosts);\r",
											"hostsCreated.push(currentHost);\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);\r",
											"\r",
											"let currentIpAddr = ipAddresses.shift();\r",
											"pm.collectionVariables.set(\"currentIpAddr\", currentIpAddr);\r",
											"pm.collectionVariables.set(\"hostIPAddrList\", ipAddresses);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}};{{currentHost}};{{currentIpAddr}};generic-active-host-custom;central;;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3304] Set members to newly created host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Dummy hosts successfully added to host category.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"listOfHostsToAddToHostCategory\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"let finalParameter = \"\";\r",
											"for(let count = 0; count < hostsCreated.length; count++) {\r",
											"        finalParameter = finalParameter.concat('|', hostsCreated[count]);\r",
											"}\r",
											"pm.collectionVariables.set(\"listOfHostsToAddToHostCategory\", finalParameter.substring(1));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setmember\",\n  \"object\": \"hc\",\n  \"values\": \"{{hostCategoryName}};{{listOfHostsToAddToHostCategory}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3304] Export configuration after batch host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3304] Get members of newly created host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts assigned to this host category has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"This list contains all the members we previously assigned to this category.\", function () {\r",
											"    pm.expect(responseJson.result.length).to.eql(pm.collectionVariables.get(\"hostsCreated\").length);\r",
											"    for(let count = 0; count < responseJson.result.length; count++) {\r",
											"        pm.expect(responseJson.result[count].name).to.eql(pm.collectionVariables.get(\"hostsCreated\")[count]);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getmember\",\n  \"object\": \"hc\",\n  \"values\": \"{{hostCategoryName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3304] Batch delete hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[3304] Batch delete hosts\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"hostsCreated\");\r",
											"    postman.setNextRequest(\"[3304] Delete host category\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"let currentHost = hostsCreated.shift();\r",
											"pm.collectionVariables.set(\"currentHost\", currentHost);\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3304] Delete host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host category with name \" + pm.collectionVariables.get(\"hostCategoryName\") + \" and alias \" + pm.collectionVariables.get(\"hostCategoryAlias\") + \" has been successfully added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostCategoryName\");\r",
											"    pm.collectionVariables.unset(\"hostCategoryAlias\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hc\",\n  \"values\": \"{{hostCategoryName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3304] Export configuration after batch host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3304] Export configuration after batch host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3304-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3304-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3305 - Turning a host category into a severity",
					"item": [
						{
							"name": "[3305] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3305] Add host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host category with name \" + pm.collectionVariables.get(\"hostCategoryName\") + \" and alias \" + pm.collectionVariables.get(\"hostCategoryAlias\") + \" has been successfully added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostCategoryName\", \"HC-TEST-API-3305\");\r",
											"pm.collectionVariables.set(\"hostCategoryAlias\", \"Host_Category_For_API_Tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hc\",\n  \"values\": \"{{hostCategoryName}};{{hostCategoryAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3305] Set severity to host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Severity successfully set on host category.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostSeverityLevel\", 2);\r",
											"pm.collectionVariables.set(\"hostSeverityIcon\", \"ppm/applications-monitoring-centreon-central-centreon-128-2.png\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setseverity\",\n  \"object\": \"hc\",\n  \"values\": \"{{hostCategoryName}};{{hostSeverityLevel}};{{hostSeverityIcon}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3305] Attempt to get host severity in configuration using host category request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of host categories successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Since the host category has been turned into a severity, it is not listed anymore in the host categories list.\", function(){\r",
											"    pm.expect(responseJson.result.length).to.eql(0);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"categories"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3305] Get host severity in configuration using severity request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of host categories in real-time monitoring successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Using the proper request, what we created earlier is now listed as a severity.\", function(){\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostCategoryName\"));\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(pm.collectionVariables.get(\"hostCategoryAlias\"));\r",
											"})\r",
											"\r",
											"pm.test(\"It has the proper features we set for it when we turned it into a severity.\", function() {\r",
											"    pm.expect(responseJson.result[0].level).to.eql(pm.collectionVariables.get(\"hostSeverityLevel\"));\r",
											"    pm.expect(responseJson.result[0].icon.path).to.include(pm.collectionVariables.get(\"hostSeverityIcon\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/severities",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"severities"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3305] Export configuration after severity set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3305] Attempt to get host severity in real-time monitoring using host category request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of host categories in real-time monitoring successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Likewise, it is not listed anymore in real-time monitoring.\", function(){\r",
											"    pm.expect(responseJson.result.length).to.eql(0);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"categories"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3305] Get host severity in real-time monitoring using severity request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of host categories in real-time monitoring successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Using the proper request, what we created earlier is now listed as a severity in real-time monitoring.\", function(){\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostCategoryName\"));\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(pm.collectionVariables.get(\"hostCategoryAlias\"));\r",
											"})\r",
											"\r",
											"pm.test(\"It has the proper features we set for it when we turned it into a severity.\", function() {\r",
											"    pm.expect(responseJson.result[0].level).to.eql(pm.collectionVariables.get(\"hostSeverityLevel\"));\r",
											"    pm.expect(responseJson.result[0].icon.path).to.include(pm.collectionVariables.get(\"hostSeverityIcon\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/severities",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"severities"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3305] Unset severity to host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Severity successfully unset on host category.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostSeverityLevel\");\r",
											"    pm.collectionVariables.unset(\"hostSeverityIcon\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"unsetseverity\",\n  \"object\": \"hc\",\n  \"values\": \"{{hostCategoryName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3305] Get host severity in configuration using host category request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of host categories successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Since the severity has been turned back into a host cattegory, it is now listed in the host categories list.\", function(){\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"hostCategoryName\"));\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(pm.collectionVariables.get(\"hostCategoryAlias\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"categories"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3305] Attempt to get host category in configuration using severity request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of host categories in real-time monitoring successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Since the severity has been turned back into a regular host category, it is not listed anymore in the severities list.\", function(){\r",
											"    pm.expect(responseJson.result.length).to.eql(0);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/severities",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"severities"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3305] Delete host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host category with name \" + pm.collectionVariables.get(\"hostCategoryName\") + \" and alias \" + pm.collectionVariables.get(\"hostCategoryAlias\") + \" has been successfully added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostCategoryName\");\r",
											"    pm.collectionVariables.unset(\"hostCategoryAlias\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hc\",\n  \"values\": \"{{hostCategoryName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3305] Export configuration after host category deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3305] Export configuration after host category deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3305-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3305-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "3306 - Adding a severity level on a host",
					"item": [
						{
							"name": "[3306] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[3306] Add host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host category with name \" + pm.collectionVariables.get(\"hostCategoryName\") + \" and alias \" + pm.collectionVariables.get(\"hostCategoryAlias\") + \" has been successfully added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostCategoryName\", \"HC-TEST-API-3306\");\r",
											"pm.collectionVariables.set(\"hostCategoryAlias\", \"Host_Category_For_API_Tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hc\",\n  \"values\": \"{{hostCategoryName}};{{hostCategoryAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3306] Create a new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \", IP address \" + pm.collectionVariables.get(\"hostIpAddr\") + \" and template \" + pm.collectionVariables.get(\"hostTemplate\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-3306\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", \"127.0.0.1\");\r",
											"pm.collectionVariables.set(\"hostTemplate\", \"generic-active-host-custom\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};{{hostIpAddr}};{{hostTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3306] Set severity to host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Severity successfully set on host category.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostSeverity\", 2);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setseverity\",\n  \"object\": \"hc\",\n  \"values\": \"{{hostCategoryName}};{{hostSeverity}};ppm/applications-monitoring-centreon-central-centreon-128-2.png\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3306] Add host to host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host has been successfully added to the host category.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setmember\",\n  \"object\": \"hc\",\n  \"values\": \"{{hostCategoryName}};{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3306] Export configuration after batch host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [5000]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3306] Get host ID and check if the severity is correctly displayed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of hosts successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The criticality associated with the host is what we previously set.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].criticality).to.eql(pm.collectionVariables.get(\"hostSeverity\"));\r",
											"})\r",
											"\r",
											"pm.collectionVariables.set(\"hostID\", responseJson.result[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?search={\"host.name\":\"{{hostName}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										},
										{
											"key": "search",
											"value": "{\"host.name\":\"{{hostName}}\"}"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3306] Get information about the host's severity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of hosts successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The criticality associated with the host is what we previously set.\", function() {\r",
											"    pm.expect(responseJson.criticality).to.eql(pm.collectionVariables.get(\"hostSeverity\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[3306] Delete host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host category with name \" + pm.collectionVariables.get(\"hostCategoryName\") + \" and alias \" + pm.collectionVariables.get(\"hostCategoryAlias\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostCategoryName\");\r",
											"    pm.collectionVariables.unset(\"hostCategoryAlias\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hc\",\n  \"values\": \"{{hostCategoryName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3306] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostAlias\");   \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3306] Export configuration after host and host category deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[3306] Export configuration after host and host category deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[3306-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[3306-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "40 - Service management",
			"item": [
				{
					"name": "4001 - Adding a new service from a host",
					"item": [
						{
							"name": "[4001] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[4001] Create a new templateless host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \", IP address \" + pm.collectionVariables.get(\"hostIpAddr\") + \" and no template has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-4001\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", \"127.0.0.1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};{{hostIpAddr}};;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4001] Export configuration after host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4001] List all hosts after host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host has been created.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.collectionVariables.set(\"hostID\", responseJson.result[0].id);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[4001] List all services the host currently has",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of services assigned to the host has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Although a host was created, no service has been created.\", function() {\r",
											"    pm.expect(responseJson.services).to.be.empty;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[4001] Create a new service assigned to the host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Service \" + pm.collectionVariables.get(\"serviceDescription\") + \", with template \" + pm.collectionVariables.get(\"serviceTemplate\") + \" has been added and assigned to \" + pm.collectionVariables.get(\"hostName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceDescription\", \"Service-Test-API-4001\");\r",
											"pm.collectionVariables.set(\"serviceTemplate\", \"Base-Ping-LAN\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}};{{serviceTemplate}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4001] List service templates and get command about template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of service templates successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"for(let count = 0; count < responseJson.result.length; count++) {\r",
											"    if(responseJson.result[count].description == pm.collectionVariables.get(\"serviceTemplate\")) {\r",
											"        pm.collectionVariables.set(\"serviceCommand\", responseJson.result[count][\"check command\"]);\r",
											"        break;\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"stpl\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4001] Export configuration after service creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4001] Get information about the host after service creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The service has been created and assigned to the host.\", function() {\r",
											"    pm.expect(responseJson.services).to.not.be.empty;\r",
											"    pm.expect(responseJson.services[0].description).to.eql(pm.collectionVariables.get(\"serviceDescription\"));\r",
											"    pm.collectionVariables.set(\"serviceID\", responseJson.services[0].id);\r",
											"})\r",
											"\r",
											"console.log(pm.collectionVariables.get(\"serviceCommand\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[4001] List all services and check whether the new service is listed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The service has been successfully created and is listed.\", function() {\r",
											"    pm.expect(responseJson.result).to.not.be.empty;\r",
											"    pm.expect(responseJson.result[0].description).to.eql(pm.collectionVariables.get(\"serviceDescription\"));\r",
											"    pm.expect(responseJson.result[0].id).to.eql(pm.collectionVariables.get(\"serviceID\"));\r",
											"})\r",
											"\r",
											"pm.test(\"The service is correctly assigned to the host.\", function() {\r",
											"    pm.expect(responseJson.result[0].host.id).to.eql(pm.collectionVariables.get(\"hostID\"));\r",
											"    pm.expect(responseJson.result[0].host.name).to.eql(pm.collectionVariables.get(\"hostName\"));\r",
											"    pm.expect(responseJson.result[0].host.alias).to.eql(pm.collectionVariables.get(\"hostName\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4001] Get information about the host's services after service creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of services attached to the host \" + pm.collectionVariables.get(\"hostID\") + \" has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The service has been created and assigned to the host, and can be found in the list of host's services.\", function() {\r",
											"    pm.expect(responseJson.result).to.not.be.empty;\r",
											"    pm.expect(responseJson.result[0].description).to.eql(pm.collectionVariables.get(\"serviceDescription\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4001] Get information about this specific service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The service has been created and assigned to the host, and can be found in the list of host's services.\", function() {\r",
											"    pm.expect(responseJson.description).to.eql(pm.collectionVariables.get(\"serviceDescription\"));\r",
											"    pm.expect(responseJson.check_command).to.eql(pm.collectionVariables.get(\"serviceCommand\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/services/{{serviceID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"services",
										"{{serviceID}}"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4001] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostID\");\r",
											"    pm.collectionVariables.unset(\"hostIpAddr\");\r",
											"    pm.collectionVariables.unset(\"serviceCommand\");\r",
											"    pm.collectionVariables.unset(\"serviceDescription\");\r",
											"    pm.collectionVariables.unset(\"serviceID\");\r",
											"    pm.collectionVariables.unset(\"serviceTemplate\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4001] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[4001] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[4001] List all services after host deletion\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4001] List all services after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Since the host has been deleted, the service assigned to it has been automatically deleted as well.\", function() {\r",
											"    pm.expect(responseJson.result).to.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4001-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "4002 - Generating services from a host template",
					"item": [
						{
							"name": "[4002] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[4002] Create a new host with a template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \", IP address \" + pm.collectionVariables.get(\"hostIpAddr\") + \" and with template \" + pm.collectionVariables.get(\"hostTemplate\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-4002\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", pm.environment.get(\"server\"));\r",
											"pm.collectionVariables.set(\"hostTemplate\", \"App-Monitoring-Centreon-Central-custom\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};{{hostIpAddr}};{{hostTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4002] Export configuration after host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4002] List all services after host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Although a host with a template has been created, no service has been created.\", function() {\r",
											"    pm.expect(responseJson.result).to.be.empty;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4002] Get the host's ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Information about the new host has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"hostID\", responseJson.result[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?search={host.name:\"{{hostName}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "search",
											"value": "{host.name:\"{{hostName}}\"}",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4002] Apply host template on host to generate services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The template \" + pm.collectionVariables.get(\"hostTemplate\") + \" has been successfully applied to the host \" + pm.collectionVariables.get(\"hostName\") + \", and as such new services were created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"applytpl\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4002] Export configuration after template application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4002] List all services after template application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Since the template has been applied, new services have been created.\", function() {\r",
											"    pm.expect(responseJson.result).to.not.be.empty;\r",
											"})\r",
											"\r",
											"let descriptionGetter = [];\r",
											"pm.test(\"All of these services are related to the same host, that is, the one we created.\", function() {\r",
											"    for(let count = 0; count < responseJson.result.length; count++) {\r",
											"        pm.expect(responseJson.result[count].host.id).to.eql(pm.collectionVariables.get(\"hostID\"))\r",
											"        descriptionGetter.push(responseJson.result[count].description);\r",
											"    }\r",
											"})\r",
											"\r",
											"pm.test(\"Each of these services has a unique description and function.\", function() {\r",
											"    for(let count1 = 0; count1 < descriptionGetter.length - 1; count1++) {\r",
											"        for(let count2 = count1 + 1; count2 < descriptionGetter.length; count2++) {\r",
											"            pm.expect(descriptionGetter[count2]).to.not.eql(descriptionGetter[count1]);\r",
											"        }\r",
											"    }\r",
											"})\r",
											"// probably need to refacto this later on "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4002] Delete the new host and its assigned services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostID\");\r",
											"    pm.collectionVariables.unset(\"hostIpAddr\");\r",
											"    pm.collectionVariables.unset(\"hostTemplate\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4002] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[4002] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[4002-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4002-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "4003 - Applying a template on a host that already has pre-configured services",
					"item": [
						{
							"name": "[4003] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[4003] Create two hosts with the same template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostList\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[4003] Create two hosts with the same template\");\r",
											"    pm.collectionVariables.set(\"hostTemplateService1\", pm.collectionVariables.get(\"currentHost\"));\r",
											"} else {\r",
											"    pm.collectionVariables.set(\"hostTemplateService2\", pm.collectionVariables.get(\"currentHost\"));\r",
											"    pm.collectionVariables.unset(\"hostList\");\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"IPAddressList\");\r",
											"    pm.collectionVariables.unset(\"currentIpAddr\");\r",
											"    pm.collectionVariables.unset(\"templateList\");\r",
											"    pm.collectionVariables.unset(\"currentTemplate\");\r",
											"    postman.setNextRequest(\"[4003] Add a ping service on the first host\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hosts = pm.collectionVariables.get(\"hostList\");\r",
											"let IPAddresses = pm.collectionVariables.get(\"IPAddressList\");\r",
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"let templates = pm.collectionVariables.get(\"templateList\");\r",
											"\r",
											"if(!hosts || hosts.length == 0) {\r",
											"    hosts = [\"4003-hostTemplateService1\", \"4003-hostTemplateService2\"];\r",
											"    hostsCreated = [];\r",
											"    IPAddresses = [pm.environment.get(\"server\"), pm.environment.get(\"server\")];\r",
											"    templates = [\"App-Monitoring-Centreon-Central-custom\", \"App-Monitoring-Centreon-Central-custom\"];\r",
											"}\r",
											"\r",
											"hostsCreated.push(hosts.shift());\r",
											"pm.collectionVariables.set(\"currentHost\", hostsCreated[hostsCreated.length - 1]);\r",
											"pm.collectionVariables.set(\"hostList\", hosts);\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);\r",
											"\r",
											"pm.collectionVariables.set(\"currentIpAddr\", IPAddresses.shift());\r",
											"pm.collectionVariables.set(\"IPAddressList\", IPAddresses);\r",
											"\r",
											"pm.collectionVariables.set(\"currentTemplate\", templates.shift());\r",
											"pm.collectionVariables.set(\"templateList\", templates);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}};{{currentHost}};{{currentIpAddr}};{{currentTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4003] Add a ping service on the first host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Service \" + pm.collectionVariables.get(\"serviceDescription\") + \", with template \" + pm.collectionVariables.get(\"serviceTemplate\") + \" has been added and assigned to \" + pm.collectionVariables.get(\"hostTemplateService1\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceDescription\", \"Service-Test-API-4003\");\r",
											"pm.collectionVariables.set(\"serviceTemplate\", \"Base-Ping-LAN\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"service\",\n  \"values\": \"{{hostTemplateService1}};{{serviceDescription}};{{serviceTemplate}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4003] Apply host template on host to generate services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let hostList = pm.collectionVariables.get(\"hostList\");\r",
											"\r",
											"pm.test(\"The template has been successfully applied, and as such new services were created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hostList && hostList.length > 0) {\r",
											"    postman.setNextRequest(\"[4003] Apply host template on host to generate services\");\r",
											"} else {\r",
											"    postman.setNextRequest(\"[4003] Export configuration after hosts creation and services configuration\");\r",
											"    pm.collectionVariables.unset(\"hostList\");\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hostList = pm.collectionVariables.get(\"hostList\");\r",
											"\r",
											"if (!hostList || hostList.length == 0) {\r",
											"    hostList = [pm.collectionVariables.get(\"hostTemplateService1\"), pm.collectionVariables.get(\"hostTemplateService2\")];\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentHost\", hostList.shift());\r",
											"pm.collectionVariables.set(\"hostList\", hostList);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"applytpl\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4003] Export configuration after hosts creation and services configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4003] Get both hosts' ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Information about the new host has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"hostTemplateServiceID1\", responseJson.result[0].id);\r",
											"pm.collectionVariables.set(\"hostTemplateServiceID2\", responseJson.result[1].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?search={host.address:\"{{server}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "search",
											"value": "{host.address:\"{{server}}\"}",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4003] Get both hosts' services and compare their amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Information about the host with ID \" + pm.collectionVariables.get(\"currentHostID\") + \" has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let listOfHostsID = pm.collectionVariables.get(\"listOfHostsID\");\r",
											"if(listOfHostsID && listOfHostsID.length > 0) {\r",
											"    pm.collectionVariables.set(\"numberOfServicesForFirstHost\", responseJson.meta.total)\r",
											"    postman.setNextRequest(\"[4003] Get both hosts' services and compare their amount\");\r",
											"} else {\r",
											"    pm.test(\"Although they come from the same template, the first host has one more service than the second host.\", function() {\r",
											"        pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"numberOfServicesForFirstHost\") - 1);\r",
											"    })\r",
											"    postman.setNextRequest(\"[4003] Get both hosts' services and compare their contents\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let listOfHostsID = pm.collectionVariables.get(\"listOfHostsID\");\r",
											"\r",
											"if (!listOfHostsID || listOfHostsID.length == 0) {\r",
											"    listOfHostsID = [pm.collectionVariables.get(\"hostTemplateServiceID1\"), pm.collectionVariables.get(\"hostTemplateServiceID2\")];\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentHostID\", listOfHostsID.shift());\r",
											"pm.collectionVariables.set(\"listOfHostsID\", listOfHostsID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{currentHostID}}/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{currentHostID}}",
										"services"
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4003] Get both hosts' services and compare their contents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Information about the host with ID \" + pm.collectionVariables.get(\"currentHostID\") + \" has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let descriptionGetter = [];\r",
											"for(let count = 0; count < responseJson.meta.total; count++) {\r",
											"    descriptionGetter.push(responseJson.result[count].description);\r",
											"}\r",
											"\r",
											"let listOfHostsID = pm.collectionVariables.get(\"listOfHostsID\");\r",
											"if(listOfHostsID && listOfHostsID.length > 0) {\r",
											"    pm.collectionVariables.set(\"descriptionsOfServicesOfFirstHost\", descriptionGetter);\r",
											"    postman.setNextRequest(\"[4003] Get both hosts' services and compare their contents\");\r",
											"} else {\r",
											"    pm.test(\"Because they come from the same template, the hosts now feature the same services.\", function() {\r",
											"        for(let count = 0; count < descriptionGetter.length; count++) {\r",
											"            pm.expect(pm.collectionVariables.get(\"descriptionsOfServicesOfFirstHost\")).to.include(descriptionGetter[count]);\r",
											"        }\r",
											"    });\r",
											"\r",
											"    pm.test(\"The additional service the first host features is the one we set for it at the beginning, which the second host does not have.\", function() {\r",
											"        pm.expect(pm.collectionVariables.get(\"descriptionsOfServicesOfFirstHost\")).to.include(pm.collectionVariables.get(\"serviceDescription\"));\r",
											"        pm.expect(descriptionGetter).to.not.include(pm.collectionVariables.get(\"serviceDescription\"));\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"currentHostID\");\r",
											"    pm.collectionVariables.unset(\"listOfHostsID\");\r",
											"    pm.collectionVariables.unset(\"numberOfServicesForFirstHost\");\r",
											"    pm.collectionVariables.unset(\"descriptionsOfServicesOfFirstHost\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let listOfHostsID = pm.collectionVariables.get(\"listOfHostsID\");\r",
											"\r",
											"if (!listOfHostsID || listOfHostsID.length == 0) {\r",
											"    listOfHostsID = [pm.collectionVariables.get(\"hostTemplateServiceID1\"), pm.collectionVariables.get(\"hostTemplateServiceID2\")];\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentHostID\", listOfHostsID.shift());\r",
											"pm.collectionVariables.set(\"listOfHostsID\", listOfHostsID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{currentHostID}}/services?limit={{numberOfServicesForFirstHost}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{currentHostID}}",
										"services"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{numberOfServicesForFirstHost}}"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4003] Batch delete both hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[4003] Batch delete both hosts\");\r",
											"    pm.collectionVariables.unset(\"hostTemplateService1\");\r",
											"    pm.collectionVariables.unset(\"hostTemplateServiceID1\");\r",
											"    pm.collectionVariables.unset(\"serviceDescription\");\r",
											"    pm.collectionVariables.unset(\"serviceTemplate\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"hostsCreated\");\r",
											"    pm.collectionVariables.unset(\"hostTemplateService2\");\r",
											"    pm.collectionVariables.unset(\"hostTemplateServiceID2\");\r",
											"    postman.setNextRequest(\"[4003] Export configuration after batch host deletion\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"let currentHost = hostsCreated.shift();\r",
											"pm.collectionVariables.set(\"currentHost\", currentHost);\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4003] Export configuration after batch host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[4003] Export configuration after batch host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[4003-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4003-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "4004 - Adding a duplicate service on a host",
					"item": [
						{
							"name": "[4004] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[4004] Create a new host with a template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \", IP address \" + pm.collectionVariables.get(\"hostIpAddr\") + \" and no template has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-4004\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", pm.environment.get(\"server\"));\r",
											"pm.collectionVariables.set(\"hostTemplate\", \"App-Monitoring-Centreon-Central-custom\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};{{hostIpAddr}};{{hostTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4004] Apply host template's to generate services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The template has been successfully applied, and as such new services were created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"applytpl\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4004] Export configuration after host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4004] Get the host's ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Information about the new host has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"hostID\", responseJson.result[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?search={host.name:\"{{hostName}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "search",
											"value": "{host.name:\"{{hostName}}\"}",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4004] Get the host's services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Information about the new host's services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"let descriptionGetter = [];\r",
											"for(let count = 0; count < responseJson.result.length; count++) {\r",
											"    descriptionGetter.push(responseJson.result[count].description);\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"sampleOfServicesAssignedToHost\", descriptionGetter);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"services"
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4004] Attempt to create a new service with a description the host already has",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"There was an attempt at creating the service \" + pm.collectionVariables.get(\"randomServiceDescription\") + \" on host \" + pm.collectionVariables.get(\"hostName\") + \", but it already exists.\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.expect(pm.response.json()).to.eql(\"Object already exists\")\r",
											"});\r",
											"\r",
											"attemptCount = pm.collectionVariables.get(\"attemptCount\");\r",
											"if (!attemptCount) { \r",
											"    attemptCount = 0;\r",
											"    pm.collectionVariables.set(\"maxAttemptCount\", 9);\r",
											"}\r",
											"\r",
											"if(attemptCount < pm.collectionVariables.get(\"maxAttemptCount\")) {\r",
											"    postman.setNextRequest(\"[4004] Attempt to create a new service with a description the host already has\");\r",
											"    attemptCount++;\r",
											"    pm.collectionVariables.set(\"attemptCount\", attemptCount);\r",
											"} else {\r",
											"    postman.setNextRequest(\"[4004] Delete the new host\");\r",
											"    pm.collectionVariables.unset(\"maxAttemptCount\");\r",
											"    pm.collectionVariables.unset(\"attemptCount\");\r",
											"    pm.collectionVariables.unset(\"sampleOfServicesAssignedToHost\");\r",
											"    pm.collectionVariables.unset(\"randomServiceDescription\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"sampleOfServices = pm.collectionVariables.get(\"sampleOfServicesAssignedToHost\");\r",
											"\r",
											"pm.collectionVariables.set(\"randomServiceDescription\", sampleOfServices[Math.floor(Math.random() * sampleOfServices.length)]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{randomServiceDescription}};{{serviceTemplate}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4004] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostID\");\r",
											"    pm.collectionVariables.unset(\"hostIpAddr\");\r",
											"    pm.collectionVariables.unset(\"hostTemplate\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4004] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[4004] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[4004-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4004-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "4005 - Adding a service with empty mandatory fields",
					"item": [
						{
							"name": "[4005] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[4005] Create a new templateless host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \", IP address \" + pm.collectionVariables.get(\"hostIpAddr\") + \" and no template has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-4005\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", \"127.0.0.1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};{{hostIpAddr}};;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4005] Create a new service assigned to the host with empty description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A service with an empty description has not been added and assigned to \" + pm.collectionVariables.get(\"hostName\") + \", since it is not allowed by the UI.\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceTemplate\", \"Base-Ping-LAN\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};;{{serviceTemplate}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4005] Create a new service assigned to the host with empty template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A service with an empty template has not been added and assigned to \" + pm.collectionVariables.get(\"hostName\") + \", since it is not allowed by the UI.\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceDescription\", \"Service-Test-API-4005\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}};\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4005] Export configuration after host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4005] Get the host's ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Information about the new host has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"hostID\", responseJson.result[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?search={host.name:\"{{hostName}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "search",
											"value": "{host.name:\"{{hostName}}\"}",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4005] Get the host's services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Information about the new host's services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Since all the services created so far are invalid, there should be no service listed here.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(0);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"services"
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4005] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostID\");\r",
											"    pm.collectionVariables.unset(\"hostIpAddr\");\r",
											"    pm.collectionVariables.unset(\"serviceTemplate\");\r",
											"    pm.collectionVariables.unset(\"serviceDescription\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4005] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[4005] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[4005-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4005-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "4006 - Setting and getting parameters for a new service [v1]",
					"item": [
						{
							"name": "[4006] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[4006] Create a new templateless host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \", IP address \" + pm.collectionVariables.get(\"hostIpAddr\") + \" and no template has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-4006\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", \"127.0.0.1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};{{hostIpAddr}};;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4006] Create a new service assigned to the host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Service \" + pm.collectionVariables.get(\"serviceDescription\") + \", with template \" + pm.collectionVariables.get(\"serviceTemplate\") + \" has been added and assigned to \" + pm.collectionVariables.get(\"hostName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceDescription\", \"Service-Test-API-4006\");\r",
											"pm.collectionVariables.set(\"serviceTemplate\", \"Base-Ping-LAN\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}};{{serviceTemplate}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4006] Set parameters for a specific newly created service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"\r",
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"currentParameter\") + \" was updated with value '\" + pm.collectionVariables.get(\"currentValue\") + \"'.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.collectionVariables.get(\"description\") && pm.collectionVariables.get(\"description\") != pm.collectionVariables.get(\"serviceDescription\")) {\r",
											"    pm.collectionVariables.set(\"serviceDescription\", pm.collectionVariables.get(\"description\"));\r",
											"}\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"[4006] Set parameters for a specific newly created service\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentParameter\");\r",
											"    pm.collectionVariables.unset(\"currentValue\");\r",
											"    pm.collectionVariables.unset(\"listOfParameters\");\r",
											"    pm.collectionVariables.unset(\"listOfValues\");\r",
											"    postman.setNextRequest(\"[4006] Export configuration after service creation and update\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"let values = pm.collectionVariables.get(\"listOfValues\");\r",
											"let parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"description\", \"check_period\", \"check_command\", \"max_check_attempts\", \"normal_check_interval\", \"retry_check_interval\", \"active_checks_enabled\", \"passive_checks_enabled\", \"notifications_enabled\", \"notification_interval\", \"notification_period\", \"first_notification_delay\", \"check_freshness\", \"freshness_threshold\", \"flap_detection_enabled\", \"notes\", \"notes_url\", \"icon_image\", \"comment\", \"service_notification_options\"];\r",
											"    parametersToCheck = [];\r",
											"    pm.collectionVariables.set(\"parametersToCheck\", parametersToCheck);\r",
											"    values = [pm.collectionVariables.get(\"serviceDescription\").concat(\"\", \"-updated\"), \"workhours\", \"App-Monitoring-Centreon-Host-Dummy\", 5, 5, 1, 1, 0, 1, 5, \"workhours\", 30, 1, 30, 1, \"my_notes\", \"my_notes_url\", \"centreon-map/cloud_white.png\", \"This is my comment regarding this new service.\", [\"w\", \"u\", \"c\", \"r\", \"f\", \"s\"]];\r",
											"}\r",
											"\r",
											"let currentParameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"currentParameter\", currentParameter);\r",
											"pm.collectionVariables.set(\"listOfParameters\", parameters);\r",
											"let currentValue = values.shift();\r",
											"pm.collectionVariables.set(\"currentValue\", currentValue);\r",
											"pm.collectionVariables.set(\"listOfValues\", values);\r",
											"\r",
											"pm.collectionVariables.set(currentParameter, currentValue);\r",
											"\r",
											"parametersToCheck.push(currentParameter);\r",
											"pm.collectionVariables.set(\"parametersToCheck\", parametersToCheck);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}};{{currentParameter}};{{currentValue}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4006] Export configuration after service creation and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4006] Get parameters of the updated service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of the service's updated parameters has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"listOfParametersToCheck\");\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"const keys = Object.keys(responseJson.result[0]);\r",
											"const values = Object.values(responseJson.result[0]);\r",
											"var parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"let parametersChecked = 0;\r",
											"console.log(parametersToCheck);\r",
											"\r",
											"for (let count = 0; count < parametersToCheck.length; count++) {\r",
											"    var indexOfParameterInResponse = keys.indexOf(parametersToCheck[count]);\r",
											"    if(indexOfParameterInResponse != -1) {\r",
											"        pm.test(\"Parameter \" + parametersToCheck[count] + \" now has value \" + pm.collectionVariables.get(parametersToCheck[count]), function() {\r",
											"            if (typeof pm.collectionVariables.get(parametersToCheck[count]) === 'number') {\r",
											"                pm.expect(pm.collectionVariables.get(parametersToCheck[count])).to.eql(parseInt(values[indexOfParameterInResponse]));\r",
											"            } else if (parametersToCheck[count] == 'notification_options') {\r",
											"                let service_notification_options = pm.collectionVariables.get(\"notification_options\");\r",
											"                console.log(pm.collectionVariables.get(\"notification_options\"));\r",
											"                let finalParameter = \"\";\r",
											"                for(count2 = 0; count2 < service_notification_options.length; count2++) {\r",
											"                    finalParameter = finalParameter.concat(\",\", service_notification_options[count2]);\r",
											"                }\r",
											"                pm.expect(finalParameter.substring(1)).to.eql(values[indexOfParameterInResponse]);\r",
											"            } else {\r",
											"                pm.expect(pm.collectionVariables.get(parametersToCheck[count])).to.eql(values[indexOfParameterInResponse]);\r",
											"            }\r",
											"            pm.collectionVariables.unset(parametersToCheck[count]);\r",
											"            parametersChecked++;\r",
											"        }) \r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"All parameters have been checked.\", function() {\r",
											"    pm.expect(parametersChecked).to.eql(parametersToCheck.length);\r",
											"    pm.collectionVariables.unset(\"parametersToCheck\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
											"if (parametersToCheck || parametersToCheck.length != 0) {\r",
											"    let finalParameter = \"\";\r",
											"    for(let count = 0; count < parametersToCheck.length; count++) {\r",
											"        if(parametersToCheck[count] == \"service_notification_options\") {\r",
											"            finalParameter = finalParameter.concat('|', \"notification_options\");\r",
											"            parametersToCheck[count] = \"notification_options\";\r",
											"            pm.collectionVariables.set(\"parametersToCheck\", parametersToCheck);\r",
											"            pm.collectionVariables.set(\"notification_options\", pm.collectionVariables.get(\"service_notification_options\")); \r",
											"            pm.collectionVariables.unset(\"service_notification_options\");\r",
											"        } else {\r",
											"            finalParameter = finalParameter.concat('|', parametersToCheck[count]); \r",
											"        }\r",
											"    }\r",
											"    pm.collectionVariables.set(\"listOfParametersToCheck\", finalParameter.substring(1));\r",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"getparam\",\n  \"object\":\"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}};{{listOfParametersToCheck}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4006] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostIpAddr\");\r",
											"    pm.collectionVariables.unset(\"serviceDescription\");\r",
											"    pm.collectionVariables.unset(\"serviceTemplate\");   \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4006] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[4006] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[4006-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4006-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "4007 - Setting and getting parameters for a new service [v2] [placeholder]",
					"item": []
				},
				{
					"name": "4008 - Disabling/enabling a service",
					"item": [
						{
							"name": "[4008] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[4008] Create a new host with template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \", IP address \" + pm.collectionVariables.get(\"hostIpAddr\") + \" and template \" + pm.collectionVariables.get(\"hostTemplate\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-4008\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", pm.environment.get(\"server\"));\r",
											"pm.collectionVariables.set(\"hostTemplate\", \"App-Monitoring-Centreon-Central-custom\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};{{hostIpAddr}};{{hostTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4008] Create a new service assigned to the host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Service \" + pm.collectionVariables.get(\"serviceDescription\") + \", with template \" + pm.collectionVariables.get(\"serviceTemplate\") + \" has been added and assigned to \" + pm.collectionVariables.get(\"hostName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceDescription\", \"Service-Test-API-4008\");\r",
											"pm.collectionVariables.set(\"serviceTemplate\", \"Base-Ping-LAN\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}};{{serviceTemplate}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4008] Apply host template on host to generate services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The template has been successfully applied, and as such new services were created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"applytpl\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4008] Export configuration after host creation and template application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4008] Get the host's ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Information about the new host has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"hostID\", responseJson.result[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?search={host.name:\"{{hostName}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "search",
											"value": "{host.name:\"{{hostName}}\"}",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4008] List all services before service disable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of services assigned to our host has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"numberOfServicesAssociatedToHost\", responseJson.meta.total);\r",
											"\r",
											"pm.test(\"The service we created for the host is listed as expected.\", function() {\r",
											"    let descriptionGetter = [];\r",
											"    for(let count = 0; count < responseJson.result.length; count++) {\r",
											"        descriptionGetter.push(responseJson.result[count].description);\r",
											"    }\r",
											"    pm.expect(descriptionGetter).to.contain(pm.collectionVariables.get(\"serviceDescription\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4008] Disable the manually created service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service was successfully disabled.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"disable\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4008] Show services after service disable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of configured services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The service that we disabled is listed as such in the list.\", function() {\r",
											"    for(let count = 0; count < responseJson.result.length; count++) {\r",
											"        if(responseJson.result[count].description == pm.collectionVariables.get(\"serviceDescription\")) {\r",
											"            pm.expect(parseInt(responseJson.result[count].activate)).to.eql(0);\r",
											"            pm.collectionVariables.set(\"serviceID\", parseInt(responseJson.result[count].id));\r",
											"        }\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4008] Export configuration after service disable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    setTimeout(function(){}, [1000]);\r",
											"    postman.setNextRequest(\"[4008] Export configuration after service disable\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [3000]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[4008] List all services in real-time monitoring after service disable\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4008] List all services in real-time monitoring after service disable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of services assigned to our host has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"There is one service missing compared to before the disable request.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(pm.collectionVariables.get(\"numberOfServicesAssociatedToHost\") - 1);\r",
											"});\r",
											"\r",
											"pm.test(\"The missing service is the service we just disabled.\", function() {\r",
											"    let descriptionGetter = [], idGetter = [];\r",
											"    for(let count = 0; count < responseJson.result.length; count++) {\r",
											"        descriptionGetter.push(responseJson.result[count].description);\r",
											"        idGetter.push(responseJson.result[count].id);\r",
											"    }\r",
											"    pm.expect(descriptionGetter).to.not.contain(pm.collectionVariables.get(\"serviceDescription\"));\r",
											"    pm.expect(idGetter).to.not.contain(pm.collectionVariables.get(\"serviceID\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/services?limit={{numberOfServicesAssociatedToHost}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "{{numberOfServicesAssociatedToHost}}"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4008] Attempt to get access to the disabled service in real-time monitoring",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The disabled service cannot be found in real-time monitoring.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/services/{{serviceID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"services",
										"{{serviceID}}"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4008] Enable back the manually created service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The disabled service was successfully enabled.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"enable\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4008] Show services after service enable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of configured services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The service that we enabled back is listed as such in the list.\", function() {\r",
											"    for(let count = 0; count < responseJson.result.length; count++) {\r",
											"        if(responseJson.result[count].description == pm.collectionVariables.get(\"serviceDescription\")) {\r",
											"            pm.expect(parseInt(responseJson.result[count].activate)).to.eql(1);\r",
											"        }\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4008] Export configuration after service enable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    setTimeout(function(){}, [1000]);\r",
											"    postman.setNextRequest(\"[4008] Export configuration after service enable\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [3000]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[4008] List all services in real-time monitoring after service enable\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4008] List all services in real-time monitoring after service enable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of services assigned to our host has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"The request now lists the exact same number of services as what was initially listed.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(pm.collectionVariables.get(\"numberOfServicesAssociatedToHost\"));\r",
											"    pm.collectionVariables.unset(\"numberOfServicesAssociatedToHost\");\r",
											"});\r",
											"\r",
											"pm.test(\"The service that was missing is now back to being listed.\", function() {\r",
											"    let descriptionGetter = [], idGetter = [];\r",
											"    for(let count = 0; count < responseJson.result.length; count++) {\r",
											"        descriptionGetter.push(responseJson.result[count].description);\r",
											"        idGetter.push(responseJson.result[count].id);\r",
											"    }\r",
											"    pm.expect(descriptionGetter).to.contain(pm.collectionVariables.get(\"serviceDescription\"));\r",
											"    pm.expect(idGetter).to.contain(pm.collectionVariables.get(\"serviceID\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/services?limit={{numberOfServicesAssociatedToHost}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "{{numberOfServicesAssociatedToHost}}"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4008] Get information on the previously disabled service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Now that it is back to being enabled, the service can be found in real-time monitoring.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.description).to.eql(pm.collectionVariables.get(\"serviceDescription\"));\r",
											"    pm.expect(responseJson.id).to.eql(pm.collectionVariables.get(\"serviceID\"));\r",
											"    pm.collectionVariables.unset(\"serviceDescription\");\r",
											"    pm.collectionVariables.unset(\"serviceID\");\r",
											"    pm.collectionVariables.unset(\"serviceTemplate\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/services/{{serviceID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"services",
										"{{serviceID}}"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4008] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostIpAddr\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4008] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[4008] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[4008-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4008-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "4009 - Assigning a service group to services",
					"item": [
						{
							"name": "[4009] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[4009] Create two templateless hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostList\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[4009] Create two templateless hosts\");\r",
											"    pm.collectionVariables.set(\"hostName1\", pm.collectionVariables.get(\"currentHost\"));\r",
											"} else {\r",
											"    pm.collectionVariables.set(\"hostName2\", pm.collectionVariables.get(\"currentHost\"));\r",
											"    pm.collectionVariables.unset(\"hostList\");\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    postman.setNextRequest(\"[4009] Add a ping service on both hosts\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hosts = pm.collectionVariables.get(\"hostList\");\r",
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"if(!hosts || hosts.length == 0) {\r",
											"    hosts = [\"4009-hostName1\", \"4009-hostName2\"];\r",
											"    hostsCreated = [];\r",
											"}\r",
											"\r",
											"hostsCreated.push(hosts.shift());\r",
											"pm.collectionVariables.set(\"currentHost\", hostsCreated[hostsCreated.length - 1]);\r",
											"pm.collectionVariables.set(\"hostList\", hosts);\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}};{{currentHost}};{{server}};;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4009] Add a ping service on both hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Service \" + pm.collectionVariables.get(\"serviceDescription\") + \", with template \" + pm.collectionVariables.get(\"serviceTemplate\") + \" has been added and assigned to \" + pm.collectionVariables.get(\"currentHost\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let hosts = pm.collectionVariables.get(\"hostList\");\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[4009] Add a ping service on both hosts\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"hostList\");\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    postman.setNextRequest(\"[4009] Create a new service group\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hosts = pm.collectionVariables.get(\"hostList\");\r",
											"\r",
											"if(!hosts || hosts.length == 0) {\r",
											"    hosts = [\"4009-hostName1\", \"4009-hostName2\"];\r",
											"    pm.collectionVariables.set(\"serviceDescription\", \"Service-Test-API-4009\");\r",
											"    pm.collectionVariables.set(\"serviceTemplate\", \"Base-Ping-LAN\"); \r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentHost\", hosts.shift());\r",
											"pm.collectionVariables.set(\"hostList\", hosts);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"service\",\n  \"values\": \"{{currentHost}};{{serviceDescription}};{{serviceTemplate}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4009] Create a new service group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A service group with name \" + pm.collectionVariables.get(\"serviceGroupName\") + \" and alias \" + pm.collectionVariables.get(\"serviceGroupName\") + \" has been successfully created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceGroupName\", \"SG-Test-API-4009\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}};{{serviceGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4009] Subscribe the two services we created to the new service group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The services were added to the service group \" + pm.collectionVariables.get(\"serviceGroupName\") + \".\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"listOfServicesToAddToServiceGroup\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"if (hostsCreated || hostsCreated.length != 0) {\r",
											"    let finalParameter = \"\";\r",
											"    for(let count = 0; count < hostsCreated.length; count++) {\r",
											"        finalParameter = finalParameter.concat('|', hostsCreated[count]); \r",
											"        finalParameter = finalParameter.concat(',', pm.collectionVariables.get(\"serviceDescription\"));\r",
											"    }\r",
											"    pm.collectionVariables.set(\"listOfServicesToAddToServiceGroup\", finalParameter.substring(1));\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addservice\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}};{{listOfServicesToAddToServiceGroup}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4009] Export configuration after hosts, services and service group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4009] List all services and get the services ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"serviceID1\", responseJson.result[0].id);\r",
											"pm.collectionVariables.set(\"serviceID2\", responseJson.result[1].id);\r",
											"pm.collectionVariables.set(\"hostID1\", responseJson.result[0].host.id);\r",
											"pm.collectionVariables.set(\"hostID2\", responseJson.result[1].host.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/services?search={\"service.description\":{{serviceDescription}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"service.description\":{{serviceDescription}}\"}",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4009] Get information about the services' service groups and compare them",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of service groups assigned to the services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"let listOfServicesID = pm.collectionVariables.get(\"listOfServicesID\");\r",
											"\r",
											"if(listOfServicesID && listOfServicesID.length > 0) {\r",
											"    pm.collectionVariables.set(\"responseFromFirstHost\", responseJson);\r",
											"    postman.setNextRequest(\"[4009] Get information about the services' service groups and compare them\");\r",
											"} else {\r",
											"    pm.test(\"Although from different hosts, both services are assigned to the exact same service group.\", function() {\r",
											"        pm.expect(responseJson).to.eql(pm.collectionVariables.get(\"responseFromFirstHost\"));\r",
											"    })\r",
											"    pm.collectionVariables.unset(\"responseFromFirstHost\");\r",
											"    pm.collectionVariables.unset(\"listOfServicesID\");\r",
											"    pm.collectionVariables.unset(\"currentServiceID\");\r",
											"    pm.collectionVariables.unset(\"listOfHostsID\");\r",
											"    pm.collectionVariables.unset(\"currentHostID\");\r",
											"    pm.collectionVariables.unset(\"serviceID1\");\r",
											"    pm.collectionVariables.unset(\"serviceID2\");\r",
											"    postman.setNextRequest(\"[4009] Delete the service group\")\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let listOfServicesID = pm.collectionVariables.get(\"listOfServicesID\"), listOfHostsID = pm.collectionVariables.get(\"listOfHostsID\");\r",
											"if (!listOfServicesID || listOfServicesID.length == 0) {\r",
											"    listOfServicesID = [pm.collectionVariables.get(\"serviceID1\"), pm.collectionVariables.get(\"serviceID2\")];\r",
											"    listOfHostsID = [pm.collectionVariables.get(\"hostID1\"), pm.collectionVariables.get(\"hostID2\")];\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentServiceID\", listOfServicesID.shift());\r",
											"pm.collectionVariables.set(\"listOfServicesID\", listOfServicesID);\r",
											"\r",
											"pm.collectionVariables.set(\"currentHostID\", listOfHostsID.shift());\r",
											"pm.collectionVariables.set(\"listOfHostsID\", listOfHostsID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{currentHostID}}/services/{{currentServiceID}}/servicegroups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{currentHostID}}",
										"services",
										"{{currentServiceID}}",
										"servicegroups"
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4009] Delete the service group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service group with name \" + pm.collectionVariables.get(\"serviceGroupName\") + \" and alias \" + pm.collectionVariables.get(\"serviceGroupName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"serviceGroupName\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4009] Batch delete both hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[4009] Batch delete both hosts\");\r",
											"    pm.collectionVariables.unset(\"hostName1\");\r",
											"    pm.collectionVariables.unset(\"hostID1\");\r",
											"} else {\r",
											"    postman.setNextRequest(\"[4009] Export configuration after batch host deletion\");\r",
											"    pm.collectionVariables.unset(\"serviceDescription\");\r",
											"    pm.collectionVariables.unset(\"serviceTemplate\");\r",
											"    pm.collectionVariables.unset(\"hostsCreated\");\r",
											"    pm.collectionVariables.unset(\"hostName2\");\r",
											"    pm.collectionVariables.unset(\"hostID2\");\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"let currentHost = hostsCreated.shift();\r",
											"pm.collectionVariables.set(\"currentHost\", currentHost);\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4009] Export configuration after batch host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[4009] Export configuration after batch host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[4009-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4009-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "4010 - Checking addservicegroup/setservicegroup properties on services",
					"item": [
						{
							"name": "[4010] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[4010] Create a new templateless host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \", IP address \" + pm.collectionVariables.get(\"hostIpAddr\") + \" and no template has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-4010\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", \"127.0.0.1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};{{hostIpAddr}};;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4010] Create a new service assigned to the host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Service \" + pm.collectionVariables.get(\"serviceDescription\") + \", with template \" + pm.collectionVariables.get(\"serviceTemplate\") + \" has been added and assigned to \" + pm.collectionVariables.get(\"hostName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceDescription\", \"Service-Test-API-4010\");\r",
											"pm.collectionVariables.set(\"serviceTemplate\", \"Base-Ping-LAN\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}};{{serviceTemplate}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4010] Create two service groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const serviceGroups = pm.collectionVariables.get(\"serviceGroupList\");\r",
											"\r",
											"pm.test(\"serviceGroup \" + pm.collectionVariables.get(\"currentServiceGroup\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (serviceGroups && serviceGroups.length > 0) {\r",
											"    postman.setNextRequest(\"[4010] Create two service groups\");\r",
											"    pm.collectionVariables.set(\"serviceGroupAdd\", pm.collectionVariables.get(\"currentServiceGroup\"));\r",
											"} else {\r",
											"    pm.collectionVariables.set(\"serviceGroupSet\", pm.collectionVariables.get(\"currentServiceGroup\"));\r",
											"    pm.collectionVariables.unset(\"serviceGroupList\");\r",
											"    pm.collectionVariables.unset(\"currentServiceGroup\");\r",
											"    postman.setNextRequest(\"[4010] Assign the service to the first service group using addservicegroup\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let serviceGroups = pm.collectionVariables.get(\"serviceGroupList\");\r",
											"let serviceGroupsCreated = pm.collectionVariables.get(\"serviceGroupsCreated\");\r",
											"\r",
											"if(!serviceGroups || serviceGroups.length == 0) {\r",
											"    serviceGroups = [\"4010-ServiceGroupAdd\", \"4010-ServiceGroupSet\"];\r",
											"    serviceGroupsCreated = [];\r",
											"}\r",
											"\r",
											"serviceGroupsCreated.push(serviceGroups.shift());\r",
											"pm.collectionVariables.set(\"currentServiceGroup\", serviceGroupsCreated[serviceGroupsCreated.length - 1]);\r",
											"pm.collectionVariables.set(\"serviceGroupList\", serviceGroups);\r",
											"pm.collectionVariables.set(\"serviceGroupsCreated\", serviceGroupsCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"sg\",\n  \"values\": \"{{currentServiceGroup}};{{currentServiceGroup}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4010] Assign the service to the first service group using addservicegroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service group \" + pm.collectionVariables.get(\"serviceGroupAdd\") + \" has been successfully assigned to the service.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addservicegroup\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}};{{serviceGroupAdd}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4010] Get service groups for the selected service after service group add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of service groups assigned to the service has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"This service has one group associated with it: the service group that we assigned in the previous request.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"serviceGroupAdd\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getservicegroup\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4010] Assign the service to the second service group using setservicegroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service group \" + pm.collectionVariables.get(\"serviceGroupSet\") + \" has been successfully assigned to the service.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setservicegroup\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}};{{serviceGroupSet}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4010] Get service groups for the selected service after service group set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of service groups assigned to the service has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"This service has one group associated with it: the service group \" + pm.collectionVariables.get(\"serviceGroupSet\")) + \" that we assigned in the previous request, since the previous command has overwritten any previous definition of the service groups assigned to the service.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"serviceGroupSet\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getservicegroup\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4010] Assign the service to the first service group using second addservicegroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service group \" + pm.collectionVariables.get(\"serviceGroupAdd\") + \" has been successfully assigned to the service.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addservicegroup\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}};{{serviceGroupAdd}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4010] Get service groups for the selected service after second service group add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of service groups assigned to the service has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"This service has now two service groups associated with it, listed in chronological order of addition.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"serviceGroupSet\"));\r",
											"    pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"serviceGroupAdd\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getservicegroup\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4010] Delete the two service groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const serviceGroups = pm.collectionVariables.get(\"serviceGroupsCreated\");\r",
											"pm.test(\"serviceGroup \" + pm.collectionVariables.get(\"currentServiceGroup\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (serviceGroups && serviceGroups.length > 0) {\r",
											"    postman.setNextRequest(\"[4010] Delete the two service groups\");\r",
											"    pm.collectionVariables.unset(\"serviceGroupAdd\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"serviceGroupSet\");\r",
											"    pm.collectionVariables.unset(\"currentServiceGroup\");\r",
											"    pm.collectionVariables.unset(\"serviceGroupsCreated\");\r",
											"    postman.setNextRequest(\"[4010] Delete the new host\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let serviceGroupsCreated = pm.collectionVariables.get(\"serviceGroupsCreated\");\r",
											"\r",
											"pm.collectionVariables.set(\"currentServiceGroup\", serviceGroupsCreated.shift());\r",
											"pm.collectionVariables.set(\"serviceGroupsCreated\", serviceGroupsCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"sg\",\n  \"values\": \"{{currentServiceGroup}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4010] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostIpAddr\");\r",
											"    pm.collectionVariables.unset(\"serviceDescription\");\r",
											"    pm.collectionVariables.unset(\"serviceTemplate\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4010] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[4010] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[4010-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4010-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "4011 - Adding extra hosts on services",
					"item": [
						{
							"name": "[4011] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[4011] Create two templateless hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostList\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[4011] Create two templateless hosts\");\r",
											"    pm.collectionVariables.set(\"hostName1\", pm.collectionVariables.get(\"currentHost\"));\r",
											"} else {\r",
											"    pm.collectionVariables.set(\"hostName2\", pm.collectionVariables.get(\"currentHost\"));\r",
											"    pm.collectionVariables.unset(\"hostList\");\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"IPAddressList\");\r",
											"    pm.collectionVariables.unset(\"currentIpAddr\");\r",
											"    postman.setNextRequest(\"[4011] Add a ping service on the first host\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hosts = pm.collectionVariables.get(\"hostList\");\r",
											"let IPAddresses = pm.collectionVariables.get(\"IPAddressList\");\r",
											"\r",
											"if(!hosts || hosts.length == 0) {\r",
											"    hosts = [\"4011-hostName1\", \"4011-hostName2\"];\r",
											"    IPAddresses = [pm.environment.get(\"server\"), pm.environment.get(\"server\")];\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentHost\", hosts.shift());\r",
											"pm.collectionVariables.set(\"hostList\", hosts);\r",
											"\r",
											"pm.collectionVariables.set(\"currentIpAddr\", IPAddresses.shift());\r",
											"pm.collectionVariables.set(\"IPAddressList\", IPAddresses);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}};{{currentHost}};{{currentIpAddr}};;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4011] Add a ping service on the first host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Service \" + pm.collectionVariables.get(\"serviceDescription\") + \", with template \" + pm.collectionVariables.get(\"serviceTemplate\") + \" has been added and assigned to \" + pm.collectionVariables.get(\"hostName1\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceDescription\", \"Service-Test-API-4011\");\r",
											"pm.collectionVariables.set(\"serviceTemplate\", \"Base-Ping-LAN\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName1}};{{serviceDescription}};{{serviceTemplate}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4011] Get service's ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of services has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"serviceID\", parseInt(responseJson.result[0].id));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName1}};\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4011] Assign the created ping service on the second host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Service \" + pm.collectionVariables.get(\"serviceDescription\") + \", with template \" + pm.collectionVariables.get(\"serviceTemplate\") + \" has been also assigned to \" + pm.collectionVariables.get(\"hostName2\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addhost\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName1}};{{serviceDescription}};{{hostName2}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4011] Export configuration after hosts creation and service assignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4011] List service information after service assignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"There are two occurrences of the same service in the list, that is, the service that was created just now.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"    pm.expect(responseJson.result[0].description).to.eql(pm.collectionVariables.get(\"serviceDescription\"));\r",
											"    pm.expect(responseJson.result[1].description).to.eql(pm.collectionVariables.get(\"serviceDescription\"));\r",
											"    pm.expect(responseJson.result[0].id).to.eql(pm.collectionVariables.get(\"serviceID\"));\r",
											"    pm.expect(responseJson.result[1].id).to.eql(pm.collectionVariables.get(\"serviceID\"));\r",
											"\r",
											"})\r",
											"\r",
											"pm.test(\"The service is assigned to two different hosts, one of which is the initial host the service was assigned to and the second is the one we assigned the service to afterwards.\", function() {\r",
											"    pm.expect(responseJson.result[0].host.id).to.not.eql(responseJson.result[1].host.id);\r",
											"    pm.expect(responseJson.result[0].host.name).to.eql(pm.collectionVariables.get(\"hostName1\"));\r",
											"    pm.expect(responseJson.result[1].host.name).to.eql(pm.collectionVariables.get(\"hostName2\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/services?search={\"service.description\":{{serviceDescription}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"service.description\":{{serviceDescription}}\"}"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[4011] Delete the first host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName1\") + \", on which we initially assigned service \" + pm.collectionVariables.get(\"serviceDescription\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName1\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName1}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4011] Export configuration after first host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[4011] Export configuration after first host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[4011] List service information after first host deletion\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4011] List service information after first host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"There is now only one instance left of the service.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].description).to.eql(pm.collectionVariables.get(\"serviceDescription\"));\r",
											"    pm.expect(responseJson.result[0].id).to.eql(pm.collectionVariables.get(\"serviceID\"));\r",
											"})\r",
											"\r",
											"pm.test(\"It is linked to the only host left in the scenario, that is, the second host.\", function() {\r",
											"    pm.expect(responseJson.result[0].host.name).to.eql(pm.collectionVariables.get(\"hostName2\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/services?search={\"service.description\":{{serviceDescription}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"service.description\":{{serviceDescription}}\"}"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[4011] Delete the second host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName2\") + \", on which was assigned service \" + pm.collectionVariables.get(\"serviceDescription\") + \" via addhost, has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName2\");\r",
											"    pm.collectionVariables.unset(\"serviceTemplate\");\r",
											"    pm.collectionVariables.unset(\"serviceID\");\r",
											"    pm.collectionVariables.unset(\"serviceDescription\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName2}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4011] Export configuration after second host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[4011] Export configuration after second host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[4011-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4011-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "4012 - Checking addhost/sethost properties on services",
					"item": [
						{
							"name": "[4012] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[4012] Create two templateless hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostList\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[4012] Create two templateless hosts\");\r",
											"    pm.collectionVariables.set(\"hostName1\", pm.collectionVariables.get(\"currentHost\"));\r",
											"} else {\r",
											"    pm.collectionVariables.set(\"hostName2\", pm.collectionVariables.get(\"currentHost\"));\r",
											"    pm.collectionVariables.unset(\"hostList\");\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"IPAddressList\");\r",
											"    pm.collectionVariables.unset(\"currentIpAddr\");\r",
											"    postman.setNextRequest(\"[4012] Add a ping service on the first host\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hosts = pm.collectionVariables.get(\"hostList\");\r",
											"let IPAddresses = pm.collectionVariables.get(\"IPAddressList\");\r",
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"if(!hosts || hosts.length == 0) {\r",
											"    hosts = [\"4012-hostName1\", \"4012-hostName2\"];\r",
											"    hostsCreated = [];\r",
											"    IPAddresses = [pm.environment.get(\"server\"), pm.environment.get(\"server\")];\r",
											"}\r",
											"\r",
											"hostsCreated.push(hosts.shift());\r",
											"pm.collectionVariables.set(\"currentHost\", hostsCreated[hostsCreated.length - 1]);\r",
											"pm.collectionVariables.set(\"hostList\", hosts);\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);\r",
											"\r",
											"pm.collectionVariables.set(\"currentIpAddr\", IPAddresses.shift());\r",
											"pm.collectionVariables.set(\"IPAddressList\", IPAddresses);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}};{{currentHost}};{{currentIpAddr}};;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4012] Add a ping service on the first host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Service \" + pm.collectionVariables.get(\"serviceDescription\") + \", with template \" + pm.collectionVariables.get(\"serviceTemplate\") + \" has been added and assigned to \" + pm.collectionVariables.get(\"hostName1\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceDescription\", \"Service-Test-API-4012\");\r",
											"pm.collectionVariables.set(\"serviceTemplate\", \"Base-Ping-LAN\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName1}};{{serviceDescription}};{{serviceTemplate}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4012] Assign the service to the second host using sethost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service has been successfully assigned to the host \" + pm.collectionVariables.get(\"hostName2\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"sethost\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName1}};{{serviceDescription}};{{hostName2}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4012] Check which hosts the service is assigned to after sethost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let listOfHosts = pm.collectionVariables.get(\"listOfHosts\");\r",
											"\r",
											"pm.test(\"A list of services associated to the host \" + pm.collectionVariables.get(\"currentHost\") + \" were fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"if (listOfHosts && listOfHosts.length > 0) {\r",
											"    pm.test(\"The list of services associated to the first host \" + pm.collectionVariables.get(\"currentHost\") + \" is empty, meaning the service \" + pm.collectionVariables.get(\"serviceDescription\") + \" is not assigned to it anymore.\", function() {\r",
											"        pm.expect(pm.collectionVariables.get(\"currentHost\")).to.eql(pm.collectionVariables.get(\"hostName1\"));\r",
											"        pm.expect(responseJson.result).to.be.empty;\r",
											"    })\r",
											"    postman.setNextRequest(\"[4012] Check which hosts the service is assigned to after sethost\");\r",
											"} else {\r",
											"    pm.test(\"The list of services associated to the second host \" + pm.collectionVariables.get(\"currentHost\") + \" is not empty, and features the service we first associated to \" + pm.collectionVariables.get(\"hostName1\") + \" then set to \" + pm.collectionVariables.get(\"hostName2\") + \".\" , function() {\r",
											"        pm.expect(pm.collectionVariables.get(\"currentHost\")).to.eql(pm.collectionVariables.get(\"hostName2\"));\r",
											"        pm.expect(responseJson.result.length).to.eql(1);\r",
											"        pm.expect(responseJson.result[0].description).to.eql(pm.collectionVariables.get(\"serviceDescription\"));\r",
											"    })\r",
											"    postman.setNextRequest(\"[4012] Assign back the service to the first host using addhost\");\r",
											"    pm.collectionVariables.unset(\"listOfHosts\");\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let listOfHosts = pm.collectionVariables.get(\"listOfHosts\");\r",
											"\r",
											"if (!listOfHosts || listOfHosts.length == 0) {\r",
											"    listOfHosts = [pm.collectionVariables.get(\"hostName1\"), pm.collectionVariables.get(\"hostName2\")];\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentHost\", listOfHosts.shift());\r",
											"pm.collectionVariables.set(\"listOfHosts\", listOfHosts);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"service\",\n  \"values\": \"{{currentHost}};\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4012] Assign back the service to the first host using addhost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service has been successfully assigned to the host \" + pm.collectionVariables.get(\"hostName2\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addhost\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName2}};{{serviceDescription}};{{hostName1}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4012] Check which hosts the service is assigned to after addhost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let listOfHosts = pm.collectionVariables.get(\"listOfHosts\");\r",
											"\r",
											"pm.test(\"A list of services associated to the host \" + pm.collectionVariables.get(\"currentHost\") + \" were fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"if (listOfHosts && listOfHosts.length > 0) {\r",
											"    pm.test(\"The list of services associated to the first host \" + pm.collectionVariables.get(\"currentHost\") + \" is not empty, meaning the service \" + pm.collectionVariables.get(\"serviceDescription\") + \" was assigned to it using addhost.\", function() {\r",
											"        pm.expect(pm.collectionVariables.get(\"currentHost\")).to.eql(pm.collectionVariables.get(\"hostName1\"));\r",
											"        pm.expect(responseJson.result.length).to.eql(1);\r",
											"        pm.expect(responseJson.result[0].description).to.eql(pm.collectionVariables.get(\"serviceDescription\"));\r",
											"    })\r",
											"    postman.setNextRequest(\"[4012] Check which hosts the service is assigned to after addhost\");\r",
											"} else {\r",
											"    pm.test(\"The list of services associated to the second host \" + pm.collectionVariables.get(\"currentHost\") + \" is not empty, meaning assigning the host \" + pm.collectionVariables.get(\"hostName1\") + \" using addhost did not overwrite any previous definition.\" , function() {\r",
											"        pm.expect(pm.collectionVariables.get(\"currentHost\")).to.eql(pm.collectionVariables.get(\"hostName2\"));\r",
											"        pm.expect(responseJson.result.length).to.eql(1);\r",
											"        pm.expect(responseJson.result[0].description).to.eql(pm.collectionVariables.get(\"serviceDescription\"));\r",
											"    })\r",
											"    postman.setNextRequest(\"[4012] Batch delete both hosts\");\r",
											"    pm.collectionVariables.unset(\"listOfHosts\");\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let listOfHosts = pm.collectionVariables.get(\"listOfHosts\");\r",
											"\r",
											"if (!listOfHosts || listOfHosts.length == 0) {\r",
											"    listOfHosts = [pm.collectionVariables.get(\"hostName1\"), pm.collectionVariables.get(\"hostName2\")];\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentHost\", listOfHosts.shift());\r",
											"pm.collectionVariables.set(\"listOfHosts\", listOfHosts);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"service\",\n  \"values\": \"{{currentHost}};\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4012] Batch delete both hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"[4012] Batch delete both hosts\");\r",
											"    pm.collectionVariables.unset(\"hostName1\");\r",
											"    pm.collectionVariables.unset(\"serviceDescription\");\r",
											"    pm.collectionVariables.unset(\"serviceTemplate\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"hostName2\");\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"hostsCreated\");\r",
											"    postman.setNextRequest(\"[4012-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"let currentHost = hostsCreated.shift();\r",
											"pm.collectionVariables.set(\"currentHost\", currentHost);\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4012-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "4013 - Adding contacts to services",
					"item": [
						{
							"name": "[4013] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[4013] Create a new templateless host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \", IP address \" + pm.collectionVariables.get(\"hostIpAddr\") + \" and no template has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-4013\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", \"127.0.0.1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};{{hostIpAddr}};;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4013] Create a new service assigned to the host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Service \" + pm.collectionVariables.get(\"serviceDescription\") + \", with template \" + pm.collectionVariables.get(\"serviceTemplate\") + \" has been added and assigned to \" + pm.collectionVariables.get(\"hostName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceDescription\", \"Service-Test-API-4013\");\r",
											"pm.collectionVariables.set(\"serviceTemplate\", \"Base-Ping-LAN\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}};{{serviceTemplate}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4013] Add new non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserName\") + \", with login \" + pm.collectionVariables.get(\"testUserLogin\") + \" and email \" + pm.collectionVariables.get(\"testUserEmail\") + \" has been successfully created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserName\", \"User-Test-API-4013\");\r",
											"pm.collectionVariables.set(\"testUserLogin\", \"testUser\");\r",
											"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserName}};{{testUserLogin}};{{testUserEmail}};Centreon!2021;0;0;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4013] Set notification commands to user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"let values = pm.collectionVariables.get(\"listOfValues\");\r",
											"\r",
											"pm.collectionVariables.set(\"notificationTimePeriod\", \"workhours\");\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"hostnotifcmd\", \"svcnotifcmd\", \"hostnotifperiod\", \"svcnotifperiod\"];\r",
											"    values = [\"host-notify-by-email\", \"service-notify-by-email\", pm.collectionVariables.get(\"notificationTimePeriod\"), pm.collectionVariables.get(\"notificationTimePeriod\")];\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentParameter\", parameters.shift());\r",
											"pm.collectionVariables.set(\"listOfParameters\", parameters);\r",
											"\r",
											"pm.collectionVariables.set(\"currentValue\", values.shift());\r",
											"pm.collectionVariables.set(\"listOfValues\", values);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"\r",
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"currentParameter\") + \" was updated with \" + pm.collectionVariables.get(\"currentValue\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"[4013] Set notification commands to user\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentParameter\");\r",
											"    pm.collectionVariables.unset(\"currentValue\");\r",
											"    pm.collectionVariables.unset(\"listOfParameters\");\r",
											"    pm.collectionVariables.unset(\"listOfValues\");\r",
											"    postman.setNextRequest(\"[4013] Assign contact to service\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\":\"setparam\",\r\n  \"object\":\"contact\",\r\n  \"values\": \"{{testUserLogin}};{{currentParameter}};{{currentValue}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4013] Assign contact to service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The user \" + pm.collectionVariables.get(\"testUserName\") + \" has been assigned to the service \" + pm.collectionVariables.get(\"serviceDescription\") + \" on host \" + pm.collectionVariables.get(\"hostName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addcontact\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}};{{testUserLogin}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4013] Get contacts associated to service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of users associated to the service has been fetched\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();    \r",
											"pm.test(\"The user \" + pm.collectionVariables.get(\"testUserName\") + \" is listed is associated to the host \" + pm.collectionVariables.get(\"serviceDescription\") + \".\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"testUserLogin\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getcontact\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4013] Export configuration after host/service creation and user assignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4013] Get the host's ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"hostID\", responseJson.result[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?search={host.name:\"{{hostName}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "{host.name:\"{{hostName}}\"}"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4013] Get the service's ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"serviceID\", responseJson.result[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/services?search={\"service.name\":{{serviceDescription}}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"services"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "{\"service.name\":{{serviceDescription}}}"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4013] List information about the service's notification policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The notification policy for the selected service has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"It depicts the parameters we have set up for it.\", function() {\r",
											"    pm.expect(responseJson.contacts.length).to.eql(1);\r",
											"    pm.expect(responseJson.contacts[0].name).to.eql(pm.collectionVariables.get(\"testUserName\"));\r",
											"    pm.expect(responseJson.contacts[0].alias).to.eql(pm.collectionVariables.get(\"testUserLogin\"));\r",
											"    pm.expect(responseJson.contacts[0].email).to.eql(pm.collectionVariables.get(\"testUserEmail\"));\r",
											"    pm.collectionVariables.unset(\"testUserName\");\r",
											"    pm.collectionVariables.unset(\"testUserEmail\");\r",
											"    pm.expect(responseJson.contacts[0].notifications.host.time_period.name).to.eql(pm.collectionVariables.get(\"notificationTimePeriod\"));\r",
											"    pm.expect(responseJson.contacts[0].notifications.service.time_period.name).to.eql(pm.collectionVariables.get(\"notificationTimePeriod\"));\r",
											"    pm.collectionVariables.unset(\"notificationTimePeriod\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/{{hostID}}/services/{{serviceID}}/notification-policy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"{{hostID}}",
										"services",
										"{{serviceID}}",
										"notification-policy"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "[4013] Delete the non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserLogin\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"testUserLogin\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4013] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted, along with its service \" + pm.collectionVariables.get(\"serviceDescription\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostID\");\r",
											"    pm.collectionVariables.unset(\"hostIpAddr\");\r",
											"    pm.collectionVariables.unset(\"serviceDescription\");\r",
											"    pm.collectionVariables.unset(\"serviceTemplate\");\r",
											"    pm.collectionVariables.unset(\"serviceID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4013] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[4013] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[4013-aftermath] Logout from admin user\");\r",
											"}   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4013-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "4014 - Checking addcontact/setcontact properties on services",
					"item": [
						{
							"name": "[4014] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[4014] Create a new templateless host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \", IP address \" + pm.collectionVariables.get(\"hostIpAddr\") + \" and no template has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-4014\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", \"127.0.0.1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};{{hostIpAddr}};;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4014] Create a new service assigned to the host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Service \" + pm.collectionVariables.get(\"serviceDescription\") + \", with template \" + pm.collectionVariables.get(\"serviceTemplate\") + \" has been added and assigned to \" + pm.collectionVariables.get(\"hostName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceDescription\", \"Service-Test-API-4014\");\r",
											"pm.collectionVariables.set(\"serviceTemplate\", \"Base-Ping-LAN\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}};{{serviceTemplate}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4014] Add two new non-admin users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const users = pm.collectionVariables.get(\"userNames\");\r",
											"\r",
											"pm.test(\"User \" + pm.collectionVariables.get(\"currentUser\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (users && users.length > 0) {\r",
											"    pm.collectionVariables.set(\"userAdd\", pm.collectionVariables.get(\"currentUser\"));\r",
											"    postman.setNextRequest(\"[4014] Add two new non-admin users\");\r",
											"} else {\r",
											"    pm.collectionVariables.set(\"userSet\", pm.collectionVariables.get(\"currentUser\"));\r",
											"    pm.collectionVariables.unset(\"currentUser\");\r",
											"    pm.collectionVariables.unset(\"userNames\");\r",
											"    postman.setNextRequest(\"[4014] Assign first user to service using addcontact\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let userNames = pm.collectionVariables.get(\"userNames\");\r",
											"\r",
											"if(!userNames || userNames.length == 0) {\r",
											"    userNames = [\"4014-userAdd\", \"4014-userSet\"];\r",
											"    usersCreated = [];\r",
											"}\r",
											"\r",
											"usersCreated.push(userNames.shift());\r",
											"pm.collectionVariables.set(\"currentUser\", usersCreated[usersCreated.length - 1]);\r",
											"pm.collectionVariables.set(\"userNames\", userNames);\r",
											"pm.collectionVariables.set(\"usersCreated\", usersCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{currentUser}};{{currentUser}};dummymail@centreon.com;Centreon!2021;0;0;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4014] Assign first user to service using addcontact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The user \" + pm.collectionVariables.get(\"userAdd\") + \" has been assigned to the service \" + pm.collectionVariables.get(\"serviceDescription\") + \" on host \" + pm.collectionVariables.get(\"hostName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addcontact\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}};{{userAdd}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4014] Get users assigned to service after addcontact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of contacts assigned to this service has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The service \" + pm.collectionVariables.get(\"serviceDescription\") + \" has exactly one contact assigned to it, that is, \" + pm.collectionVariables.get(\"userAdd\") + \".\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"userAdd\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getcontact\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4014] Assign second user to service using setcontact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The user \" + pm.collectionVariables.get(\"userAdd\") + \" has been assigned to the service \" + pm.collectionVariables.get(\"serviceDescription\") + \" on host \" + pm.collectionVariables.get(\"hostName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setcontact\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}};{{userSet}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4014] Get users assigned to service after setcontact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of contacts assigned to this service has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The service \" + pm.collectionVariables.get(\"serviceDescription\") + \" has exactly one user assigned to it, that is, \" + pm.collectionVariables.get(\"userSet\") + \", which we assigned at the previous request, overwriting any previous definition.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"userSet\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getcontact\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4014] Assign first user to service using second addcontact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The user \" + pm.collectionVariables.get(\"userAdd\") + \" has been assigned to the service \" + pm.collectionVariables.get(\"serviceDescription\") + \" on host \" + pm.collectionVariables.get(\"hostName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addcontact\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}};{{userAdd}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4014] Get users assigned to service after second addcontact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of contacts assigned to this host has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host now has both users assigned to it, which are listed in chronological order.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"userSet\"));\r",
											"    pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"userAdd\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getcontact\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4014] Delete new non-admin users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const users = pm.collectionVariables.get(\"usersCreated\");\r",
											"\r",
											"pm.test(\"User \" + pm.collectionVariables.get(\"currentUser\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (users && users.length > 0) {\r",
											"    pm.collectionVariables.unset(\"userAdd\");\r",
											"    postman.setNextRequest(\"[4014] Delete new non-admin users\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"userSet\");\r",
											"    pm.collectionVariables.unset(\"usersCreated\");\r",
											"    pm.collectionVariables.unset(\"currentUser\");\r",
											"    postman.setNextRequest(\"[4014] Delete the new host\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let usersCreated = pm.collectionVariables.get(\"usersCreated\");\r",
											"pm.collectionVariables.set(\"currentUser\", usersCreated.shift());\r",
											"pm.collectionVariables.set(\"usersCreated\", usersCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{currentUser}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4014] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted, along with the service \" + pm.collectionVariables.get(\"serviceDescription\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostID\");\r",
											"    pm.collectionVariables.unset(\"hostIpAddr\");\r",
											"    pm.collectionVariables.unset(\"serviceDescription\");\r",
											"    pm.collectionVariables.unset(\"serviceTemplate\");\r",
											"    pm.collectionVariables.unset(\"serviceID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4014-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "4015 - Adding contact groups to services [placeholder]",
					"item": []
				},
				{
					"name": "4016 - Checking addcontactgroup/setcontactgroup properties on services [placeholder]",
					"item": []
				}
			]
		},
		{
			"name": "41 - Service group management",
			"item": [
				{
					"name": "4101 - Adding a new service group",
					"item": [
						{
							"name": "[4101] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[4101] List all service groups before service group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of service groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"numberOfServiceGroupsBeforeCreation\", responseJson.result.length);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"sg\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4101] Add a new service group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new service group with name \" + pm.collectionVariables.get(\"serviceGroupName\") + \" has been added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceGroupName\", \"SG-Test-API-4101\");\r",
											"pm.collectionVariables.set(\"serviceGroupAlias\", \"Service Group API Tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}};{{serviceGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4101] List all service groups after service group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of service groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"A new service group has been added.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(pm.collectionVariables.get(\"numberOfServiceGroupsBeforeCreation\") + 1);\r",
											"    pm.collectionVariables.unset(\"numberOfServiceGroupsBeforeCreation\");\r",
											"})\r",
											"\r",
											"pm.test(\"This service group has the features we set for it.\", function() {\r",
											"    for (let count = 0; count < responseJson.result.length; count++) {\r",
											"        if(responseJson.result[count].name == pm.collectionVariables.get(\"serviceGroupName\")) {\r",
											"            pm.expect(responseJson.result[count].name).to.eql(pm.collectionVariables.get(\"serviceGroupName\"));\r",
											"            pm.expect(responseJson.result[count].alias).to.eql(pm.collectionVariables.get(\"serviceGroupAlias\"));\r",
											"        }\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"sg\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4101] Delete the service group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new service group with name \" + pm.collectionVariables.get(\"serviceGroupName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"serviceGroupName\");\r",
											"    pm.collectionVariables.unset(\"serviceGroupAlias\");   \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4101-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "4102 - Adding a service group with a duplicate name",
					"item": [
						{
							"name": "[4102] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[4102] Add a new service group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new service group with name \" + pm.collectionVariables.get(\"serviceGroupName\") + \" and alias \" + pm.collectionVariables.get(\"serviceGroupAlias\") + \" has been added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceGroupName\", \"SG-Test-API-4102\");\r",
											"pm.collectionVariables.set(\"serviceGroupAlias\", \"Service Group API Tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}};{{serviceGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4102] Add a new service group with duplicate alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new service group with name \" + pm.collectionVariables.get(\"serviceGroupNameBis\") + \" and alias \" + pm.collectionVariables.get(\"serviceGroupAlias\") + \" has been added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceGroupNameBis\", pm.collectionVariables.get(\"serviceGroupName\").concat(\"\",\"-bis\"));\r",
											"pm.collectionVariables.set(\"serviceGroupAlias\", \"Service Group API Tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupNameBis}};{{serviceGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4102] Add a new service group with duplicate name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new service group with name \" + pm.collectionVariables.get(\"serviceGroupName\") + \" could not be created since the name was already taken.\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.collectionVariables.unset(\"serviceGroupAliasBis\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceGroupAliasBis\", \"Service Group API Tests - Duplicate Name\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}};{{serviceGroupAliasBis}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4102] List all service groups after service group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of service groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Two new service groups were added.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"})\r",
											"\r",
											"pm.test(\"These service groups have the same alias, but not the same name.\", function() {\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(responseJson.result[1].alias);\r",
											"    pm.expect(responseJson.result[0].name).to.not.eql(responseJson.result[1].name);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"sg\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4102] Delete the service group with duplicate alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new service group with name \" + pm.collectionVariables.get(\"serviceGroupNameBis\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"serviceGroupNameBis\");\r",
											"    pm.collectionVariables.unset(\"serviceGroupAlias\");   \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupNameBis}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4102] Delete the original host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new service group with name \" + pm.collectionVariables.get(\"serviceGroupName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"serviceGroupName\");});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4102-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "4103 - Adding a service group with empty fields",
					"item": [
						{
							"name": "[4103] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[4103] Add a new service group with empty alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the alias field is not mandatory for service groups, a service group with an empty alias has been created successfully.\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceGroupName\", \"SG-Test-API-4103\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}};\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4103] List service groups after service group with empty alias creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of service groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"There is a single service group in the list, and it has an empty alias.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"serviceGroupName\"));\r",
											"    pm.expect(responseJson.result[0].alias).to.eql(\"\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"sg\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4103] Delete the new service group with empty alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new service group with name \" + pm.collectionVariables.get(\"serviceGroupName\") + \"and empty alias has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"serviceGroupName\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceGroupName\", \"SG-Test-API-4103\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4103] Add a new service group with empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Since the name is an obligatory field for a service group, a service group with an empty name could not be added.\", function() {\r",
											"    pm.response.to.not.have.status(200);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceGroupAlias\", \"Service Group for API Tests - Empty name\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"sg\",\n  \"values\": \";{{serviceGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4103] List all service groups before after service group with empty name creation attempt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of service groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"There is no service group in the list.\", function() {\r",
											"    postman.setNextRequest(\"[4103-DEBUG] Delete the service group with an empty name\");\r",
											"    pm.expect(responseJson.result.length).to.eql(0);\r",
											"    pm.collectionVariables.unset(\"serviceGroupAlias\");\r",
											"    postman.setNextRequest(\"[4103-aftermath] Logout from admin user\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"sg\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4103-DEBUG] Delete the service group with an empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"[DEBUG] Service group with empty name has been successfully deleted.\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.unset(\"serviceGroupAlias\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"sg\",\n  \"values\": \"\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4103-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "4104 - Assigning services to a service group",
					"item": [
						{
							"name": "[4104] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[4104] Add a new service group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new service group with name \" + pm.collectionVariables.get(\"serviceGroupName\") + \" has been added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceGroupName\", \"SG-Test-API-4104\");\r",
											"pm.collectionVariables.set(\"serviceGroupAlias\", \"Service Group API Tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}};{{serviceGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4104] Create a new templateless host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \", IP address \" + pm.collectionVariables.get(\"hostIpAddr\") + \" and no template has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-4104\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", \"127.0.0.1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};{{hostIpAddr}};;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4104] Create a new service assigned to the host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Service \" + pm.collectionVariables.get(\"serviceDescription\") + \", with template \" + pm.collectionVariables.get(\"serviceTemplate\") + \" has been added and assigned to \" + pm.collectionVariables.get(\"hostName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceDescription\", \"Service-Test-API-4104\");\r",
											"pm.collectionVariables.set(\"serviceTemplate\", \"Base-Ping-LAN\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{serviceDescription}};{{serviceTemplate}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4104] Assign the newly created service to the service group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \" has successfully been assigned to the host group \" + pm.collectionVariables.get(\"hostGroupName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addservice\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}};{{hostName}},{{serviceDescription}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4104] List the services assigned to the service group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of services assigned to the service group has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"A single service is assigned to the service group, and it is the one we have assigned for it.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0][\"service description\"]).to.eql(pm.collectionVariables.get(\"serviceDescription\"));\r",
											"    pm.expect(responseJson.result[0][\"host name\"]).to.eql(pm.collectionVariables.get(\"hostName\"));\r",
											"    pm.collectionVariables.set(\"serviceID\", parseInt(responseJson.result[0][\"service id\"]));\r",
											"    pm.collectionVariables.set(\"hostID\", parseInt(responseJson.result[0][\"host id\"]))\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getservice\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4104] Export configuration after service creation and service group assignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4104] List all service groups assigned to the newly created service in real-time monitoring",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of service groups successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"This service is assigned to exactly one service group and it is the one we have assigned for it.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"serviceGroupName\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/services/{{serviceID}}/servicegroups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"services",
										"{{serviceID}}",
										"servicegroups"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[4104] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted, along with its service \" + pm.collectionVariables.get(\"serviceDescription\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostID\");\r",
											"    pm.collectionVariables.unset(\"hostIpAddr\");\r",
											"    pm.collectionVariables.unset(\"serviceDescription\");\r",
											"    pm.collectionVariables.unset(\"serviceTemplate\");\r",
											"    pm.collectionVariables.unset(\"serviceID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4104] Delete the service group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Service group \" + pm.collectionVariables.get(\"serviceGroupName\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"serviceGroupName\");\r",
											"    pm.collectionVariables.unset(\"serviceGroupAlias\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4104] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[4104] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[4104-aftermath] Logout from admin user\");\r",
											"}   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4104-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "4105 - Checking addmember/setmember properties on service groups",
					"item": [
						{
							"name": "[4105] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[4105] Add a new service group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new service group with name \" + pm.collectionVariables.get(\"serviceGroupName\") + \" has been added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"serviceGroupName\", \"SG-Test-API-4105\");\r",
											"pm.collectionVariables.set(\"serviceGroupAlias\", \"Service Group API Tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}};{{serviceGroupAlias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4105] Create a new templateless host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \", IP address \" + pm.collectionVariables.get(\"hostIpAddr\") + \" and no template has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-4105\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", \"127.0.0.1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};{{hostIpAddr}};;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4105] Create two services assigned to the host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const services = pm.collectionVariables.get(\"serviceList\");\r",
											"\r",
											"pm.test(\"Service \" + pm.collectionVariables.get(\"currentService\") + \" has successfully been created and assigned to \" + pm.collectionVariables.get(\"hostName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (services && services.length > 0) {\r",
											"    postman.setNextRequest(\"[4105] Create two services assigned to the host\");\r",
											"    pm.collectionVariables.set(\"serviceDescription1\", pm.collectionVariables.get(\"currentService\"));\r",
											"} else {\r",
											"    pm.collectionVariables.set(\"serviceDescription2\", pm.collectionVariables.get(\"currentService\"));\r",
											"    pm.collectionVariables.unset(\"serviceList\");\r",
											"    pm.collectionVariables.unset(\"currentService\");\r",
											"    postman.setNextRequest(\"[4105] Assign the first service to the service group using addservice\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let services = pm.collectionVariables.get(\"serviceList\");\r",
											"\r",
											"if(!services || services.length == 0) {\r",
											"    services = [\"4105-Service-Test-API-1\", \"4105-Service-Test-API-2\"];\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentService\", services.shift());\r",
											"pm.collectionVariables.set(\"serviceList\", services);\r",
											"pm.collectionVariables.set(\"serviceTemplate\", \"Base-Ping-LAN\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"service\",\n  \"values\": \"{{hostName}};{{currentService}};{{serviceTemplate}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4105] Assign the first service to the service group using addservice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service \" + pm.collectionVariables.get(\"serviceDescription1\") + \" has been successfully added as a member of the service group \" + pm.collectionVariables.get(\"serviceGroupName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addservice\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}};{{hostName}},{{serviceDescription1}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4105] Get the members of the service group after addservice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of members of the service group has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"This service group has exactly one member: the service that we assigned in the previous request.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0][\"service description\"]).to.eql(pm.collectionVariables.get(\"serviceDescription1\"));\r",
											"    pm.expect(responseJson.result[0][\"host name\"]).to.eql(pm.collectionVariables.get(\"hostName\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getservice\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4105] Assign the second service to the service group using setservice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service \" + pm.collectionVariables.get(\"serviceDescription2\") + \" has been successfully set as a member of the service group \" + pm.collectionVariables.get(\"serviceGroupName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setservice\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}};{{hostName}},{{serviceDescription2}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4105] Get the members of the service group after setservice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of members of the service group has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"This service group has exactly one member: the service \" + pm.collectionVariables.get(\"serviceDescription2\") + \" that we assigned in the previous request, since the previous command has overwritten any previous definition of the services assigned to the service group.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"    pm.expect(responseJson.result[0][\"service description\"]).to.eql(pm.collectionVariables.get(\"serviceDescription2\"));\r",
											"    pm.expect(responseJson.result[0][\"host name\"]).to.eql(pm.collectionVariables.get(\"hostName\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getservice\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4105] Assign the first service to the service group using second addservice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service \" + pm.collectionVariables.get(\"serviceDescription1\") + \" has been successfully added as a member of the service group \" + pm.collectionVariables.get(\"serviceGroupName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addservice\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}};{{hostName}},{{serviceDescription1}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4105] Get the members of the service group after second addservice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of members of the service group has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"This service group has exactly two  members, listed in chronological order of addition.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"    pm.expect(responseJson.result[0][\"service description\"]).to.eql(pm.collectionVariables.get(\"serviceDescription2\"));\r",
											"    pm.expect(responseJson.result[0][\"host name\"]).to.eql(pm.collectionVariables.get(\"hostName\"));\r",
											"    pm.expect(responseJson.result[1][\"service description\"]).to.eql(pm.collectionVariables.get(\"serviceDescription1\"));\r",
											"    pm.expect(responseJson.result[1][\"host name\"]).to.eql(pm.collectionVariables.get(\"hostName\"));\r",
											"    pm.collectionVariables.unset(\"serviceDescription1\");\r",
											"    pm.collectionVariables.unset(\"serviceDescription2\");\r",
											"    pm.collectionVariables.unset(\"serviceTemplate\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getservice\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4105] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted, along with the services associated to it.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostIpAddr\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4105] Delete the service group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Service group \" + pm.collectionVariables.get(\"serviceGroupName\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"serviceGroupName\");\r",
											"    pm.collectionVariables.unset(\"serviceGroupAlias\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"sg\",\n  \"values\": \"{{serviceGroupName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[4105-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "4106 - Disabling/enabling a service group [placeholder]",
					"item": []
				},
				{
					"name": "4107 - Setting and getting parameters for a service group [v1]",
					"item": []
				},
				{
					"name": "4108 - Setting and getting parameters for a service group [v2]",
					"item": []
				}
			]
		},
		{
			"name": "42 - Service template management",
			"item": []
		},
		{
			"name": "43 - Service category management",
			"item": []
		},
		{
			"name": "44 - Metaservice management",
			"item": []
		},
		{
			"name": "50 - Configuration export management",
			"item": []
		},
		{
			"name": "51 - Dependencies management",
			"item": []
		},
		{
			"name": "52 - Command management",
			"item": []
		},
		{
			"name": "53 - Comment management",
			"item": []
		},
		{
			"name": "54 - User filter management",
			"item": []
		},
		{
			"name": "60 - Downtime management",
			"item": [
				{
					"name": "6001 - Add a downtime on a host",
					"item": [
						{
							"name": "[6001] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[6001] Create a new templateless host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \", IP address \" + pm.collectionVariables.get(\"hostIpAddr\") + \" and no template has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-6001\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", \"127.0.0.1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};{{hostIpAddr}};;central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[6001] Export configuration after host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[6001] Get host's ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"hostID\", responseJson.result[0].id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?search={\"host.name\":\"{{hostName}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "{\"host.name\":\"{{hostName}}\"}"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[6001] List downtimes for the host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of downtimes has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"As of now, no downtime has been added for the host that was just created.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(0);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/downtimes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"downtimes"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[6001] Add downtime on the selected host",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.6/dayjs.min.js\", (err, res) => {",
											"    dayjs_code = res.text();",
											"    eval(dayjs_code);",
											"    new Function(dayjs_code)();",
											"    pm.collectionVariables.set(\"startTime\", this.dayjs().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
											"    pm.collectionVariables.set(\"endTime\", this.dayjs().add(2, 'hours').format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
											"});",
											"",
											"    pm.collectionVariables.set(\"downtimeComment\", \"This is a downtime set by the v2 API.\");",
											"    pm.collectionVariables.set(\"withServicesBoolean\", false);",
											"    pm.collectionVariables.set(\"fixOrFlexibleBoolean\", true);",
											"    pm.collectionVariables.set(\"durationFlexibleDowntime\", 3600);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The downtime has been successfully implemented.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"setTimeout(function(){}, [10000]);\r",
											"pm.collectionVariables.unset(\"durationFlexibleDowntime\");\r",
											"pm.collectionVariables.unset(\"withServicesBoolean\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-auth-token",
										"value": "{{token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"start_time\": \"{{startTime}}\",\n    \"end_time\": \"{{endTime}}\",\n    \"is_fixed\": {{fixOrFlexibleBoolean}},\n    \"duration\": {{durationFlexibleDowntime}},\n    \"author_id\": {{currentUserID}},\n    \"comment\": \"{{downtimeComment}}\",\n    \"with_services\": {{withServicesBoolean}}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/downtimes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"downtimes"
									]
								}
							},
							"response": []
						},
						{
							"name": "[6001] List downtimes for the host after downtime application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of downtimes has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"A downtime has been added for the host \" + pm.collectionVariables.get(\"hostName\") + \".\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(1);\r",
											"})\r",
											"\r",
											"pm.test(\"This downtime features the data we have input when we assigned it to the host.\", function() {\r",
											"    pm.expect(responseJson.result[0].host_id).to.eql(pm.collectionVariables.get(\"hostID\"));\r",
											"    pm.expect(responseJson.result[0].author_name).to.eql(pm.environment.get(\"api_login\"));\r",
											"    pm.expect(responseJson.result[0].author_id).to.eql(pm.environment.get(\"currentUserID\"));\r",
											"    pm.expect(responseJson.result[0].is_fixed).to.eql(pm.collectionVariables.get(\"fixOrFlexibleBoolean\"));\r",
											"    pm.expect(responseJson.result[0].comment).to.eql(pm.collectionVariables.get(\"downtimeComment\"));\r",
											"})\r",
											"\r",
											"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.6/dayjs.min.js\", (err, res) => {\r",
											"    dayjs_code = res.text();\r",
											"    eval(dayjs_code);\r",
											"    new Function(dayjs_code)();\r",
											"    pm.test(\"This downtime has been applied at the moment we expected it to, and ends when it is supposed to.\", function() {\r",
											"        pm.expect(responseJson.result[0].start_time).to.eql(pm.collectionVariables.get(\"startTime\"));\r",
											"        pm.expect(this.dayjs(responseJson.result[0].actual_start_time).diff(responseJson.result[0].start_time,\"ms\")).to.be.below(5000);\r",
											"        pm.expect(responseJson.result[0].end_time).to.eql(pm.collectionVariables.get(\"endTime\"));\r",
											"        pm.expect(responseJson.result[0].duration).to.eql(this.dayjs(responseJson.result[0].end_time).diff(responseJson.result[0].start_time,\"s\"));\r",
											"        pm.collectionVariables.unset(\"startTime\");\r",
											"        pm.collectionVariables.unset(\"endTime\");\r",
											"    })\r",
											"})\r",
											"\r",
											"pm.test(\"The downtime is ongoing: it has not been cancelled.\", function() {\r",
											"    pm.expect(responseJson.result[0].is_cancelled).to.eql(false);\r",
											"    pm.collectionVariables.set(\"downtimeID\", responseJson.result[0].id);\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/downtimes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"downtimes"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[6001] Cancel the downtime that was just set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The downtime has been successfully cancelled.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"setTimeout(function(){}, [10000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/downtimes/{{downtimeID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"downtimes",
										"{{downtimeID}}"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[6001] List downtimes for the host after downtime cancel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of downtimes has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Although the downtime of the host \" + pm.collectionVariables.get(\"hostName\") + \" has been cancelled, it still appears in the downtime list for this host.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(1);\r",
											"})\r",
											"\r",
											"pm.test(\"This downtime still features the data we have input when we assigned it to the host.\", function() {\r",
											"    pm.expect(responseJson.result[0].host_id).to.eql(pm.collectionVariables.get(\"hostID\"));\r",
											"    pm.expect(responseJson.result[0].author_name).to.eql(pm.environment.get(\"api_login\"));\r",
											"    pm.expect(responseJson.result[0].author_id).to.eql(pm.environment.get(\"currentUserID\"));\r",
											"    pm.expect(responseJson.result[0].is_fixed).to.eql(pm.collectionVariables.get(\"fixOrFlexibleBoolean\"));\r",
											"    pm.collectionVariables.unset(\"fixOrFlexibleBoolean\");\r",
											"    pm.expect(responseJson.result[0].comment).to.eql(pm.collectionVariables.get(\"downtimeComment\"));\r",
											"    pm.collectionVariables.unset(\"downtimeComment\");\r",
											"})\r",
											"\r",
											"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.6/dayjs.min.js\", (err, res) => {\r",
											"    dayjs_code = res.text();\r",
											"    eval(dayjs_code);\r",
											"    new Function(dayjs_code)();\r",
											"    pm.test(\"This downtime has been cancelled: its actual end time has just taken place.\", function() {\r",
											"        pm.expect(responseJson.result[0].is_cancelled).to.eql(true);\r",
											"        pm.expect(this.dayjs().diff(responseJson.result[0].actual_end_time,\"s\")).to.be.below(15);\r",
											"        pm.collectionVariables.unset(\"downtimeID\");\r",
											"    })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/downtimes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"downtimes"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[6001] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostAlias\");   \r",
											"    pm.collectionVariables.unset(\"hostID\");\r",
											"    pm.collectionVariables.unset(\"hostIpAddr\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[6001] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[6001] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[6001-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[6001-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "6002 - Add a downtime on a host and its services",
					"item": [
						{
							"name": "[6002] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[6002] Create a new host with a template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \", IP address \" + pm.collectionVariables.get(\"hostIpAddr\") + \" and template \" + pm.collectionVariables.get(\"hostTemplate\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-6002\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", pm.environment.get(\"server\"));\r",
											"pm.collectionVariables.set(\"hostTemplate\", \"App-Monitoring-Centreon-Central-Custom\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};{{hostIpAddr}};{{hostTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[6002] Apply host template on host to generate services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The template \" + pm.collectionVariables.get(\"hostTemplate\") + \" has been successfully applied to the host \" + pm.collectionVariables.get(\"hostName\") + \", and as such new services were created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"applytpl\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[6002] Export configuration after host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[6002] Get the host's ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"hostID\", responseJson.result[0].id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?search={\"host.name\":\"{{hostName}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "{\"host.name\":\"{{hostName}}\"}"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[6002] Get number of services the host has",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of services has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"numberOfServicesAssignedToHost\", responseJson.meta.total);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"services"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[6002] Add downtime on the selected host and its services",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.6/dayjs.min.js\", (err, res) => {",
											"    dayjs_code = res.text();",
											"    eval(dayjs_code);",
											"    new Function(dayjs_code)();",
											"    pm.collectionVariables.set(\"startTime\", this.dayjs().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
											"    pm.collectionVariables.set(\"endTime\", this.dayjs().add(2, 'hours').format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
											"});",
											"",
											"    pm.collectionVariables.set(\"downtimeComment\", \"This is a downtime set by the v2 API.\");",
											"    pm.collectionVariables.set(\"withServicesBoolean\", true);",
											"    pm.collectionVariables.set(\"fixOrFlexibleBoolean\", true);",
											"    pm.collectionVariables.set(\"durationFlexibleDowntime\", 3600);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The downtime has been successfully implemented.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"setTimeout(function(){}, [10000]);\r",
											"pm.collectionVariables.unset(\"durationFlexibleDowntime\");\r",
											"pm.collectionVariables.unset(\"withServicesBoolean\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-auth-token",
										"value": "{{token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"start_time\": \"{{startTime}}\",\n    \"end_time\": \"{{endTime}}\",\n    \"is_fixed\": {{fixOrFlexibleBoolean}},\n    \"duration\": {{durationFlexibleDowntime}},\n    \"author_id\": {{currentUserID}},\n    \"comment\": \"{{downtimeComment}}\",\n    \"with_services\": {{withServicesBoolean}}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/downtimes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"downtimes"
									]
								}
							},
							"response": []
						},
						{
							"name": "[6002] List downtimes for the host after downtime application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of downtimes has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"A downtime has been added for the host \" + pm.collectionVariables.get(\"hostName\") + \".\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(1);\r",
											"})\r",
											"\r",
											"pm.test(\"This downtime features the data we have input when we assigned it to the host.\", function() {\r",
											"    pm.expect(responseJson.result[0].host_id).to.eql(pm.collectionVariables.get(\"hostID\"));\r",
											"    pm.expect(responseJson.result[0].author_name).to.eql(pm.environment.get(\"api_login\"));\r",
											"    pm.expect(responseJson.result[0].author_id).to.eql(pm.environment.get(\"currentUserID\"));\r",
											"    pm.expect(responseJson.result[0].is_fixed).to.eql(pm.collectionVariables.get(\"fixOrFlexibleBoolean\"));\r",
											"    pm.expect(responseJson.result[0].comment).to.eql(pm.collectionVariables.get(\"downtimeComment\"));\r",
											"})\r",
											"\r",
											"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.6/dayjs.min.js\", (err, res) => {\r",
											"    dayjs_code = res.text();\r",
											"    eval(dayjs_code);\r",
											"    new Function(dayjs_code)();\r",
											"    pm.test(\"This downtime has been applied at the moment we expected it to, and ends when it is supposed to.\", function() {\r",
											"        pm.expect(responseJson.result[0].start_time).to.eql(pm.collectionVariables.get(\"startTime\"));\r",
											"        pm.expect(this.dayjs(responseJson.result[0].actual_start_time).diff(responseJson.result[0].start_time,\"ms\")).to.be.below(5000);\r",
											"        pm.expect(responseJson.result[0].end_time).to.eql(pm.collectionVariables.get(\"endTime\"));\r",
											"        pm.expect(responseJson.result[0].duration).to.eql(this.dayjs(responseJson.result[0].end_time).diff(responseJson.result[0].start_time,\"s\"));\r",
											"    })\r",
											"})\r",
											"\r",
											"pm.test(\"The downtime is ongoing: it has not been cancelled.\", function() {\r",
											"    pm.expect(responseJson.result[0].is_cancelled).to.eql(false);\r",
											"    pm.collectionVariables.set(\"downtimeID\", responseJson.result[0].id);\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/downtimes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"downtimes"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[6002] List service downtimes after downtime applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of service downtimes has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The listed downtimes were all set on services that belong to the same host, \" + pm.collectionVariables.get(\"hostName\") + \".\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(responseJson.meta.total);\r",
											"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"numberOfServicesAssignedToHost\"));\r",
											"    for(let count = 0; count < responseJson.result.length; count++) {\r",
											"        pm.expect(responseJson.result[0].host_id).to.eql(pm.collectionVariables.get(\"hostID\"));\r",
											"    }\r",
											"})\r",
											"\r",
											"pm.test(\"The listed downtimes all have different IDs from each other and from the host's.\", function() {\r",
											"    for(let count = 0; count < responseJson.result.length; count++) {\r",
											"        pm.expect(responseJson.result[count].id).to.not.eql(pm.collectionVariables.get(\"downtimeID\"));\r",
											"    }\r",
											"})\r",
											"\r",
											"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.6/dayjs.min.js\", (err, res) => {\r",
											"    dayjs_code = res.text();\r",
											"    eval(dayjs_code);\r",
											"    new Function(dayjs_code)();\r",
											"    pm.test(\"Nonetheless, they all feature the exact same information as their host counterpart.\", function() {\r",
											"        for(let count = 0; count < responseJson.result.length; count++) {\r",
											"            pm.expect(responseJson.result[count].start_time).to.eql(pm.collectionVariables.get(\"startTime\"));\r",
											"            pm.expect(this.dayjs(responseJson.result[count].actual_start_time).diff(responseJson.result[count].start_time,\"ms\")).to.be.below(5000);\r",
											"            pm.expect(responseJson.result[count].end_time).to.eql(pm.collectionVariables.get(\"endTime\"));\r",
											"            pm.expect(responseJson.result[count].duration).to.eql(this.dayjs(responseJson.result[count].end_time).diff(responseJson.result[count].start_time,\"s\"));\r",
											"            pm.expect(responseJson.result[count].comment).to.eql(pm.collectionVariables.get(\"downtimeComment\"));\r",
											"            pm.expect(responseJson.result[count].author_name).to.eql(pm.environment.get(\"api_login\"));\r",
											"            pm.expect(responseJson.result[count].author_id).to.eql(pm.environment.get(\"currentUserID\"));\r",
											"            pm.expect(responseJson.result[count].is_fixed).to.eql(pm.collectionVariables.get(\"fixOrFlexibleBoolean\"));        \r",
											"        }\r",
											"    })\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/services/downtimes?search={\"host.id\":\"{{hostID}}\"}&limit={{numberOfServicesAssignedToHost}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"services",
										"downtimes"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"host.id\":\"{{hostID}}\"}"
										},
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "{{numberOfServicesAssignedToHost}}"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[6002] Cancel the downtime that was just set on the host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The downtime has been successfully cancelled.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"setTimeout(function(){}, [10000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/downtimes/{{downtimeID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"downtimes",
										"{{downtimeID}}"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[6002] List service downtimes after downtime applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of service downtimes has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The listed downtimes were all set on services that belong to the same host, \" + pm.collectionVariables.get(\"hostName\") + \".\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(responseJson.meta.total);\r",
											"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"numberOfServicesAssignedToHost\"));\r",
											"    for(let count = 0; count < responseJson.result.length; count++) {\r",
											"        pm.expect(responseJson.result[count].host_id).to.eql(pm.collectionVariables.get(\"hostID\"));\r",
											"    }\r",
											"})\r",
											"\r",
											"pm.test(\"The listed downtimes all have different IDs from each other and from the host's.\", function() {\r",
											"    for(let count = 0; count < responseJson.result.length; count++) {\r",
											"        pm.expect(responseJson.result[count].id).to.not.eql(pm.collectionVariables.get(\"downtimeID\"));\r",
											"    }\r",
											"})\r",
											"\r",
											"pm.test(\"Although the host's downtime is cancelled, it has not cancelled any service downtime.\", function() {\r",
											"    for(let count = 0; count < responseJson.result.length; count++) {\r",
											"        pm.expect(responseJson.result[count].is_cancelled).to.eql(false);\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/services/downtimes?search={\"host.id\":\"{{hostID}}\"}&limit={{numberOfServicesAssignedToHost}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"services",
										"downtimes"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"host.id\":\"{{hostID}}\"}"
										},
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "{{numberOfServicesAssignedToHost}}"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[6002] Delete the new host and its associated services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostAlias\");   \r",
											"    pm.collectionVariables.unset(\"hostID\");\r",
											"    pm.collectionVariables.unset(\"hostTemplate\");\r",
											"    pm.collectionVariables.unset(\"hostIpAddr\");\r",
											"    pm.collectionVariables.unset(\"numberOfServicesAssignedToHost\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[6002] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[6002] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[6002-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[6002-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "61 - Recurrent downtime management",
			"item": []
		},
		{
			"name": "70 - Acknowledgement management",
			"item": []
		},
		{
			"name": "80 - ACL Management",
			"item": [
				{
					"name": "8007 - Configuring ACLs for a non-admin user to add a downtime on a host",
					"item": [
						{
							"name": "[8007] Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and does not have admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[8007] Create a new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"hostName\") + \", with alias \" + pm.collectionVariables.get(\"hostName\") + \", IP address \" + pm.collectionVariables.get(\"hostIpAddr\") + \" and template \" + pm.collectionVariables.get(\"hostTemplate\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"hostName\", \"Host-Test-API-8007\");\r",
											"pm.collectionVariables.set(\"hostIpAddr\", \"127.0.0.1\");\r",
											"pm.collectionVariables.set(\"hostTemplate\", \"generic-active-host-custom\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}};{{hostName}};{{hostIpAddr}};{{hostTemplate}};central;\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[8007] Add a new non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserName\") + \" has been successfully created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserName\", \"User-Test-API-8007\");\r",
											"pm.collectionVariables.set(\"testUserLogin\", \"testUser\");\r",
											"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");\r",
											"pm.collectionVariables.set(\"testUserPassword\", \"Centreon!2021\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserName}};{{testUserLogin}};{{testUserEmail}};{{testUserPassword}};0;1;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[8007] Add access to API configuration & realtime to the new user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"let values = pm.collectionVariables.get(\"listOfValues\");\r",
											"let parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"reach_api\", \"reach_api_rt\"];\r",
											"    values = [1, 1];\r",
											"}\r",
											"\r",
											"let currentParameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"currentParameter\", currentParameter);\r",
											"pm.collectionVariables.set(\"listOfParameters\", parameters);\r",
											"let currentValue = values.shift();\r",
											"pm.collectionVariables.set(\"currentValue\", currentValue);\r",
											"pm.collectionVariables.set(\"listOfValues\", values);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
											"\r",
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"currentParameter\") + \" was updated with \" + pm.collectionVariables.get(\"currentValue\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"[8007] Add access to API configuration & realtime to the new user\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentParameter\");\r",
											"    pm.collectionVariables.unset(\"currentValue\");\r",
											"    pm.collectionVariables.unset(\"listOfParameters\");\r",
											"    pm.collectionVariables.unset(\"listOfValues\");\r",
											"    postman.setNextRequest(\"[8007] Export configuration after host creation\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\":\"setparam\",\r\n  \"object\":\"contact\",\r\n  \"values\": \"{{testUserLogin}};{{currentParameter}};{{currentValue}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[8007] Export configuration after host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"\r",
											"pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[8007] Get host's ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"hostID\", responseJson.result[0].id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?search={\"host.name\":\"{{hostName}}\"}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "{\"host.name\":\"{{hostName}}\"}"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[8007] Add an ACL group",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"aclGroupName\", \"ACL-TEST-8007\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new ACL group with name \" + pm.collectionVariables.get(\"aclGroupName\") + \" and alias \" + pm.collectionVariables.get(\"aclGroupName\") + \" has been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"{{aclGroupName}};{{aclGroupName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[8007] Add user to ACL group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"New user \" + pm.collectionVariables.get(\"testUserName\") + \" has been added to ACL Group \" + pm.collectionVariables.get(\"aclGroupName\") + \".\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addcontact\",\n  \"object\": \"aclgroup\",\n  \"values\": \"{{aclGroupName}};{{testUserLogin}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[8007] Add ACLs for resources, menus and actions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new \" + pm.collectionVariables.get(\"currentObject\") + \" with name \" + pm.collectionVariables.get(\"currentValue\") + \" and alias \" + pm.collectionVariables.get(\"currentValue\") + \" has been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let objects = pm.collectionVariables.get(\"listOfObjects\");\r",
											"\r",
											"if (objects && objects.length > 0) {\r",
											"    postman.setNextRequest(\"[8007] Add ACLs for resources, menus and actions\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentObject\");\r",
											"    pm.collectionVariables.unset(\"currentValue\");\r",
											"    pm.collectionVariables.unset(\"listOfObjects\");\r",
											"    pm.collectionVariables.unset(\"listOfValues\");\r",
											"    let aclsCreated = pm.collectionVariables.get(\"aclsCreated\");\r",
											"    pm.collectionVariables.set(\"aclResourceName\", aclsCreated[0]);\r",
											"    pm.collectionVariables.set(\"aclMenuName\", aclsCreated[1]);\r",
											"    pm.collectionVariables.set(\"aclActionName\", aclsCreated[2]);\r",
											"    postman.setNextRequest(\"[8007] Grant the new host to new ACL Resource\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let listOfObjects = pm.collectionVariables.get(\"listOfObjects\");\r",
											"let aclsCreated = pm.collectionVariables.get(\"aclsCreated\");\r",
											"if (!listOfObjects || listOfObjects.length == 0) {\r",
											"    listOfObjects = [\"aclresource\", \"aclmenu\", \"aclaction\"];\r",
											"    listOfValues = [\"ACL-TEST-RESOURCE-8007\", \"ACL-TEST-MENU-8007\", \"ACL-TEST-ACTION-8007\"];\r",
											"    aclsCreated = [];\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentObject\", listOfObjects.shift());\r",
											"pm.collectionVariables.set(\"listOfObjects\", listOfObjects);\r",
											"\r",
											"pm.collectionVariables.set(\"currentValue\", listOfValues.shift());\r",
											"pm.collectionVariables.set(\"listOfValues\", listOfValues);\r",
											"\r",
											"aclsCreated.push(pm.collectionVariables.get(\"currentValue\"));\r",
											"pm.collectionVariables.set(\"aclsCreated\", aclsCreated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"{{currentObject}}\",\n  \"values\": \"{{currentValue}};{{currentValue}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[8007] Grant the new host to new ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host \" + pm.collectionVariables.get(\"hostName\") + \" has been granted to ACL resource \" + pm.collectionVariables.get(\"aclResourceName\") + \".\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"grant_host\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{aclResourceName}};{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[8007] Grant menus to new ACL Menus",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"New menu 'Resource Status' has been granted to ACL menu \" + pm.collectionVariables.get(\"aclMenuName\")+ \" .\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"grantrw\",\n  \"object\": \"ACLMENU\",\n  \"values\": \"{{aclMenuName}};1;Monitoring;Resources Status\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[8007] Grant actions to new ACL Actions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"New action 'host_schedule_downtime' has been granted to ACL action \" + pm.collectionVariables.get(\"aclActionName\") + \".\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"grant\",\n  \"object\": \"ACLACTION\",\n  \"values\": \"{{aclActionName}};host_schedule_downtime\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[8007] Add New ACLs to ACL Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The ACL \" + pm.collectionVariables.get(\"currentACL\") + \" has been added to the ACL Group \" + pm.collectionVariables.get(\"aclGroupName\") + \".\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let actions = pm.collectionVariables.get(\"listOfActions\");",
											"",
											"if (actions && actions.length > 0) {",
											"    postman.setNextRequest(\"[8007] Add New ACLs to ACL Group\");",
											"} else {",
											"    pm.collectionVariables.unset(\"currrentAction\");",
											"    pm.collectionVariables.unset(\"currentACL\");",
											"    pm.collectionVariables.unset(\"listOfActions\");",
											"    pm.collectionVariables.unset(\"listOfACLs\");",
											"    postman.setNextRequest(\"[8007] Login on non-admin user\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let listOfActions = pm.collectionVariables.get(\"listOfActions\");\r",
											"if (!listOfActions || listOfActions.length == 0) {\r",
											"    listOfActions = [\"addresource\", \"addmenu\", \"addaction\"];\r",
											"    listOfACLs = [pm.collectionVariables.get(\"aclResourceName\"), pm.collectionVariables.get(\"aclMenuName\"), pm.collectionVariables.get(\"aclActionName\")];\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentAction\", listOfActions.shift());\r",
											"pm.collectionVariables.set(\"listOfActions\", listOfActions);\r",
											"\r",
											"pm.collectionVariables.set(\"currentACL\", listOfACLs.shift());\r",
											"pm.collectionVariables.set(\"listOfACLs\", listOfACLs);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"object\": \"aclgroup\",\n  \"values\": \"{{aclGroupName}};{{currentACL}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[8007] Login on non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and does not have admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get(\"testUserLogin\"));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"pm.collectionVariables.set(\"testUserID\", responseJson.contact.id);\r",
											"\r",
											"setTimeout(function(){}, [20000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{testUserLogin}}\",\n      \"password\": \"{{testUserPassword}}\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to retrieve an authentication token."
							},
							"response": []
						},
						{
							"name": "[8007] Add downtime on the selected host",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.6/dayjs.min.js\", (err, res) => {",
											"    dayjs_code = res.text();",
											"    eval(dayjs_code);",
											"    new Function(dayjs_code)();",
											"    pm.collectionVariables.set(\"startTime\", this.dayjs().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
											"    pm.collectionVariables.set(\"endTime\", this.dayjs().add(2, 'hours').format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
											"});",
											"",
											"    pm.collectionVariables.set(\"downtimeComment\", \"This is a downtime set by the v2 API with user \" + pm.collectionVariables.get(\"testUserName\") + \".\");",
											"    pm.collectionVariables.set(\"withServicesBoolean\", true);",
											"    pm.collectionVariables.set(\"fixOrFlexibleBoolean\", true);",
											"    pm.collectionVariables.set(\"durationFlexibleDowntime\", 3600);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The downtime has been successfully implemented.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"setTimeout(function(){}, [10000]);\r",
											"pm.collectionVariables.unset(\"durationFlexibleDowntime\");\r",
											"pm.collectionVariables.unset(\"withServicesBoolean\");\r",
											"pm.collectionVariables.unset(\"fixOrFlexibleBoolean\");\r",
											"pm.collectionVariables.unset(\"startTime\");\r",
											"pm.collectionVariables.unset(\"endTime\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-auth-token",
										"value": "{{token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"start_time\": \"{{startTime}}\",\n    \"end_time\": \"{{endTime}}\",\n    \"is_fixed\": {{fixOrFlexibleBoolean}},\n    \"duration\": {{durationFlexibleDowntime}},\n    \"author_id\": {{currentUserID}},\n    \"comment\": \"{{downtimeComment}}\",\n    \"with_services\": {{withServicesBoolean}}\n}\n\n"
								},
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/downtimes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"downtimes"
									]
								}
							},
							"response": []
						},
						{
							"name": "[8007] Login with admin user after downtime application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials and does not have admin rights\", function () {\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"token\", responseJson.security.token);\r",
											"pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[8007] List downtimes for the host after downtime application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of downtimes has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"A downtime has been added for the host \" + pm.collectionVariables.get(\"hostName\") + \".\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(1);\r",
											"})\r",
											"\r",
											"pm.test(\"This downtime has been applied on the host we created, using the non-admin user for which we have configured proper rights through the ACLs.\", function() {\r",
											"    pm.expect(responseJson.result[0].host_id).to.eql(pm.collectionVariables.get(\"hostID\"));\r",
											"    pm.expect(responseJson.result[0].author_name).to.eql(pm.collectionVariables.get(\"testUserLogin\"));\r",
											"    pm.expect(responseJson.result[0].author_id).to.eql(pm.collectionVariables.get(\"testUserID\"));\r",
											"    pm.expect(responseJson.result[0].comment).to.eql(pm.collectionVariables.get(\"downtimeComment\"));\r",
											"    pm.collectionVariables.unset(\"downtimeComment\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{hostID}}/downtimes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{hostID}}",
										"downtimes"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": []
						},
						{
							"name": "[8007] Delete the non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"testUserLogin\");\r",
											"    pm.collectionVariables.unset(\"testUserName\");\r",
											"    pm.collectionVariables.unset(\"testUserPassword\");\r",
											"    pm.collectionVariables.unset(\"testUserEmail\");\r",
											"    pm.collectionVariables.unset(\"testUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[8007] Delete the new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new host with name \" + pm.collectionVariables.get(\"hostName\") + \" has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"hostName\");\r",
											"    pm.collectionVariables.unset(\"hostAlias\");   \r",
											"    pm.collectionVariables.unset(\"hostID\");\r",
											"    pm.collectionVariables.unset(\"hostTemplate\");\r",
											"    pm.collectionVariables.unset(\"hostIpAddr\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"host\",\n  \"values\": \"{{hostName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[8007] Delete all ACLs and ACL group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The new \" + pm.collectionVariables.get(\"currentObject\") + \" with name \" + pm.collectionVariables.get(\"currentValue\") + \" and alias \" + pm.collectionVariables.get(\"currentValue\") + \" has been deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let objects = pm.collectionVariables.get(\"listOfObjects\");\r",
											"\r",
											"if (objects && objects.length > 0) {\r",
											"    postman.setNextRequest(\"[8007] Delete all ACLs and ACL group\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"currentObject\");\r",
											"    pm.collectionVariables.unset(\"currentValue\");\r",
											"    pm.collectionVariables.unset(\"listOfObjects\");\r",
											"    pm.collectionVariables.unset(\"listOfValues\");\r",
											"\r",
											"    postman.setNextRequest(\"[8007] Export configuration after host deletion\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let listOfObjects = pm.collectionVariables.get(\"listOfObjects\");\r",
											"\r",
											"if (!listOfObjects || listOfObjects.length == 0) {\r",
											"    listOfObjects = [\"aclresource\", \"aclmenu\", \"aclaction\", \"aclgroup\"];\r",
											"    listOfValues = pm.collectionVariables.get(\"aclsCreated\");\r",
											"    listOfValues.push(pm.collectionVariables.get(\"aclGroupName\"));\r",
											"    pm.collectionVariables.unset(\"aclsCreated\");\r",
											"    pm.collectionVariables.unset(\"aclGroupName\");\r",
											"    pm.collectionVariables.unset(\"aclResourceName\");\r",
											"    pm.collectionVariables.unset(\"aclMenuName\");\r",
											"    pm.collectionVariables.unset(\"aclActionName\");\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"currentObject\", listOfObjects.shift());\r",
											"pm.collectionVariables.set(\"listOfObjects\", listOfObjects);\r",
											"\r",
											"pm.collectionVariables.set(\"currentValue\", listOfValues.shift());\r",
											"pm.collectionVariables.set(\"listOfValues\", listOfValues);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"{{currentObject}}\",\n  \"values\": \"{{currentValue}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[8007] Export configuration after host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const actions = pm.collectionVariables.get(\"actionList\");\r",
											"\r",
											"if (actions && actions.length > 0) {\r",
											"    postman.setNextRequest(\"[8007] Export configuration after host deletion\");\r",
											"    pm.test(\"Configuration is being exported (intermediary step \" + pm.collectionVariables.get(\"currentAction\") + \").\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"} else {\r",
											"    setTimeout(function(){}, [pm.environment.get(\"exportTimeoutInMilliseconds\")]);\r",
											"    pm.test(\"The configuration has been successfully exported.\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.collectionVariables.unset(\"actionList\");\r",
											"    pm.collectionVariables.unset(\"currentAction\");\r",
											"    postman.setNextRequest(\"[8007-aftermath] Logout from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let actions = pm.collectionVariables.get(\"actionList\");\r",
											"let actionsCreated = pm.collectionVariables.get(\"actionsCreated\");\r",
											"\r",
											"if(!actions || actions.length == 0) {\r",
											"    actions = [\"POLLERGENERATE\", \"POLLERTEST\", \"CFGMOVE\", \"POLLERRESTART\"];\r",
											"}\r",
											"\r",
											"let currentAction = actions.shift();\r",
											"pm.collectionVariables.set(\"currentAction\", currentAction);\r",
											"pm.collectionVariables.set(\"actionList\", actions);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"{{currentAction}}\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[8007-aftermath] Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected (Successful logout).\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"token\");\r",
											"pm.environment.unset(\"currentUserName\");\r",
											"pm.environment.unset(\"currentUserID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}