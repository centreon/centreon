{
	"info": {
		"_postman_id": "c9abdc91-3f82-4793-becb-4bbcc38f5198",
		"name": "Host",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16182525",
		"_collection_link": "https://centreon-api-v2-configuration.postman.co/workspace/API-v2~d8660f05-3c64-4c5b-af73-1a5543bff4e1/collection/16182525-c9abdc91-3f82-4793-becb-4bbcc38f5198?action=share&source=collection_link&creator=16182525"
	},
	"item": [
		{
			"name": "Log in as Admin    ",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user_with_RW_rights    ",
			"item": [
				{
					"name": "Add user_with_RW_rights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_RW\", \"user_with_RW_rights\");\r",
									"pm.collectionVariables.set(\"api_password_user_RW\", \"Centreon!123\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};{{api_login_user_RW}};{{api_login_user_RW}}@localhost;{{api_password_user_RW}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;RW_ALL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;{{api_login_user_RW}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu RW",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RW right",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Read/Write rights has been successfully.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;1;Configuration\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RW to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user_with_RW_rights_filters    ",
			"item": [
				{
					"name": "Add user_with_RW_rights_filters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_RW_filters\", \"user_with_RW_rights_filters\");\r",
									"pm.collectionVariables.set(\"api_password_user_RW_filters\", \"Centreon!123\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW_filters}};{{api_login_user_RW_filters}};{{api_login_user_RW_filters}}@localhost;{{api_password_user_RW_filters}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW_filters}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW_filters}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RW_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_limited;RW_limited\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RW_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_limited;{{api_login_user_RW_filters}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Resources limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLRESOURCE\",\r\n  \"values\": \"limited;limited\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RW_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_limited;limited\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RW to RW_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_limited;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user_with_R_rights    ",
			"item": [
				{
					"name": "Add user_with_R_rights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_Read\", \"user_with_R_rights\");\r",
									"pm.collectionVariables.set(\"api_password_user_Read\", \"Centreon!123\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read}};{{api_login_user_Read}};{{api_login_user_Read}}@localhost;{{api_password_user_Read}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;RO_ALL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;{{api_login_user_Read}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu RO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RO;RO\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RO right",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Read Only rights has been successfully.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantro\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RO;1;Configuration\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RO to RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;RO\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user_with_R_rights_filters      ",
			"item": [
				{
					"name": "Add user_with_R_rights_filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_Read_filters\", \"user_with_R_rights_filters\");\r",
									"pm.collectionVariables.set(\"api_password_user_Read_filters\", \"Centreon!123\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read_filters}};{{api_login_user_Read_filters}};{{api_login_user_Read_filters}}@localhost;{{api_password_user_Read_filters}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read_filters}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read_filters}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RO_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_limited;RO_limited\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RO_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_limited;{{api_login_user_Read_filters}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RO_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_limited;limited\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RO to RO_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_limited;RO\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user_nothing      ",
			"item": [
				{
					"name": "Add user_nothing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_Nothing\", \"user_nothing\");\r",
									"pm.collectionVariables.set(\"api_password_user_Nothing\", \"Centreon!123\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};{{api_login_user_Nothing}};{{api_login_user_Nothing}}@localhost;{{api_password_user_Nothing}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;{{api_login_user_Nothing}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Nothing to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a first host severity (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host severity has been successfully created, with name '\" + pm.collectionVariables.get(\"HostSeverity1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostSeverity1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host severity\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"HostSeverity1Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostSeverity1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostSeverity1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostSeverity1Alias\"),\r",
									"        \"level\": 2,\r",
									"        \"icon_id\": 1,\r",
									"        \"is_activated\": false,\r",
									"        \"comment\":\"I look like a category but with something more\"\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostSeverity1Name\", \"Test_H_Severity_1\");\r",
									"pm.collectionVariables.set(\"HostSeverity1Alias\", \"I'm a host severity!\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{HostSeverity1Name}}\",\n    \"alias\": \"{{HostSeverity1Alias}}\",\n    \"level\": 2,\n    \"icon_id\": 1,\n    \"is_activated\": false,\n    \"comment\":\"I look like a category but with something more\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/severities",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"severities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a second host severity (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host severity has been successfully created, with name '\" + pm.collectionVariables.get(\"HostSeverity2Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostSeverity2Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host severity\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"HostSeverity2Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostSeverity2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostSeverity2Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostSeverity2Alias\"),\r",
									"        \"level\": 4,\r",
									"        \"icon_id\": 2,\r",
									"        \"is_activated\": false,\r",
									"        \"comment\":\"I look like a category but with something more\"    \r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostSeverity2Name\", \"Test_H_Severity_2\");\r",
									"pm.collectionVariables.set(\"HostSeverity2Alias\", \"I'm a host severity!\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{HostSeverity2Name}}\", \n    \"alias\": \"{{HostSeverity2Alias}}\",\n    \"level\": 4,\n    \"icon_id\": 2,\n    \"is_activated\": false,\n    \"comment\":\"I look like a category but with something more\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/severities",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"severities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a first host category (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host category has been successfully created, with name '\" + pm.collectionVariables.get(\"HostCategory1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostCategory1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host category\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"HostCategory1Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostCategory1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostCategory1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostCategory1Alias\"),\r",
									"        \"is_activated\": false,\r",
									"        \"comment\":\"Created by Admin\"  \r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostCategory1Name\", \"Test_H_Category_1\");\r",
									"pm.collectionVariables.set(\"HostCategory1Alias\", \"I'm a host category!\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"{{HostCategory1Name}}\",\n    \"alias\":\"{{HostCategory1Alias}}\",\n    \"is_activated\": false,\n    \"comment\":\"Created by Admin\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a second host category (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host category has been successfully created, with name '\" + pm.collectionVariables.get(\"HostCategory2Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostCategory2Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host category\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"HostCategory2Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostCategory2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostCategory2Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostCategory2Alias\"),\r",
									"        \"is_activated\": true,\r",
									"        \"comment\":\"Created by Admin\"  \r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostCategory2Name\", \"Test_H_Category_2\");\r",
									"pm.collectionVariables.set(\"HostCategory2Alias\", \"I'm a host category!\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"{{HostCategory2Name}}\",\n    \"alias\":\"{{HostCategory2Alias}}\",\n    \"is_activated\": true,\n    \"comment\":\"Created by Admin\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a host group (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host group has been successfully created, with name '\" + pm.collectionVariables.get(\"HostGroup1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostGroup1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host group\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"HostGroup1Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup1Alias\"),\r",
									"        \"notes\": \"I am Groot\",\r",
									"        \"notes_url\": \"www.google.fr\",\r",
									"        \"action_url\": \"www.google.com\",\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": 3,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"Hello world ! 1\",\r",
									"        \"is_activated\": false\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"The Location parameter is in the header.\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostGroup1Name\", \"Test_H_Group_1\");\r",
									"pm.collectionVariables.set(\"HostGroup1Alias\", \"I should be successful !\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{HostGroup1Name}}\",\n    \"alias\": \"{{HostGroup1Alias}}\",\n    \"notes\": \"I am Groot\",\n    \"notes_url\": \"www.google.fr\",\n    \"action_url\": \"www.google.com\",\n    \"icon_id\": null,\n    \"icon_map_id\": null,\n    \"rrd\": 3,\n    \"geo_coords\": \"\",\n    \"comment\": \"Hello world ! 1\",\n    \"is_activated\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new command (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Command1Name\", \"check-host-alive\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The command has been successfully created, with name '\" + pm.collectionVariables.get(\"Command1Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new command \r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"CommandId\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"CommandId\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Command1Name\"),\r",
									"        \"type\": 2,\r",
									"        \"command_line\": \"$USER1$/check_ping -H $HOSTADDRESS$ -w 3000.0,80% -c 5000.0,100% -p 1\",\r",
									"        \"is_shell\": false,\r",
									"        \"is_activated\": true,\r",
									"        \"is_locked\": false,\r",
									"        \"argument_example\": null,\r",
									"        \"connector\": null,\r",
									"        \"grap_template\": null\r",
									"    });\r",
									"    pm.expect(response.arguments).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.macros).to.be.an('Array').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Command1Name}}\",\r\n    \"type\": 2,\r\n    \"command_line\": \"$USER1$/check_ping -H $HOSTADDRESS$ -w 3000.0,80% -c 5000.0,100% -p 1\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/commands",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"commands"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a host template (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostTemplate1Name\", \"host-template--host\");\r",
									"pm.collectionVariables.set(\"HostTemplate1Alias\", \"I'm the first host template created by admin\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host template has been successfully created, with name '\" + pm.collectionVariables.get(\"HostTemplate1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostTemplate1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host template\r",
									"    var response = JSON.parse(responseBody);\r",
									"    console.log(response);\r",
									"    pm.collectionVariables.set(\"HostTemplate1Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostTemplate1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostTemplate1Alias\"),\r",
									"        \"snmp_version\": \"2c\",\r",
									"        \"timezone_id\": 1,\r",
									"        \"check_command_id\": parseInt(pm.collectionVariables.get(\"CommandId\")),\r",
									"        \"severity_id\": pm.collectionVariables.get(\"HostSeverity2Id\"),\r",
									"        \"check_timeperiod_id\": 1,\r",
									"        \"note_url\": \"noteUrl-value\",\r",
									"        \"note\": \"note-value\",\r",
									"        \"action_url\": \"actionUrl-value\",\r",
									"        \"max_check_attempts\": 3,\r",
									"        \"normal_check_interval\": 5,\r",
									"        \"retry_check_interval\": 2,\r",
									"        \"active_check_enabled\": 1,\r",
									"        \"passive_check_enabled\": 0,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"notification_options\": 31,\r",
									"        \"notification_interval\": 5,\r",
									"        \"notification_timeperiod_id\": 2,\r",
									"        \"add_inherited_contact_group\": true,\r",
									"        \"add_inherited_contact\": true,\r",
									"        \"first_notification_delay\": 2,\r",
									"        \"recovery_notification_delay\": 1,\r",
									"        \"acknowledgement_timeout\": 5,\r",
									"        \"freshness_checked\": 1,\r",
									"        \"freshness_threshold\": 2,\r",
									"        \"flap_detection_enabled\": 1,\r",
									"        \"low_flap_threshold\": 25,\r",
									"        \"high_flap_threshold\": 75,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"event_handler_command_id\": parseInt(pm.collectionVariables.get(\"CommandId\")),\r",
									"        \"icon_id\": 1,\r",
									"        \"icon_alternative\": \"3\",\r",
									"        \"comment\": \"1, 2, 3\"\r",
									"    });\r",
									"    pm.expect(response.check_command_args).to.include(\"OUTPUT\");\r",
									"    pm.expect(response.event_handler_command_args).to.include(\"%d\");\r",
									"    pm.expect(response.categories[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostCategory1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostCategory1Name\")\r",
									"    });\r",
									"    pm.expect(response.macros[0]).to.include({\r",
									"        \"name\": \"NAMEA\",\r",
									"        \"value\": \"valueA\",\r",
									"        \"is_password\": false,\r",
									"        \"description\": \"some text\"\r",
									"    });\r",
									"    pm.expect(response.macros[1]).to.include({\r",
									"        \"name\": \"NAMEB\",\r",
									"        \"value\": null,\r",
									"        \"is_password\": true,\r",
									"        \"description\": null\r",
									"    });\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{HostTemplate1Name}}\",\r\n    \"alias\": \"{{HostTemplate1Alias}}\",\r\n    \"snmp_version\": \"2c\",\r\n    \"snmp_community\": \"   snmpCommunity-test\",\r\n    \"timezone_id\": 1,\r\n    \"check_command_id\": {{CommandId}},\r\n    \"severity_id\": {{HostSeverity2Id}},\r\n    \"check_command_args\": [\"OUTPUT\"],\r\n    \"check_timeperiod_id\": 1,\r\n    \"note_url\": \"noteUrl-value\",\r\n    \"note\": \"note-value\",\r\n    \"action_url\": \"actionUrl-value\",\r\n    \"max_check_attempts\": 3,\r\n    \"normal_check_interval\": 5,\r\n    \"retry_check_interval\": 2,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"notification_options\": 31,\r\n    \"notification_interval\": 5,\r\n    \"notification_timeperiod_id\": 2,\r\n    \"add_inherited_contact_group\": true,\r\n    \"add_inherited_contact\": true,\r\n    \"first_notification_delay\": 2,\r\n    \"recovery_notification_delay\": 1,\r\n    \"acknowledgement_timeout\": 5,\r\n    \"freshness_checked\": 1,\r\n    \"freshness_threshold\": 2,\r\n    \"flap_detection_enabled\": 1,\r\n    \"low_flap_threshold\": 25,\r\n    \"high_flap_threshold\": 75,\r\n    \"event_handler_enabled\": 2,\r\n    \"event_handler_command_id\": {{CommandId}},\r\n    \"event_handler_command_args\": [\"%d\"],\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"3\",\r\n    \"categories\": [ {{HostCategory1Id}} ],\r\n    \"comment\": \"1, 2, 3\",\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"nameA\",\r\n        \"value\": \"valueA\",\r\n        \"is_password\": false,\r\n        \"description\": \"some text\"\r\n        },\r\n        {\r\n        \"name\": \"nameB\",\r\n        \"value\": \"valueB\",\r\n        \"is_password\": true,\r\n        \"description\": null\r\n        }\r\n    ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new host with all properties defined",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Host1Name\", \"host_001\");\r",
									"pm.collectionVariables.set(\"Host1Alias\", \"I'm the first host created by admin\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Host1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"Host1Id\", response.id);\r",
									"    console.log(response);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Host1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"Host1Alias\"),\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"monitoring_server_id\": 1,\r",
									"        \"snmp_version\": \"2c\",\r",
									"        \"timezone_id\": 1,\r",
									"        \"severity_id\": pm.collectionVariables.get(\"HostSeverity1Id\"),\r",
									"        \"check_command_id\": parseInt(pm.collectionVariables.get(\"CommandId\")),\r",
									"        \"check_timeperiod_id\": 1,\r",
									"        \"note_url\": \"noteUrl-value\",\r",
									"        \"note\": \"note-value\",\r",
									"        \"action_url\": \"actionUrl-value\",\r",
									"        \"max_check_attempts\": 3,\r",
									"        \"normal_check_interval\": 5,\r",
									"        \"retry_check_interval\": 2,\r",
									"        \"active_check_enabled\": 1,\r",
									"        \"passive_check_enabled\": 0,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"notification_options\": 31,\r",
									"        \"notification_interval\": 5,\r",
									"        \"notification_timeperiod_id\": 2,\r",
									"        \"add_inherited_contact_group\": true,\r",
									"        \"add_inherited_contact\": true,\r",
									"        \"first_notification_delay\": 2,\r",
									"        \"recovery_notification_delay\": 1,\r",
									"        \"acknowledgement_timeout\": 5,\r",
									"        \"freshness_checked\": 1,\r",
									"        \"freshness_threshold\": 2,\r",
									"        \"flap_detection_enabled\": 1,\r",
									"        \"low_flap_threshold\": 25,\r",
									"        \"high_flap_threshold\": 75,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"event_handler_command_id\": parseInt(pm.collectionVariables.get(\"CommandId\")),\r",
									"        \"icon_id\": 1,\r",
									"        \"icon_alternative\": \"3\",\r",
									"        \"comment\": \"1, 2, 3\",\r",
									"        \"geo_coords\": \"48.51,2.20\",\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(response.check_command_args).to.include(\"OUTPUT2\");\r",
									"    pm.expect(response.event_handler_command_args).to.include(\"%d\");\r",
									"    pm.expect(response.categories[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostCategory1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostCategory1Name\")\r",
									"    });\r",
									"    pm.expect(response.templates[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostTemplate1Name\")\r",
									"    });\r",
									"    pm.expect(response.groups[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup1Name\")\r",
									"    });\r",
									"    pm.expect(response.macros[0]).to.include({\r",
									"        \"name\": \"NAMEC\",\r",
									"        \"value\": \"valueC\",\r",
									"        \"is_password\": false,\r",
									"        \"description\": \"some text\"\r",
									"    });\r",
									"    pm.expect(response.macros[1]).to.include({\r",
									"        \"name\": \"NAMED\",\r",
									"        \"value\": null,\r",
									"        \"is_password\": true,\r",
									"        \"description\": null\r",
									"    });\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Host1Name}}\",\r\n    \"alias\": \"{{Host1Alias}}\",\r\n    \"address\": \"127.0.0.1\",\r\n    \"monitoring_server_id\": 1,\r\n    \"snmp_version\": \"2c\",\r\n    \"snmp_community\": \"   snmpCommunity-test\",\r\n    \"timezone_id\": 1,\r\n    \"severity_id\": {{HostSeverity1Id}},\r\n    \"check_command_id\": {{CommandId}},\r\n    \"check_command_args\": [\"OUTPUT2\"],\r\n    \"check_timeperiod_id\": 1,\r\n    \"note_url\": \"noteUrl-value\",\r\n    \"note\": \"note-value\",\r\n    \"action_url\": \"actionUrl-value\",\r\n    \"max_check_attempts\": 3,\r\n    \"normal_check_interval\": 5,\r\n    \"retry_check_interval\": 2,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"notification_options\": 31,\r\n    \"notification_interval\": 5,\r\n    \"notification_timeperiod_id\": 2,\r\n    \"add_inherited_contact_group\": true,\r\n    \"add_inherited_contact\": true,\r\n    \"first_notification_delay\": 2,\r\n    \"recovery_notification_delay\": 1,\r\n    \"acknowledgement_timeout\": 5,\r\n    \"freshness_checked\": 1,\r\n    \"freshness_threshold\": 2,\r\n    \"flap_detection_enabled\": 1,\r\n    \"low_flap_threshold\": 25,\r\n    \"high_flap_threshold\": 75,\r\n    \"event_handler_enabled\": 2,\r\n    \"event_handler_command_id\": {{CommandId}},\r\n    \"event_handler_command_args\": [\"%d\"],\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"3\",\r\n    \"geo_coords\": \"48.51,2.20\",\r\n    \"categories\": [ {{HostCategory1Id}} ],\r\n    \"templates\": [ {{HostTemplate1Id}} ],\r\n    \"comment\": \"1, 2, 3\",\r\n    \"groups\": [ {{HostGroup1Id}} ],\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"nameC\",\r\n        \"value\": \"valueC\",\r\n        \"is_password\": false,\r\n        \"description\": \"some text\"\r\n        },\r\n        {\r\n        \"name\": \"nameD\",\r\n        \"value\": \"valueD\",\r\n        \"is_password\": true,\r\n        \"description\": null\r\n        }\r\n    ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available hosts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"console.log(responseJson);\r",
									"pm.test(\"The hosts retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (1)\r",
									"    pm.expect(responseJson.result.length).to.eql(1);\r",
									"\r",
									"    // Check the properties of each host\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Host1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"Host1Alias\"),\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"normal_check_interval\": 5,\r",
									"        \"retry_check_interval\": 2,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[0].monitoring_server).to.eql({\r",
									"        id: 1, \r",
									"        name: \"Central\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].templates).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({\r",
									"        id: 2,\r",
									"        name: \"none\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({\r",
									"        id: 1,\r",
									"        name: \"24x7\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({\r",
									"        id: pm.collectionVariables.get(\"HostSeverity1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostSeverity1Name\")\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
									"    }]);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new host with mandatory properties defined",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Host2Name\", \"host_002\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Host2Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host \r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"Host2Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Host2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host2Name\"),\r",
									"        \"alias\": null,\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"monitoring_server_id\": 1,\r",
									"        \"snmp_version\": null,\r",
									"        \"timezone_id\": null,\r",
									"        \"severity_id\": null,\r",
									"        \"check_command_id\": null,\r",
									"        \"check_timeperiod_id\": null,\r",
									"        \"note_url\": null,\r",
									"        \"note\": null,\r",
									"        \"action_url\": null,\r",
									"        \"max_check_attempts\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"active_check_enabled\": 2,\r",
									"        \"passive_check_enabled\": 2,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"notification_options\": null,\r",
									"        \"notification_interval\": null,\r",
									"        \"notification_timeperiod_id\": null,\r",
									"        \"add_inherited_contact_group\": false,\r",
									"        \"add_inherited_contact\": false,\r",
									"        \"first_notification_delay\": null,\r",
									"        \"recovery_notification_delay\": null,\r",
									"        \"acknowledgement_timeout\": null,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"freshness_threshold\": null,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_alternative\": null,\r",
									"        \"comment\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.templates).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.groups).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.macros).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.categories).to.be.an('Array').that.is.empty;\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"{{Host2Name}}\",\r\n\"address\": \"127.0.0.1\",\r\n\"monitoring_server_id\": 1\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available hosts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The hosts retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (2)\r",
									"    pm.expect(responseJson.result.length).to.eql(2);\r",
									"\r",
									"    // Check the properties of each host\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Host1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"Host1Alias\"),\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"normal_check_interval\": 5,\r",
									"        \"retry_check_interval\": 2,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[0].monitoring_server).to.eql({\r",
									"        id: 1, \r",
									"        name: \"Central\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].templates).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({\r",
									"        id: 2,\r",
									"        name: \"none\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({\r",
									"        id: 1,\r",
									"        name: \"24x7\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({\r",
									"        id: pm.collectionVariables.get(\"HostSeverity1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostSeverity1Name\")\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
									"    }]);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Host2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host2Name\"),\r",
									"        \"alias\": null,\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"check_timeperiod\":null,\r",
									"        \"severity\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1].monitoring_server).to.eql({\r",
									"        id: 1, \r",
									"        name: \"Central\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[1].templates).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new host without name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host has not been created, because the name is mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[name] The property name is required\\n\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"alias\": \"hey\",\r\n    \"address\": \"127.0.0.1\",\r\n    \"monitoring_server_id\": 1,\r\n    \"snmp_version\": \"2c\",\r\n    \"snmp_community\": \"   snmpCommunity-test\",\r\n    \"timezone_id\": 1,\r\n    \"severity_id\": {{HostSeverity1Id}},\r\n    \"check_command_id\": {{CommandId}},\r\n    \"check_command_args\": [\"OUTPUT\"],\r\n    \"check_timeperiod_id\": 1,\r\n    \"note_url\": \"noteUrl-value\",\r\n    \"note\": \"note-value\",\r\n    \"action_url\": \"actionUrl-value\",\r\n    \"max_check_attempts\": 3,\r\n    \"normal_check_interval\": 5,\r\n    \"retry_check_interval\": 2,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"notification_options\": 31,\r\n    \"notification_interval\": 5,\r\n    \"notification_timeperiod_id\": 2,\r\n    \"add_inherited_contact_group\": true,\r\n    \"add_inherited_contact\": true,\r\n    \"first_notification_delay\": 2,\r\n    \"recovery_notification_delay\": 1,\r\n    \"acknowledgement_timeout\": 5,\r\n    \"freshness_checked\": 1,\r\n    \"freshness_threshold\": 2,\r\n    \"flap_detection_enabled\": 1,\r\n    \"low_flap_threshold\": 25,\r\n    \"high_flap_threshold\": 75,\r\n    \"event_handler_enabled\": 2,\r\n    \"event_handler_command_id\": 202,\r\n    \"event_handler_command_args\": [\"%d\"],\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"3\",\r\n    \"categories\": [ {{HostCategory1Id}} ],\r\n    \"comment\": \"1, 2, 3\",\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"nameA\",\r\n        \"value\": \"valueA\",\r\n        \"is_password\": false,\r\n        \"description\": \"some text\"\r\n        },\r\n        {\r\n        \"name\": \"nameB\",\r\n        \"value\": \"valueB\",\r\n        \"is_password\": true,\r\n        \"description\": null\r\n        }\r\n    ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new host without address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host has not been created, because the address is mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[address] The property address is required\\n\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"host--1\",\r\n    \"monitoring_server_id\": 1,\r\n    \"snmp_version\": \"2c\",\r\n    \"snmp_community\": \"   snmpCommunity-test\",\r\n    \"timezone_id\": 1,\r\n    \"severity_id\": {{HostSeverity1Id}},\r\n    \"check_command_id\": {{CommandId}},\r\n    \"check_command_args\": [\"OUTPUT\"],\r\n    \"check_timeperiod_id\": 1,\r\n    \"note_url\": \"noteUrl-value\",\r\n    \"note\": \"note-value\",\r\n    \"action_url\": \"actionUrl-value\",\r\n    \"max_check_attempts\": 3,\r\n    \"normal_check_interval\": 5,\r\n    \"retry_check_interval\": 2,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"notification_options\": 31,\r\n    \"notification_interval\": 5,\r\n    \"notification_timeperiod_id\": 2,\r\n    \"add_inherited_contact_group\": true,\r\n    \"add_inherited_contact\": true,\r\n    \"first_notification_delay\": 2,\r\n    \"recovery_notification_delay\": 1,\r\n    \"acknowledgement_timeout\": 5,\r\n    \"freshness_checked\": 1,\r\n    \"freshness_threshold\": 2,\r\n    \"flap_detection_enabled\": 1,\r\n    \"low_flap_threshold\": 25,\r\n    \"high_flap_threshold\": 75,\r\n    \"event_handler_enabled\": 2,\r\n    \"event_handler_command_id\": 202,\r\n    \"event_handler_command_args\": [\"%d\"],\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"3\",\r\n    \"categories\": [ {{HostCategory1Id}} ],\r\n    \"templates\": [4],\r\n    \"comment\": \"1, 2, 3\",\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"nameA\",\r\n        \"value\": \"valueA\",\r\n        \"is_password\": false,\r\n        \"description\": \"some text\"\r\n        },\r\n        {\r\n        \"name\": \"nameB\",\r\n        \"value\": \"valueB\",\r\n        \"is_password\": true,\r\n        \"description\": null\r\n        }\r\n    ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new host without monitoring server",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host has not been created, because the monitoring_server_id is mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[monitoring_server_id] The property monitoring_server_id is required\\n\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"host--1\",\r\n    \"address\": \"127.0.0.1\",\r\n    \"snmp_version\": \"2c\",\r\n    \"snmp_community\": \"   snmpCommunity-test\",\r\n    \"timezone_id\": 1,\r\n    \"severity_id\": {{HostSeverity1Id}},\r\n    \"check_command_id\": {{CommandId}},\r\n    \"check_command_args\": [\"OUTPUT\"],\r\n    \"check_timeperiod_id\": 1,\r\n    \"note_url\": \"noteUrl-value\",\r\n    \"note\": \"note-value\",\r\n    \"action_url\": \"actionUrl-value\",\r\n    \"max_check_attempts\": 3,\r\n    \"normal_check_interval\": 5,\r\n    \"retry_check_interval\": 2,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"notification_options\": 31,\r\n    \"notification_interval\": 5,\r\n    \"notification_timeperiod_id\": 2,\r\n    \"add_inherited_contact_group\": true,\r\n    \"add_inherited_contact\": true,\r\n    \"first_notification_delay\": 2,\r\n    \"recovery_notification_delay\": 1,\r\n    \"acknowledgement_timeout\": 5,\r\n    \"freshness_checked\": 1,\r\n    \"freshness_threshold\": 2,\r\n    \"flap_detection_enabled\": 1,\r\n    \"low_flap_threshold\": 25,\r\n    \"high_flap_threshold\": 75,\r\n    \"event_handler_enabled\": 2,\r\n    \"event_handler_command_id\": 202,\r\n    \"event_handler_command_args\": [\"%d\"],\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"3\",\r\n    \"categories\": [ {{HostCategory1Id}} ],\r\n    \"templates\": [4],\r\n    \"comment\": \"1, 2, 3\",\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"nameA\",\r\n        \"value\": \"valueA\",\r\n        \"is_password\": false,\r\n        \"description\": \"some text\"\r\n        },\r\n        {\r\n        \"name\": \"nameB\",\r\n        \"value\": \"valueB\",\r\n        \"is_password\": true,\r\n        \"description\": null\r\n        }\r\n    ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new host with empty name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host has not been created, because the name is empty.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[NewHost::name] The string is empty, but non empty string was expected\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\",\r\n    \"alias\": \"test without name\",\r\n    \"address\": \"127.0.0.1\",\r\n    \"monitoring_server_id\": 1,\r\n    \"snmp_version\": \"2c\",\r\n    \"snmp_community\": \"   snmpCommunity-test\",\r\n    \"timezone_id\": 1,\r\n    \"severity_id\": {{HostSeverity1Id}},\r\n    \"check_command_id\": {{CommandId}},\r\n    \"check_command_args\": [\"OUTPUT\"],\r\n    \"check_timeperiod_id\": 1,\r\n    \"note_url\": \"noteUrl-value\",\r\n    \"note\": \"note-value\",\r\n    \"action_url\": \"actionUrl-value\",\r\n    \"max_check_attempts\": 3,\r\n    \"normal_check_interval\": 5,\r\n    \"retry_check_interval\": 2,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"notification_options\": 31,\r\n    \"notification_interval\": 5,\r\n    \"notification_timeperiod_id\": 2,\r\n    \"add_inherited_contact_group\": true,\r\n    \"add_inherited_contact\": true,\r\n    \"first_notification_delay\": 2,\r\n    \"recovery_notification_delay\": 1,\r\n    \"acknowledgement_timeout\": 5,\r\n    \"freshness_checked\": 1,\r\n    \"freshness_threshold\": 2,\r\n    \"flap_detection_enabled\": 1,\r\n    \"low_flap_threshold\": 25,\r\n    \"high_flap_threshold\": 75,\r\n    \"event_handler_enabled\": 2,\r\n    \"event_handler_command_id\": {{CommandId}},\r\n    \"event_handler_command_args\": [\"%d\"],\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"3\",\r\n    \"categories\": [ {{HostCategory1Id}} ],\r\n    \"templates\": [4],\r\n    \"comment\": \"1, 2, 3\",\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"nameA\",\r\n        \"value\": \"valueA\",\r\n        \"is_password\": false,\r\n        \"description\": \"some text\"\r\n        },\r\n        {\r\n        \"name\": \"nameB\",\r\n        \"value\": \"valueB\",\r\n        \"is_password\": true,\r\n        \"description\": null\r\n        }\r\n    ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new host with empty address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host has not been created, because the address is empty.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[NewHost::address] The value \\\"\\\" was expected to be a valid ip address or domain name\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Test without alias\",\r\n    \"alias\": \"\",\r\n    \"address\":\"\",\r\n    \"monitoring_server_id\": 1,\r\n    \"snmp_version\": \"2c\",\r\n    \"snmp_community\": \"   snmpCommunity-test\",\r\n    \"timezone_id\": 1,\r\n    \"severity_id\": {{HostSeverity1Id}},\r\n    \"check_command_id\": {{CommandId}},\r\n    \"check_command_args\": [\"OUTPUT\"],\r\n    \"check_timeperiod_id\": 1,\r\n    \"note_url\": \"noteUrl-value\",\r\n    \"note\": \"note-value\",\r\n    \"action_url\": \"actionUrl-value\",\r\n    \"max_check_attempts\": 3,\r\n    \"normal_check_interval\": 5,\r\n    \"retry_check_interval\": 2,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"notification_options\": 31,\r\n    \"notification_interval\": 5,\r\n    \"notification_timeperiod_id\": 2,\r\n    \"add_inherited_contact_group\": true,\r\n    \"add_inherited_contact\": true,\r\n    \"first_notification_delay\": 2,\r\n    \"recovery_notification_delay\": 1,\r\n    \"acknowledgement_timeout\": 5,\r\n    \"freshness_checked\": 1,\r\n    \"freshness_threshold\": 2,\r\n    \"flap_detection_enabled\": 1,\r\n    \"low_flap_threshold\": 25,\r\n    \"high_flap_threshold\": 75,\r\n    \"event_handler_enabled\": 2,\r\n    \"event_handler_command_id\": {{CommandId}},\r\n    \"event_handler_command_args\": [\"%d\"],\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"3\",\r\n    \"categories\": [ {{HostCategory1Id}} ],\r\n    \"templates\": [4],\r\n    \"comment\": \"1, 2, 3\",\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"nameA\",\r\n        \"value\": \"valueA\",\r\n        \"is_password\": false,\r\n        \"description\": \"some text\"\r\n        },\r\n        {\r\n        \"name\": \"nameB\",\r\n        \"value\": \"valueB\",\r\n        \"is_password\": true,\r\n        \"description\": null\r\n        }\r\n    ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new host with wrong type of value",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host template has not been created, because there are values of the wrong type.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[name] Boolean value found, but a string is required\\n[alias] Integer value found, but a null or a string is required\\n[snmp_version] Boolean value found, but a null or a string is required\\n[snmp_version] Does not have a value in the enumeration [null,\\\"1\\\",\\\"2c\\\",\\\"3\\\"]\\n[snmp_community] Integer value found, but a null or a string is required\\n[timezone_id] String value found, but a null or an integer is required\\n[severity_id] String value found, but a null or an integer is required\\n[check_command_id] String value found, but a null or an integer is required\\n[check_command_args[0]] Integer value found, but a string is required\\n[check_timeperiod_id] String value found, but a null or an integer is required\\n[max_check_attempts] String value found, but a null or an integer is required\\n[normal_check_interval] Boolean value found, but a null or an integer is required\\n[retry_check_interval] Boolean value found, but a null or an integer is required\\n[active_check_enabled] Does not have a value in the enumeration [null,0,1,2]\\n[passive_check_enabled] Boolean value found, but a null or an integer is required\\n[passive_check_enabled] Does not have a value in the enumeration [null,0,1,2]\\n[notification_enabled] String value found, but a null or an integer is required\\n[notification_enabled] Does not have a value in the enumeration [null,0,1,2]\\n[notification_options] String value found, but an integer or a null is required\\n[notification_interval] String value found, but a null or an integer is required\\n[notification_timeperiod_id] String value found, but a null or an integer is required\\n[add_inherited_contact_group] String value found, but a null or a boolean is required\\n[add_inherited_contact] Integer value found, but a null or a boolean is required\\n[first_notification_delay] String value found, but a null or an integer is required\\n[recovery_notification_delay] String value found, but a null or an integer is required\\n[acknowledgement_timeout] String value found, but a null or an integer is required\\n[freshness_checked] Does not have a value in the enumeration [null,0,1,2]\\n[freshness_threshold] String value found, but a null or an integer is required\\n[flap_detection_enabled] String value found, but a null or an integer is required\\n[flap_detection_enabled] Does not have a value in the enumeration [null,0,1,2]\\n[low_flap_threshold] String value found, but a null or an integer is required\\n[high_flap_threshold] String value found, but a null or an integer is required\\n[event_handler_enabled] String value found, but a null or an integer is required\\n[event_handler_enabled] Does not have a value in the enumeration [null,0,1,2]\\n[event_handler_command_id] String value found, but a null or an integer is required\\n[event_handler_command_args[0]] Integer value found, but a string is required\\n[note_url] Boolean value found, but a null or a string is required\\n[note] Integer value found, but a null or a string is required\\n[action_url] Boolean value found, but a null or a string is required\\n[icon_id] String value found, but a null or an integer is required\\n[icon_alternative] Integer value found, but a null or a string is required\\n[comment] Boolean value found, but a null or a string is required\\n[categories[0]] String value found, but an integer is required\\n[templates[0]] String value found, but an integer is required\\n[macros[0].name] Integer value found, but a string is required\\n[macros[0].value] Boolean value found, but a null or a string is required\\n[macros[0].is_password] Integer value found, but a boolean is required\\n[macros[0].description] Integer value found, but a null or a string is required\\n[address] Integer value found, but a string is required\\n[monitoring_server_id] String value found, but an integer is required\\n\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": true,\r\n    \"alias\": 0,\r\n    \"address\": 1,\r\n    \"monitoring_server_id\": \"1\",\r\n    \"snmp_version\": false,\r\n    \"snmp_community\": 5,\r\n    \"timezone_id\": \"1\",\r\n    \"severity_id\": \"{{HostSeverity1Id}}\",\r\n    \"check_command_id\": \"{{CommandId}}\",\r\n    \"check_command_args\": [1],\r\n    \"check_timeperiod_id\": \"1\",\r\n    \"note_url\": true,\r\n    \"note\": 0,\r\n    \"action_url\": false,\r\n    \"max_check_attempts\": \"3\",\r\n    \"normal_check_interval\": true,\r\n    \"retry_check_interval\": false,\r\n    \"active_check_enabled\": 5,\r\n    \"passive_check_enabled\": true,\r\n    \"notification_enabled\": \"2\",\r\n    \"notification_options\": \"31\",\r\n    \"notification_interval\": \"5\",\r\n    \"notification_timeperiod_id\": \"2\",\r\n    \"add_inherited_contact_group\": \"true\",\r\n    \"add_inherited_contact\": 0,\r\n    \"first_notification_delay\": \"2\",\r\n    \"recovery_notification_delay\": \"1\",\r\n    \"acknowledgement_timeout\": \"5\",\r\n    \"freshness_checked\": 6,\r\n    \"freshness_threshold\": \"2\",\r\n    \"flap_detection_enabled\": \"1\",\r\n    \"low_flap_threshold\": \"25\",\r\n    \"high_flap_threshold\": \"75\",\r\n    \"event_handler_enabled\": \"2\",\r\n    \"event_handler_command_id\": \"{{CommandId}}\",\r\n    \"event_handler_command_args\": [3],\r\n    \"icon_id\": \"1\",\r\n    \"icon_alternative\": 3,\r\n    \"categories\": [ \"{{HostCategory1Id}}\" ],\r\n    \"templates\": [\"4\"],\r\n    \"comment\": true,\r\n    \"macros\": [\r\n        {\r\n        \"name\": 1,\r\n        \"value\": true,\r\n        \"is_password\": 0,\r\n        \"description\": 5\r\n        }\r\n    ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new host with special characters defined",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Host3Name\", \"hôst~3!\");\r",
									"pm.collectionVariables.set(\"Host3Alias\", \"I'm the third host créated by admin!\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Host3Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host3Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host \r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"Host3Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Host3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host3Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"Host3Alias\"),\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"monitoring_server_id\": 1,\r",
									"        \"snmp_version\": \"2c\",\r",
									"        \"timezone_id\": 2,\r",
									"        \"severity_id\": null,\r",
									"        \"check_command_id\": pm.collectionVariables.get(\"CommandId\"),\r",
									"        \"check_timeperiod_id\": 1,\r",
									"        \"note_url\": \"noteUrl!!!!\",\r",
									"        \"note\": \"notéé\",\r",
									"        \"action_url\": \"actionUrl-ouêp\",\r",
									"        \"max_check_attempts\": 6,\r",
									"        \"normal_check_interval\": 5,\r",
									"        \"retry_check_interval\": 2,\r",
									"        \"active_check_enabled\": 1,\r",
									"        \"passive_check_enabled\": 0,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"notification_options\": null,\r",
									"        \"notification_interval\": null,\r",
									"        \"notification_timeperiod_id\": null,\r",
									"        \"add_inherited_contact_group\": false,\r",
									"        \"add_inherited_contact\": false,\r",
									"        \"first_notification_delay\": null,\r",
									"        \"recovery_notification_delay\": null,\r",
									"        \"acknowledgement_timeout\": null,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"freshness_threshold\": null,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"event_handler_command_id\": pm.collectionVariables.get(\"CommandId\"),\r",
									"        \"icon_id\": 1,\r",
									"        \"icon_alternative\": \"3\",\r",
									"        \"comment\": \"I am an other test\",\r",
									"        \"geo_coords\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.templates[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostTemplate1Name\")\r",
									"    });\r",
									"    pm.expect(response.categories[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostCategory1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostCategory1Name\")\r",
									"    });\r",
									"    pm.expect(response.groups[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup1Name\")\r",
									"    });\r",
									"    pm.expect(response.macros).to.be.an('Array').that.is.empty;\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Host3Name}}\",\r\n    \"alias\": \"{{Host3Alias}}\",\r\n    \"snmp_version\": \"2c\",\r\n    \"snmp_community\": \"snmpCommunity-tést\",\r\n    \"address\": \"127.0.0.1\",\r\n    \"monitoring_server_id\": 1,\r\n    \"timezone_id\": 2,\r\n    \"check_command_id\": {{CommandId}},\r\n    \"check_timeperiod_id\": 1,\r\n    \"note_url\": \"noteUrl!!!!\",\r\n    \"note\": \"notéé\",\r\n    \"action_url\": \"actionUrl-ouêp\",\r\n    \"max_check_attempts\": 6,\r\n    \"normal_check_interval\": 5,\r\n    \"retry_check_interval\": 2,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"event_handler_enabled\": 2,\r\n    \"event_handler_command_id\": {{CommandId}},\r\n    \"event_handler_command_args\": [],\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"3\",\r\n    \"categories\": [ {{HostCategory1Id}} ],\r\n    \"groups\": [ {{HostGroup1Id}} ],\r\n    \"templates\": [ {{HostTemplate1Id}} ],\r\n    \"comment\": \"I am an other test\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available hosts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The hosts retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (3)\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"\r",
									"    // Check the properties of each host\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Host1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"Host1Alias\"),\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"normal_check_interval\": 5,\r",
									"        \"retry_check_interval\": 2,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[0].monitoring_server).to.eql({\r",
									"        id: 1, \r",
									"        name: \"Central\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].templates).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({\r",
									"        id: 2,\r",
									"        name: \"none\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({\r",
									"        id: 1,\r",
									"        name: \"24x7\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({\r",
									"        id: pm.collectionVariables.get(\"HostSeverity1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostSeverity1Name\")\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
									"    }]);\r",
									"        pm.expect(responseJson.result[0].groups).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
									"    }]);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Host2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host2Name\"),\r",
									"        \"alias\": null,\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"check_timeperiod\":null,\r",
									"        \"severity\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1].monitoring_server).to.eql({\r",
									"        id: 1, \r",
									"        name: \"Central\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[1].templates).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Host3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host3Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"Host3Alias\"),\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"normal_check_interval\": 5,\r",
									"        \"retry_check_interval\": 2,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[2].monitoring_server).to.eql({\r",
									"        id: 1, \r",
									"        name: \"Central\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[2].check_timeperiod).to.eql({\r",
									"        id: 1,\r",
									"        name: \"24x7\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[2].templates).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].categories).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].groups).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
									"    }]);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The host with name '\" + pm.collectionVariables.get(\"Host1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host1Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Host1Name\");\r",
									"    pm.collectionVariables.unset(\"Host1Alias\");\r",
									"    pm.collectionVariables.unset(\"Host1Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/{{Host1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"{{Host1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The host with name '\" + pm.collectionVariables.get(\"Host2Name\") + \"' has been successfully updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"address\": \"10.25.6.8\",\r\n    \"monitoring_server_id\": 1,\r\n    \"snmp_version\": \"3\",\r\n    \"snmp_community\": \"snmp-community\",\r\n    \"timezone_id\": 2,\r\n    \"severity_id\": {{HostSeverity2Id}},\r\n    \"check_command_id\": {{CommandId}},\r\n    \"check_command_args\": [\"CRITICALLY\"],\r\n    \"check_timeperiod_id\": 3,\r\n    \"note_url\": \"www.google.com\",\r\n    \"note\": \"I want to break free\",\r\n    \"action_url\": \"Clic\",\r\n    \"max_check_attempts\": 4,\r\n    \"normal_check_interval\": 6,\r\n    \"retry_check_interval\": 8,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 1,\r\n    \"notification_enabled\": 1,\r\n    \"notification_options\": 16,\r\n    \"notification_interval\": 10,\r\n    \"notification_timeperiod_id\": 4,\r\n    \"add_inherited_contact_group\": true,\r\n    \"add_inherited_contact\": true,\r\n    \"first_notification_delay\": 1,\r\n    \"recovery_notification_delay\": 1,\r\n    \"acknowledgement_timeout\": 5,\r\n    \"freshness_checked\": 1,\r\n    \"freshness_threshold\": 2,\r\n    \"flap_detection_enabled\": 1,\r\n    \"low_flap_threshold\": 12,\r\n    \"high_flap_threshold\": 88,\r\n    \"event_handler_enabled\": 0,\r\n    \"event_handler_command_id\": {{CommandId}},\r\n    \"event_handler_command_args\": [\"%DDDDF\"],\r\n    \"icon_id\": 2,\r\n    \"icon_alternative\": \"1\",\r\n    \"categories\": [ {{HostCategory2Id}} ],\r\n    \"templates\": [ {{HostTemplate1Id}} ],\r\n    \"comment\": \"1, 2, 3 SOLEIL\",\r\n    \"groups\": [ {{HostGroup1Id}} ],\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"SCHTROUMPF\",\r\n        \"value\": \"bleue\",\r\n        \"is_password\": false,\r\n        \"description\": \"some text\"\r\n        },\r\n        {\r\n        \"name\": \"SHREK\",\r\n        \"value\": \"verte\",\r\n        \"is_password\": true,\r\n        \"description\": \"\"\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/{{Host2Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"{{Host2Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available hosts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The hosts retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (2)\r",
									"    pm.expect(responseJson.result.length).to.eql(2);\r",
									"\r",
									"    // Check the properties of each host\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Host2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host2Name\"),\r",
									"        \"alias\": null,\r",
									"        \"address\": \"10.25.6.8\",\r",
									"        \"normal_check_interval\": 6,\r",
									"        \"retry_check_interval\": 8,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[0].monitoring_server).to.eql({\r",
									"        id: 1, \r",
									"        name: \"Central\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].templates).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({\r",
									"        \"id\": 4,\r",
									"        \"name\": \"workhours\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({\r",
									"        \"id\": 3,\r",
									"        \"name\": \"nonworkhours\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({\r",
									"        id: pm.collectionVariables.get(\"HostSeverity2Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostSeverity2Name\")\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories[0]).to.eql({\r",
									"        id: pm.collectionVariables.get(\"HostCategory2Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostCategory2Name\")\r",
									"    });    \r",
									"    pm.expect(responseJson.result[0].groups[0]).to.eql({\r",
									"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
									"    });\r",
									"\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Host3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host3Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"Host3Alias\"),\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"normal_check_interval\": 5,\r",
									"        \"retry_check_interval\": 2,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1].monitoring_server).to.eql({\r",
									"        id: 1,\r",
									"        name: \"Central\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[1].check_timeperiod).to.eql({\r",
									"        id: 1,\r",
									"        name: \"24x7\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[1].templates).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].categories).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].groups).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
									"    }]);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "user with R/W rights with host directly linked",
			"item": [
				{
					"name": "Only host access",
					"item": [
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW}}\",\r\n      \"password\": \"{{api_password_user_RW}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new host",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"Host4Name\", \"host-4\");\r",
											"pm.collectionVariables.set(\"Host4Alias\", \"I'm the fourth host but I was created by user R/W\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Host4Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host4Alias\") + \"'.\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"\r",
											"    // Creation of a variable with the ID of the new host \r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.collectionVariables.set(\"Host4Id\", response.id);\r",
											"\r",
											"    pm.expect(response).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host4Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host4Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host4Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"monitoring_server_id\": 1,\r",
											"        \"snmp_version\": \"1\",\r",
											"        \"timezone_id\": null,\r",
											"        \"severity_id\": null,\r",
											"        \"check_command_id\": pm.collectionVariables.get(\"CommandId\"),\r",
											"        \"check_timeperiod_id\": null,\r",
											"        \"note_url\": null,\r",
											"        \"note\": null,\r",
											"        \"action_url\": null,\r",
											"        \"max_check_attempts\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"active_check_enabled\": 2,\r",
											"        \"passive_check_enabled\": 2,\r",
											"        \"notification_enabled\": 2,\r",
											"        \"notification_options\": null,\r",
											"        \"notification_interval\": null,\r",
											"        \"notification_timeperiod_id\": null,\r",
											"        \"add_inherited_contact_group\": false,\r",
											"        \"add_inherited_contact\": false,\r",
											"        \"first_notification_delay\": null,\r",
											"        \"recovery_notification_delay\": null,\r",
											"        \"acknowledgement_timeout\": null,\r",
											"        \"freshness_checked\": 2,\r",
											"        \"freshness_threshold\": null,\r",
											"        \"flap_detection_enabled\": 2,\r",
											"        \"low_flap_threshold\": null,\r",
											"        \"high_flap_threshold\": null,\r",
											"        \"event_handler_enabled\": 2,\r",
											"        \"event_handler_command_id\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_alternative\": null,\r",
											"        \"comment\": \"Blabloubli\",\r",
											"        \"geo_coords\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.templates[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    });\r",
											"    pm.expect(response.categories[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"HostCategory1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostCategory1Name\")\r",
											"    });\r",
											"    pm.expect(response.groups).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.macros[0]).to.include({\r",
											"        \"name\": \"COUCOU\",\r",
											"        \"value\": null,\r",
											"        \"is_password\": true,\r",
											"        \"description\": \"null\"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Host4Name}}\",\r\n    \"alias\": \"{{Host4Alias}}\",\r\n    \"address\": \"127.0.0.1\",\r\n    \"monitoring_server_id\": 1,\r\n    \"snmp_version\": \"1\",\r\n    \"snmp_community\": \"\",\r\n    \"check_command_id\": {{CommandId}},\r\n    \"categories\": [ {{HostCategory1Id}} ],\r\n    \"templates\": [ {{HostTemplate1Id}} ],\r\n    \"comment\": \"Blabloubli\",\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"Coucou\",\r\n        \"value\": \"Oh no\",\r\n        \"is_password\": true,\r\n        \"description\": \"null\"\r\n        }\r\n    ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW}}\",\r\n      \"password\": \"{{api_password_user_RW}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The hosts retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (3)\r",
											"    pm.expect(responseJson.result.length).to.eql(3);\r",
											"\r",
											"    // Check the properties of each host\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host2Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host2Name\"),\r",
											"        \"alias\": null,\r",
											"        \"address\": \"10.25.6.8\",\r",
											"        \"normal_check_interval\": 6,\r",
											"        \"retry_check_interval\": 8,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[0].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({\r",
											"        \"id\": 4,\r",
											"        \"name\": \"workhours\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({\r",
											"        \"id\": 3,\r",
											"        \"name\": \"nonworkhours\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].severity).to.eql({\r",
											"        id: pm.collectionVariables.get(\"HostSeverity2Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostSeverity2Name\")\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories[0]).to.eql({\r",
											"        id: pm.collectionVariables.get(\"HostCategory2Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostCategory2Name\")\r",
											"    });    \r",
											"    pm.expect(responseJson.result[0].groups[0]).to.eql({\r",
											"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host3Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host3Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host3Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"normal_check_interval\": 5,\r",
											"        \"retry_check_interval\": 2,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[1].monitoring_server).to.eql({\r",
											"        id: 1,\r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].check_timeperiod).to.eql({\r",
											"        id: 1,\r",
											"        name: \"24x7\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].categories).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].groups).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[2]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host4Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host4Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host4Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"check_timeperiod\":null,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[2].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[2].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].categories).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"The host with name '\" + pm.collectionVariables.get(\"Host2Name\") + \"' has been successfully updated.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"check_timeperiod_id\": 3,\r\n    \"notification_enabled\": 1,\r\n    \"notification_options\": 16,\r\n    \"notification_interval\": 10,\r\n    \"notification_timeperiod_id\": 4,\r\n    \"icon_id\": 2,\r\n    \"icon_alternative\": \"1\",\r\n    \"categories\": [ {{HostCategory2Id}} ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/{{Host4Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"{{Host4Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The hosts retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (3)\r",
											"    pm.expect(responseJson.result.length).to.eql(3);\r",
											"\r",
											"    // Check the properties of each host\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host2Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host2Name\"),\r",
											"        \"alias\": null,\r",
											"        \"address\": \"10.25.6.8\",\r",
											"        \"normal_check_interval\": 6,\r",
											"        \"retry_check_interval\": 8,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[0].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({\r",
											"        \"id\": 4,\r",
											"        \"name\": \"workhours\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({\r",
											"        \"id\": 3,\r",
											"        \"name\": \"nonworkhours\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].severity).to.eql({\r",
											"        id: pm.collectionVariables.get(\"HostSeverity2Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostSeverity2Name\")\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories[0]).to.eql({\r",
											"        id: pm.collectionVariables.get(\"HostCategory2Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostCategory2Name\")\r",
											"    });    \r",
											"    pm.expect(responseJson.result[0].groups[0]).to.eql({\r",
											"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host3Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host3Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host3Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"normal_check_interval\": 5,\r",
											"        \"retry_check_interval\": 2,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[1].monitoring_server).to.eql({\r",
											"        id: 1,\r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].check_timeperiod).to.eql({\r",
											"        \"id\": 1,\r",
											"        \"name\": \"24x7\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].categories).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].groups).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[2]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host4Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host4Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host4Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[2].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[2].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({\r",
											"        \"id\": 4,\r",
											"        \"name\": \"workhours\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[2].check_timeperiod).to.eql({\r",
											"        \"id\": 3,\r",
											"        \"name\": \"nonworkhours\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[2].categories).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostCategory2Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostCategory2Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"The host with name '\" + pm.collectionVariables.get(\"Host4Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host4Alias\") + \"' has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.collectionVariables.unset(\"Host4Name\");\r",
											"    pm.collectionVariables.unset(\"Host4Alias\");\r",
											"    pm.collectionVariables.unset(\"Host4Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/{{Host4Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"{{Host4Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The hosts retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (2)\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"\r",
											"    // Check the properties of each host\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host2Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host2Name\"),\r",
											"        \"alias\": null,\r",
											"        \"address\": \"10.25.6.8\",\r",
											"        \"normal_check_interval\": 6,\r",
											"        \"retry_check_interval\": 8,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[0].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({\r",
											"        \"id\": 4,\r",
											"        \"name\": \"workhours\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({\r",
											"        \"id\": 3,\r",
											"        \"name\": \"nonworkhours\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].severity).to.eql({\r",
											"        id: pm.collectionVariables.get(\"HostSeverity2Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostSeverity2Name\")\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories[0]).to.eql({\r",
											"        id: pm.collectionVariables.get(\"HostCategory2Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostCategory2Name\")\r",
											"    });    \r",
											"    pm.expect(responseJson.result[0].groups[0]).to.eql({\r",
											"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host3Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host3Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host3Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"normal_check_interval\": 5,\r",
											"        \"retry_check_interval\": 2,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[1].monitoring_server).to.eql({\r",
											"        id: 1,\r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].check_timeperiod).to.eql({\r",
											"        \"id\": 1,\r",
											"        \"name\": \"24x7\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].categories).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].groups).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    }]);\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Host + filter on HC not linked",
					"item": [
						{
							"name": "Add a new host",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"Host5Name\", \"host-5\");\r",
											"pm.collectionVariables.set(\"Host5Alias\", \"I'm the fifth host and I was created by user R/W\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Host5Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host5Alias\") + \"'.\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"\r",
											"    // Creation of a variable with the ID of the new host \r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.collectionVariables.set(\"Host5Id\", response.id);\r",
											"\r",
											"    pm.expect(response).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host5Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host5Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host5Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"monitoring_server_id\": 1,\r",
											"        \"snmp_version\": \"1\",\r",
											"        \"timezone_id\": null,\r",
											"        \"severity_id\": null,\r",
											"        \"check_command_id\": parseInt(pm.collectionVariables.get(\"CommandId\")),\r",
											"        \"check_timeperiod_id\": null,\r",
											"        \"note_url\": null,\r",
											"        \"note\": null,\r",
											"        \"action_url\": null,\r",
											"        \"max_check_attempts\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"active_check_enabled\": 2,\r",
											"        \"passive_check_enabled\": 2,\r",
											"        \"notification_enabled\": 2,\r",
											"        \"notification_options\": null,\r",
											"        \"notification_interval\": null,\r",
											"        \"notification_timeperiod_id\": null,\r",
											"        \"add_inherited_contact_group\": false,\r",
											"        \"add_inherited_contact\": false,\r",
											"        \"first_notification_delay\": null,\r",
											"        \"recovery_notification_delay\": null,\r",
											"        \"acknowledgement_timeout\": null,\r",
											"        \"freshness_checked\": 2,\r",
											"        \"freshness_threshold\": null,\r",
											"        \"flap_detection_enabled\": 2,\r",
											"        \"low_flap_threshold\": null,\r",
											"        \"high_flap_threshold\": null,\r",
											"        \"event_handler_enabled\": 2,\r",
											"        \"event_handler_command_id\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_alternative\": null,\r",
											"        \"comment\": \"Blabloubli\",\r",
											"        \"geo_coords\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.templates[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    });\r",
											"    pm.expect(response.categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.groups).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.macros[0]).to.include({\r",
											"        \"name\": \"COUCOU\",\r",
											"        \"value\": null,\r",
											"        \"is_password\": true,\r",
											"        \"description\": \"null\"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Host5Name}}\",\r\n    \"alias\": \"{{Host5Alias}}\",\r\n    \"address\": \"127.0.0.1\",\r\n    \"monitoring_server_id\": 1,\r\n    \"snmp_version\": \"1\",\r\n    \"snmp_community\": \"\",\r\n    \"check_command_id\": {{CommandId}},\r\n    \"templates\": [ {{HostTemplate1Id}} ],\r\n    \"comment\": \"Blabloubli\",\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"Coucou\",\r\n        \"value\": \"Oh no\",\r\n        \"is_password\": true,\r\n        \"description\": \"null\"\r\n        }\r\n    ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new host",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"Host6Name\", \"host-6\");\r",
											"pm.collectionVariables.set(\"Host6Alias\", \"I'm the sixth host and I was created by user R/W\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Host6Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host6Alias\") + \"'.\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"\r",
											"    // Creation of a variable with the ID of the new host \r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.collectionVariables.set(\"Host6Id\", response.id);\r",
											"\r",
											"    pm.expect(response).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host6Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host6Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host6Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"monitoring_server_id\": 1,\r",
											"        \"snmp_version\": \"1\",\r",
											"        \"timezone_id\": null,\r",
											"        \"severity_id\": null,\r",
											"        \"check_command_id\": parseInt(pm.collectionVariables.get(\"CommandId\")),\r",
											"        \"check_timeperiod_id\": null,\r",
											"        \"note_url\": null,\r",
											"        \"note\": null,\r",
											"        \"action_url\": null,\r",
											"        \"max_check_attempts\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"active_check_enabled\": 2,\r",
											"        \"passive_check_enabled\": 2,\r",
											"        \"notification_enabled\": 2,\r",
											"        \"notification_options\": null,\r",
											"        \"notification_interval\": null,\r",
											"        \"notification_timeperiod_id\": null,\r",
											"        \"add_inherited_contact_group\": false,\r",
											"        \"add_inherited_contact\": false,\r",
											"        \"first_notification_delay\": null,\r",
											"        \"recovery_notification_delay\": null,\r",
											"        \"acknowledgement_timeout\": null,\r",
											"        \"freshness_checked\": 2,\r",
											"        \"freshness_threshold\": null,\r",
											"        \"flap_detection_enabled\": 2,\r",
											"        \"low_flap_threshold\": null,\r",
											"        \"high_flap_threshold\": null,\r",
											"        \"event_handler_enabled\": 2,\r",
											"        \"event_handler_command_id\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_alternative\": null,\r",
											"        \"comment\": \"Blabloubli\",\r",
											"        \"geo_coords\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.templates[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    });\r",
											"    pm.expect(response.categories[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"HostCategory2Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostCategory2Name\")\r",
											"    });\r",
											"    pm.expect(response.groups).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.macros[0]).to.include({\r",
											"        \"name\": \"BLIBLOUBLI\",\r",
											"        \"value\": \"Oh no\",\r",
											"        \"is_password\": false,\r",
											"        \"description\": \"null\"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Host6Name}}\",\r\n    \"alias\": \"{{Host6Alias}}\",\r\n    \"address\": \"127.0.0.1\",\r\n    \"monitoring_server_id\": 1,\r\n    \"snmp_version\": \"1\",\r\n    \"snmp_community\": \"\",\r\n    \"check_command_id\": {{CommandId}},\r\n    \"templates\": [ {{HostTemplate1Id}} ],\r\n    \"categories\": [ {{HostCategory2Id}} ],\r\n    \"comment\": \"Blabloubli\",\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"BLIBLOUBLI\",\r\n        \"value\": \"Oh no\",\r\n        \"is_password\": false,\r\n        \"description\": \"null\"\r\n        }\r\n    ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a host category filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The filter on the host category has been added to the ACL Ressources.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addfilter_hostcategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"All Resources;{{HostCategory1Name}}\"\n}\n"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW}}\",\r\n      \"password\": \"{{api_password_user_RW}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"pm.test(\"The hosts retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (4)\r",
											"    pm.expect(responseJson.result.length).to.eql(4);\r",
											"\r",
											"    // Check the properties of each host\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host2Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host2Name\"),\r",
											"        \"alias\": null,\r",
											"        \"address\": \"10.25.6.8\",\r",
											"        \"normal_check_interval\": 6,\r",
											"        \"retry_check_interval\": 8,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[0].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({\r",
											"        \"id\": 4,\r",
											"        \"name\": \"workhours\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({\r",
											"        \"id\": 3,\r",
											"        \"name\": \"nonworkhours\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[0].groups[0]).to.eql({\r",
											"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host3Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host3Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host3Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"normal_check_interval\": 5,\r",
											"        \"retry_check_interval\": 2,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[1].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].check_timeperiod).to.eql({\r",
											"        id: 1,\r",
											"        name: \"24x7\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].groups).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[2]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host5Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host5Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host5Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"check_timeperiod\": null,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[2].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[2].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[2].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[3]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host6Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host6Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host6Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"check_timeperiod\": null,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[3].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[3].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[3].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[3].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"The host with name '\" + pm.collectionVariables.get(\"Host5Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host5Alias\") + \"' has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.collectionVariables.unset(\"Host5Name\");\r",
											"    pm.collectionVariables.unset(\"Host5Alias\");\r",
											"    pm.collectionVariables.unset(\"Host5Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/{{Host5Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"{{Host5Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "Host + filter on HC linked",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a host to the host category filtered",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The filter on the host category has been added to the ACL Ressources.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addmember\",\n  \"object\": \"HC\",\n  \"values\": \"{{HostCategory1Name}};{{Host6Name}}\"\n}\n"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW}}\",\r\n      \"password\": \"{{api_password_user_RW}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The hosts retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (3)\r",
											"    pm.expect(responseJson.result.length).to.eql(3);\r",
											"\r",
											"    // Check the properties of each host\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host2Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host2Name\"),\r",
											"        \"alias\": null,\r",
											"        \"address\": \"10.25.6.8\",\r",
											"        \"normal_check_interval\": 6,\r",
											"        \"retry_check_interval\": 8,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[0].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({\r",
											"        \"id\": 4,\r",
											"        \"name\": \"workhours\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({\r",
											"        \"id\": 3,\r",
											"        \"name\": \"nonworkhours\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[0].groups[0]).to.eql({\r",
											"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host3Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host3Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host3Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"normal_check_interval\": 5,\r",
											"        \"retry_check_interval\": 2,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[1].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].check_timeperiod).to.eql({\r",
											"        id: 1,\r",
											"        name: \"24x7\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].groups).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[2]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host6Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host6Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host6Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"check_timeperiod\":null,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[2].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[2].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].categories).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"The host with name '\" + pm.collectionVariables.get(\"Host5Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host5Alias\") + \"' has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.collectionVariables.unset(\"Host6Name\");\r",
											"    pm.collectionVariables.unset(\"Host6Alias\");\r",
											"    pm.collectionVariables.unset(\"Host6Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/{{Host6Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"{{Host6Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The hosts retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (2)\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"\r",
											"    // Check the properties of each host\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host2Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host2Name\"),\r",
											"        \"alias\": null,\r",
											"        \"address\": \"10.25.6.8\",\r",
											"        \"normal_check_interval\": 6,\r",
											"        \"retry_check_interval\": 8,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[0].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({\r",
											"        \"id\": 4,\r",
											"        \"name\": \"workhours\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({\r",
											"        \"id\": 3,\r",
											"        \"name\": \"nonworkhours\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[0].groups[0]).to.eql({\r",
											"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host3Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host3Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host3Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"normal_check_interval\": 5,\r",
											"        \"retry_check_interval\": 2,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[1].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].check_timeperiod).to.eql({\r",
											"        id: 1,\r",
											"        name: \"24x7\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].groups).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    }]);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "Host excluded",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Exclude a host of the ACL Ressources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host has been excluded from the ACL Ressources.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addhostexclusion\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"All Resources;{{Host3Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW}}\",\r\n      \"password\": \"{{api_password_user_RW}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The hosts retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (1)\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"\r",
											"    // Check the properties of each host\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host2Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host2Name\"),\r",
											"        \"alias\": null,\r",
											"        \"address\": \"10.25.6.8\",\r",
											"        \"normal_check_interval\": 6,\r",
											"        \"retry_check_interval\": 8,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[0].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({\r",
											"        \"id\": 4,\r",
											"        \"name\": \"workhours\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({\r",
											"        \"id\": 3,\r",
											"        \"name\": \"nonworkhours\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[0].groups[0]).to.eql({\r",
											"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host not found.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"\r",
											"    pm.expect(responseJson.message).to.eql(\"Host not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"check_timeperiod_id\": 3,\r\n    \"notification_enabled\": 1,\r\n    \"notification_options\": 16,\r\n    \"notification_interval\": 10,\r\n    \"notification_timeperiod_id\": 4,\r\n    \"icon_id\": 2,\r\n    \"icon_alternative\": \"1\",\r\n    \"categories\": [ {{HostCategory2Id}} ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/{{Host3Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"{{Host3Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host not found.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"\r",
											"    pm.expect(responseJson.message).to.eql(\"Host not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/{{Host3Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"{{Host3Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the host exclusion of the ACL Ressources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host has been excluded from the ACL Ressources.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"delhostexclusion\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"All Resources;{{Host3Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a host category filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The filter on the host category has been deleted from the ACL Ressources.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"delfilter_hostcategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"All Resources;{{HostCategory1Name}}\"\n}\n"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "user with R/W rights with host not directly linked",
			"item": [
				{
					"name": "No access",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new host",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"Host7Name\", \"host-7\");\r",
											"pm.collectionVariables.set(\"Host7Alias\", \"I'm the seventh host\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Host7Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host7Alias\") + \"'.\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"\r",
											"    // Creation of a variable with the ID of the new host \r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.collectionVariables.set(\"Host7Id\", response.id);\r",
											"\r",
											"    pm.expect(response).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host7Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host7Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host7Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"monitoring_server_id\": 1,\r",
											"        \"snmp_version\": \"1\",\r",
											"        \"timezone_id\": null,\r",
											"        \"severity_id\": null,\r",
											"        \"check_command_id\": parseInt(pm.collectionVariables.get(\"CommandId\")),\r",
											"        \"check_timeperiod_id\": null,\r",
											"        \"note_url\": null,\r",
											"        \"note\": null,\r",
											"        \"action_url\": null,\r",
											"        \"max_check_attempts\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"active_check_enabled\": 2,\r",
											"        \"passive_check_enabled\": 2,\r",
											"        \"notification_enabled\": 2,\r",
											"        \"notification_options\": null,\r",
											"        \"notification_interval\": null,\r",
											"        \"notification_timeperiod_id\": null,\r",
											"        \"add_inherited_contact_group\": false,\r",
											"        \"add_inherited_contact\": false,\r",
											"        \"first_notification_delay\": null,\r",
											"        \"recovery_notification_delay\": null,\r",
											"        \"acknowledgement_timeout\": null,\r",
											"        \"freshness_checked\": 2,\r",
											"        \"freshness_threshold\": null,\r",
											"        \"flap_detection_enabled\": 2,\r",
											"        \"low_flap_threshold\": null,\r",
											"        \"high_flap_threshold\": null,\r",
											"        \"event_handler_enabled\": 2,\r",
											"        \"event_handler_command_id\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_alternative\": null,\r",
											"        \"comment\": null,\r",
											"        \"geo_coords\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.templates[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    });\r",
											"    pm.expect(response.categories[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"HostCategory1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostCategory1Name\")\r",
											"    });\r",
											"    pm.expect(response.groups[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    });\r",
											"    pm.expect(response.macros).to.be.an('Array').that.is.empty;\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Host7Name}}\",\r\n    \"alias\": \"{{Host7Alias}}\",\r\n    \"address\": \"127.0.0.1\",\r\n    \"monitoring_server_id\": 1,\r\n    \"snmp_version\": \"1\",\r\n    \"snmp_community\": \"\",\r\n    \"check_command_id\": {{CommandId}},\r\n    \"categories\": [ {{HostCategory1Id}} ],\r\n    \"groups\": [ {{HostGroup1Id}} ],\r\n    \"templates\": [ {{HostTemplate1Id}} ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new host",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"Host8Name\", \"host-8\");\r",
											"pm.collectionVariables.set(\"Host8Alias\", \"I'm the eighth host\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Host8Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host8Alias\") + \"'.\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"\r",
											"    // Creation of a variable with the ID of the new host \r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.collectionVariables.set(\"Host8Id\", response.id);\r",
											"\r",
											"    pm.expect(response).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host8Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host8Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host8Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"monitoring_server_id\": 1,\r",
											"        \"snmp_version\": \"1\",\r",
											"        \"timezone_id\": null,\r",
											"        \"severity_id\": null,\r",
											"        \"check_command_id\": parseInt(pm.collectionVariables.get(\"CommandId\")),\r",
											"        \"check_timeperiod_id\": null,\r",
											"        \"note_url\": null,\r",
											"        \"note\": null,\r",
											"        \"action_url\": null,\r",
											"        \"max_check_attempts\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"active_check_enabled\": 2,\r",
											"        \"passive_check_enabled\": 2,\r",
											"        \"notification_enabled\": 2,\r",
											"        \"notification_options\": null,\r",
											"        \"notification_interval\": null,\r",
											"        \"notification_timeperiod_id\": null,\r",
											"        \"add_inherited_contact_group\": false,\r",
											"        \"add_inherited_contact\": false,\r",
											"        \"first_notification_delay\": null,\r",
											"        \"recovery_notification_delay\": null,\r",
											"        \"acknowledgement_timeout\": null,\r",
											"        \"freshness_checked\": 2,\r",
											"        \"freshness_threshold\": null,\r",
											"        \"flap_detection_enabled\": 2,\r",
											"        \"low_flap_threshold\": null,\r",
											"        \"high_flap_threshold\": null,\r",
											"        \"event_handler_enabled\": 2,\r",
											"        \"event_handler_command_id\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_alternative\": null,\r",
											"        \"comment\": null,\r",
											"        \"geo_coords\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.templates[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    });\r",
											"    pm.expect(response.categories[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"HostCategory1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostCategory1Name\")\r",
											"    });\r",
											"    pm.expect(response.groups[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    });\r",
											"    pm.expect(response.macros).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Host8Name}}\",\r\n    \"alias\": \"{{Host8Alias}}\",\r\n    \"address\": \"127.0.0.1\",\r\n    \"monitoring_server_id\": 1,\r\n    \"snmp_version\": \"1\",\r\n    \"snmp_community\": \"\",\r\n    \"check_command_id\": {{CommandId}},\r\n    \"categories\": [ {{HostCategory1Id}} ],\r\n    \"groups\": [ {{HostGroup1Id}} ],\r\n    \"templates\": [ {{HostTemplate1Id}} ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"No hosts listed because the user does not have correct rights on resources\", function() {\r",
											"    // Check the number of hosts (1)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host not found.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"\r",
											"    pm.expect(responseJson.message).to.eql(\"Host not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/{{Host7Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"{{Host7Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "Access only to the host group",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show ACLResources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resource has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    var response = JSON.parse(responseBody);",
											"    pm.collectionVariables.set(\"ACLResources\", response.result[1].name);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"ACLRESOURCE\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Grant the new Host Group to the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host group has been granted to ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addfilter_hostgroup\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{HostGroup1Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a filter for the host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The filter for the host category has been added to the ACL Ressources.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addfilter_hostcategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{HostCategory2Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The hosts retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (1)\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"\r",
											"    // Check the properties of each host\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host2Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host2Name\"),\r",
											"        \"alias\": null,\r",
											"        \"address\": \"10.25.6.8\",\r",
											"        \"normal_check_interval\": 6,\r",
											"        \"retry_check_interval\": 8,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[0].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({\r",
											"        \"id\": 4,\r",
											"        \"name\": \"workhours\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({\r",
											"        \"id\": 3,\r",
											"        \"name\": \"nonworkhours\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories[0]).to.eql({\r",
											"        id: pm.collectionVariables.get(\"HostCategory2Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostCategory2Name\")\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].groups[0]).to.eql({\r",
											"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    });\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"The host with name '\" + pm.collectionVariables.get(\"Host2Name\") + \"' has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.collectionVariables.unset(\"Host2Name\");\r",
											"    pm.collectionVariables.unset(\"Host2Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/{{Host2Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"{{Host2Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"No hosts listed because the user does not have correct rights\", function() {\r",
											"    // Check the number of hosts (1)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "Access to the host group and filter on host category",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a filter for the host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The filter for the host category has been added to the ACL Ressources.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addfilter_hostcategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{HostCategory1Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The hosts retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (3)\r",
											"    pm.expect(responseJson.result.length).to.eql(3);\r",
											"\r",
											"    // Check the properties of each host\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host3Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host3Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host3Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"normal_check_interval\": 5,\r",
											"        \"retry_check_interval\": 2,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[0].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({\r",
											"        id: 1,\r",
											"        name: \"24x7\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host7Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host7Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host7Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"check_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[1].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].categories).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].groups).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[2]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host8Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host8Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host8Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"check_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[2].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[2].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].categories).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].groups).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    }]);\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"The host with name '\" + pm.collectionVariables.get(\"Host8Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host8Alias\") + \"' has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.collectionVariables.unset(\"Host8Name\");\r",
											"    pm.collectionVariables.unset(\"Host8Alias\");\r",
											"    pm.collectionVariables.unset(\"Host8Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/{{Host8Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"{{Host8Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The hosts retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (2)\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"\r",
											"    // Check the properties of each host\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host3Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host3Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host3Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"normal_check_interval\": 5,\r",
											"        \"retry_check_interval\": 2,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[0].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({\r",
											"        id: 1,\r",
											"        name: \"24x7\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host7Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host7Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host7Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"check_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[1].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].categories).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].groups).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    }]);\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "Host excluded",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Exclude a host of the ACL Ressources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host has been excluded from the ACL Ressources.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addhostexclusion\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{Host3Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The hosts retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (1)\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"\r",
											"    // Check the properties of each host\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Host7Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Host7Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"Host7Alias\"),\r",
											"        \"address\": \"127.0.0.1\",\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"check_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[0].monitoring_server).to.eql({\r",
											"        id: 1, \r",
											"        name: \"Central\"\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].templates).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{\r",
											"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
											"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
											"    }]);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host not found.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"\r",
											"    pm.expect(responseJson.message).to.eql(\"Host not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/{{Host3Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"{{Host3Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "user with Read Only rights",
			"item": [
				{
					"name": "Login with Read Only user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Read'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Read}}\",\r\n      \"password\": \"{{api_password_user_Read}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available hosts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The hosts retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (2)\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Host3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host3Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"Host3Alias\"),\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"normal_check_interval\": 5,\r",
									"        \"retry_check_interval\": 2,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[0].monitoring_server).to.eql({\r",
									"        id: 1, \r",
									"        name: \"Central\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].templates).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({\r",
									"        id: 1,\r",
									"        name: \"24x7\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
									"    }]);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Host7Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host7Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"Host7Alias\"),\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"check_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1].monitoring_server).to.eql({\r",
									"        id: 1, \r",
									"        name: \"Central\"\r",
									"    });\r",
									"    pm.expect(responseJson.result[1].templates).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostTemplate1Name\")\r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].categories).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostCategory1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostCategory1Name\")\r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].groups).to.eql([{\r",
									"        id: pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        name: pm.collectionVariables.get(\"HostGroup1Name\")\r",
									"    }]);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new host",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to create host.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to add hosts\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"host-template5\",\r\n    \"alias\": \"I'm the fourth host template but I was created by user R/W\",\r\n    \"snmp_version\": \"1\",\r\n    \"snmp_community\": \"\",\r\n    \"check_command_id\": {{CommandId}},\r\n    \"address\": \"127.0.0.1\",\r\n    \"monitoring_server_id\": 1\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to create host.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to edit a host\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"check_timeperiod_id\": 3,\r\n    \"notification_enabled\": 1,\r\n    \"notification_options\": 16,\r\n    \"notification_interval\": 10,\r\n    \"notification_timeperiod_id\": 4,\r\n    \"icon_id\": 2,\r\n    \"icon_alternative\": \"1\",\r\n    \"categories\": [ {{HostCategory2Id}} ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/{{Host3Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"{{Host3Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to delete host.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to delete a host\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/{{Host3Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"{{Host3Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from Read Only user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "user with no rights",
			"item": [
				{
					"name": "Login with user with no access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Nothing'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Nothing}}\",\r\n      \"password\": \"{{api_password_user_Nothing}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available hosts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to list host.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to list hosts\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new host",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to create host.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to add hosts\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"host-template5\",\r\n    \"alias\": \"I'm the fourth host template but I was created by user R/W\",\r\n    \"snmp_version\": \"1\",\r\n    \"snmp_community\": \"\",\r\n    \"check_command_id\": {{CommandId}},\r\n    \"address\": \"127.0.0.1\",\r\n    \"monitoring_server_id\": 1\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to create host.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to edit a host\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"check_timeperiod_id\": 3,\r\n    \"notification_enabled\": 1,\r\n    \"notification_options\": 16,\r\n    \"notification_interval\": 10,\r\n    \"notification_timeperiod_id\": 4,\r\n    \"icon_id\": 2,\r\n    \"icon_alternative\": \"1\",\r\n    \"categories\": [ {{HostCategory2Id}} ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/{{Host3Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"{{Host3Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to delete host.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to delete a host\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/{{Host7Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"{{Host7Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user with no access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "Reset",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The host with name '\" + pm.collectionVariables.get(\"Host3Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host3Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Host3Name\");\r",
									"    pm.collectionVariables.unset(\"Host3Alias\");\r",
									"    pm.collectionVariables.unset(\"Host3Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/{{Host3Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"{{Host3Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The host with name '\" + pm.collectionVariables.get(\"Host7Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host7Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Host7Name\");\r",
									"    pm.collectionVariables.unset(\"Host7Alias\");\r",
									"    pm.collectionVariables.unset(\"Host7Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/{{Host7Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"{{Host7Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a host severity (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host severity with name '\" + pm.collectionVariables.get(\"HostSeverity1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostSeverity1Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"HostSeverity1Name\");\r",
									"    pm.collectionVariables.unset(\"HostSeverity1Alias\");\r",
									"    pm.collectionVariables.unset(\"HostSeverity1Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/severities/{{HostSeverity1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"severities",
								"{{HostSeverity1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a host severity (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host severity with name '\" + pm.collectionVariables.get(\"HostSeverity2Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostSeverity2Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"HostSeverity2Name\");\r",
									"    pm.collectionVariables.unset(\"HostSeverity2Alias\");\r",
									"    pm.collectionVariables.unset(\"HostSeverity2Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/severities/{{HostSeverity2Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"severities",
								"{{HostSeverity2Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a host category (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host category with name '\" + pm.collectionVariables.get(\"HostCategory1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostCategory1Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"HostCategory1Name\");\r",
									"    pm.collectionVariables.unset(\"HostCategory1Alias\");\r",
									"    pm.collectionVariables.unset(\"HostCategory1Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/categories/{{HostCategory1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"categories",
								"{{HostCategory1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a host category (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host category with name '\" + pm.collectionVariables.get(\"HostCategory2Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostCategory2Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"HostCategory2Name\");\r",
									"    pm.collectionVariables.unset(\"HostCategory2Alias\");\r",
									"    pm.collectionVariables.unset(\"HostCategory2Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/categories/{{HostCategory2Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"categories",
								"{{HostCategory2Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a host group (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host group with name '\" + pm.collectionVariables.get(\"HostGroup1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostGroup1Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"HostGroup1Name\");\r",
									"    pm.collectionVariables.unset(\"HostGroup1Alias\");\r",
									"    pm.collectionVariables.unset(\"HostGroup1Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups",
								"{{HostGroup1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a host template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The host template with name '\" + pm.collectionVariables.get(\"HostTemplate1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostTemplate1Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"HostTemplate1Name\");\r",
									"    pm.collectionVariables.unset(\"HostTemplate1Alias\");\r",
									"    pm.collectionVariables.unset(\"HostTemplate1Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/templates/{{HostTemplate1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"templates",
								"{{HostTemplate1Id}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "50",
									"disabled": true
								},
								{
									"key": "sort_by",
									"value": "id",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a command",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"A command has been successfully deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.collectionVariables.unset(\"CommandId\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"CMD\",\n  \"values\": \"check-host-alive\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
