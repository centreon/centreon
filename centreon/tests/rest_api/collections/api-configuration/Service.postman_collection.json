{
	"info": {
		"_postman_id": "f947f556-f02e-4213-8b51-ae4364838a45",
		"name": "Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16182525",
		"_collection_link": "https://centreon-api-v2-configuration.postman.co/workspace/API-23.10~d8660f05-3c64-4c5b-af73-1a5543bff4e1/collection/16182525-f947f556-f02e-4213-8b51-ae4364838a45?action=share&source=collection_link&creator=16182525"
	},
	"item": [
		{
			"name": "Log in as Admin    ",
			"item": [
				{
					"name": "Delete existing hosts",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available host for deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"A list of host has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"    let hostsCreated = [];\r",
											"    for(let count = 0; count < responseJson.result.length; count++){\r",
											"        hostsCreated.push(responseJson.result[count].id);\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"hostsCreated\", hostsCreated);\r",
											"    pm.collectionVariables.set(\"HostTotal\", responseJson.meta.total);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletion of all hosts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hostsCreated = pm.collectionVariables.get(\"hostsCreated\");\r",
											"\r",
											"let currentHost = hostsCreated.shift();\r",
											"pm.collectionVariables.set(\"currentHost\", currentHost);\r",
											"pm.collectionVariables.set(\"hostsCreated\", hostsCreated);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been deleted.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"\r",
											"const host = pm.collectionVariables.get(\"hostsCreated\");\r",
											"const HostTotal = pm.collectionVariables.get(\"HostTotal\");\r",
											"\r",
											"console.log(host.length);\r",
											"if (host.length > 0) {\r",
											"    postman.setNextRequest(\"Deletion of all hosts\");\r",
											"} else {\r",
											"    postman.setNextRequest(\"Check if there are any host left to delete\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/{{currentHost}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"{{currentHost}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check if there are any host left to delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"A list of host has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"    let hostsCreated = [];\r",
											"    for(let count = 0; count < responseJson.result.length; count++){\r",
											"        hostsCreated.push(responseJson.result[count].id);\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"hostsCreated\", hostsCreated);\r",
											"    pm.collectionVariables.set(\"HostTotal\", responseJson.meta.total);\r",
											"});\r",
											"\r",
											"\r",
											"const host = pm.collectionVariables.get(\"hostsCreated\");\r",
											"const HostTotal = pm.collectionVariables.get(\"HostTotal\");\r",
											"\r",
											"console.log(host.length);\r",
											"if (host.length > 0) {\r",
											"    postman.setNextRequest(\"Deletion of all hosts\");\r",
											"} else if (HostTotal > 0) {\r",
											"    postman.setNextRequest(\"Check if there are any host left to delete\");\r",
											"}\r",
											"else {\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"hostsCreated\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "user_with_RW_rights    ",
			"item": [
				{
					"name": "Add user_with_RW_rights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_RW\", \"user_with_RW_rights\");\r",
									"pm.collectionVariables.set(\"api_password_user_RW\", \"Centreon!123\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};{{api_login_user_RW}};{{api_login_user_RW}}@localhost;{{api_password_user_RW}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;RW_ALL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;{{api_login_user_RW}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu RW",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RW right",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;1;Configuration\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RW right Tokens",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n\"values\": \"RW;1;Administration;API Tokens\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RW to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user_with_RW_rights_filters    ",
			"item": [
				{
					"name": "Add user_with_RW_rights_filters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_RW_filters\", \"user_with_RW_rights_filters\");\r",
									"pm.collectionVariables.set(\"api_password_user_RW_filters\", \"Centreon!123\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW_filters}};{{api_login_user_RW_filters}};{{api_login_user_RW_filters}}@localhost;{{api_password_user_RW_filters}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW_filters}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW_filters}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RW_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_limited;RW_limited\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RW_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_limited;{{api_login_user_RW_filters}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Resources limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLRESOURCE\",\r\n  \"values\": \"limited;limited\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RW_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_limited;limited\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RW to RW_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_limited;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user_with_R_rights    ",
			"item": [
				{
					"name": "Add user_with_R_rights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_Read\", \"user_with_R_rights\");\r",
									"pm.collectionVariables.set(\"api_password_user_Read\", \"Centreon!123\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read}};{{api_login_user_Read}};{{api_login_user_Read}}@localhost;{{api_password_user_Read}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;RO_ALL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;{{api_login_user_Read}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu RO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RO;RO\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RO right",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantro\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RO;1;Configuration\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RO to RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;RO\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user_with_R_rights_filters    ",
			"item": [
				{
					"name": "Add user_with_R_rights_filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_Read_filters\", \"user_with_R_rights_filters\");\r",
									"pm.collectionVariables.set(\"api_password_user_Read_filters\", \"Centreon!123\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read_filters}};{{api_login_user_Read_filters}};{{api_login_user_Read_filters}}@localhost;{{api_password_user_Read_filters}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read_filters}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read_filters}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RO_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_limited;RO_limited\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RO_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_limited;{{api_login_user_Read_filters}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RO_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_limited;limited\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RO to RO_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_limited;RO\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user_nothing    ",
			"item": [
				{
					"name": "Add user_nothing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_Nothing\", \"user_nothing\");\r",
									"pm.collectionVariables.set(\"api_password_user_Nothing\", \"Centreon!123\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};{{api_login_user_Nothing}};{{api_login_user_Nothing}}@localhost;{{api_password_user_Nothing}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;{{api_login_user_Nothing}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Nothing to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new service severity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service severity has been successfully created, with name '\" + pm.collectionVariables.get(\"ServiceSeverity1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceSeverity1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service severity\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"ServiceSeverity1Id\", response.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"ServiceSeverity1Name\", \"Test_S_Severity_1\");\r",
									"pm.collectionVariables.set(\"ServiceSeverity1Alias\", \"I'm a service severity!\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"{{ServiceSeverity1Name}}\",\n    \"alias\":\"{{ServiceSeverity1Alias}}\",\n    \"level\": 2,\n    \"icon_id\": 1,\n    \"is_activated\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/severities",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"severities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new service category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service category has been successfully created, with name '\" + pm.collectionVariables.get(\"ServiceCategory1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceCategory1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service category\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"ServiceCategory1Id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"ServiceCategory1Name\", \"Test_S_Category_1\");\r",
									"pm.collectionVariables.set(\"ServiceCategory1Alias\", \"I'm a service category!\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"{{ServiceCategory1Name}}\",\n    \"alias\":\"{{ServiceCategory1Alias}}\",\n    \"is_activated\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new service category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service category has been successfully created, with name '\" + pm.collectionVariables.get(\"ServiceCategory2Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceCategory2Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service category\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"ServiceCategory2Id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"ServiceCategory2Name\", \"Test_S_Category_2\");\r",
									"pm.collectionVariables.set(\"ServiceCategory2Alias\", \"I'm a service category!\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"{{ServiceCategory2Name}}\",\n    \"alias\":\"{{ServiceCategory2Alias}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new service group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service group has been successfully created, with name '\" + pm.collectionVariables.get(\"ServiceGroup1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceGroup1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service group\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"ServiceGroup1Id\", response.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"ServiceGroup1Name\", \"Test_S_Group_1\");\r",
									"pm.collectionVariables.set(\"ServiceGroup1Alias\", \"I should be successful !\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{ServiceGroup1Name}}\",\n    \"alias\": \"{{ServiceGroup1Alias}}\",\n    \"geo_coords\": \"\",\n    \"comment\": \"Hello world ! 1\",\n    \"is_activated\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a command",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"A command has been successfully created.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"CMD\",\n  \"values\": \"check-host-alive;check;$USER1$/check_ping -H $HOSTADDRESS$ -w 3000.0,80% -c 5000.0,100% -p 1\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve id of the command",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"A command has been successfully created.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var response = pm.response.json();",
									"    pm.collectionVariables.set(\"CommandId\", response.result[response.result.length-1].id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"show\",\n  \"object\": \"CMD\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new host with all properties defined",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Host1Name\", \"host_001\");\r",
									"pm.collectionVariables.set(\"Host1Alias\", \"I'm the first host created by admin\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Host1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"Host1Id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Host1Name}}\",\r\n    \"alias\": \"{{Host1Alias}}\",\r\n    \"address\": \"127.0.0.1\",\r\n    \"monitoring_server_id\": 1,\r\n    \"snmp_version\": \"2c\",\r\n    \"snmp_community\": \"snmpCommunity-test\",\r\n    \"templates\": [4],\r\n    \"comment\": \"1, 2, 3\",\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"nameA\",\r\n        \"value\": \"valueA\",\r\n        \"is_password\": false,\r\n        \"description\": \"some text\"\r\n        },\r\n        {\r\n        \"name\": \"nameB\",\r\n        \"value\": \"valueB\",\r\n        \"is_password\": true,\r\n        \"description\": null\r\n        }\r\n    ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service template with all properties defined",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"ServiceTemplate1Name\", \"service template 1\");\r",
									"pm.collectionVariables.set(\"ServiceTemplate1Alias\", \"I-m a super service\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service template has been successfully created, with name '\" + pm.collectionVariables.get(\"ServiceTemplate1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceTemplate1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service template\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"ServiceTemplate1Id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{ServiceTemplate1Name}}\",\r\n    \"alias\": \"{{ServiceTemplate1Alias}}\",\r\n    \"host_templates\": [3],\r\n    \"comment\": \"Kouroukoukou roukoukou stach stach\",\r\n    \"check_timeperiod_id\": 1,\r\n    \"max_check_attempts\": 5,\r\n    \"normal_check_interval\": 3,\r\n    \"retry_check_interval\": 2,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 1,\r\n    \"notification_timeperiod_id\": 2,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 19,\r\n    \"recovery_notification_delay\": 9,\r\n    \"acknowledgement_timeout\": 8,\r\n    \"freshness_checked\": 2,\r\n    \"freshness_threshold\": 11,\r\n    \"flap_detection_enabled\": 2,\r\n    \"low_flap_threshold\": 49,\r\n    \"high_flap_threshold\": 51,\r\n    \"event_handler_enabled\": 2,\r\n    \"graph_template_id\": 1,\r\n    \"note\": \"note\",\r\n    \"note_url\": \"note_url\",\r\n    \"action_url\": \"action url\",\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"3\",\r\n    \"macros\": [\r\n        {\r\n            \"name\": \"Pourquoi\",\r\n            \"value\": \"ABCDEFG3\",\r\n            \"is_password\": false,\r\n            \"description\": \"2f86451\"\r\n        },\r\n        {\r\n            \"name\": \"TOTO\",\r\n            \"value\": \"cacahuètes\",\r\n            \"is_password\": true,\r\n            \"description\": null\r\n        }\r\n    ],\r\n    \"service_categories\": [ {{ServiceCategory1Id}} ],\r\n    \"service_groups\": [ \r\n        {\r\n            \"service_group_id\": {{ServiceGroup1Id}},\r\n            \"host_template_id\": 3\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service with all properties defined",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Service1Name\", \"service 001\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service has been successfully created, with name '\" + pm.collectionVariables.get(\"Service1Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"Service1Id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Service1Name}}\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"service_template_id\": {{ServiceTemplate1Id}},\r\n    \"comment\": \"comment\",\r\n    \"check_command_id\": {{CommandId}},\r\n    \"check_command_args\": [\"Holà\", \"Hello\"],\r\n    \"check_timeperiod_id\": 1,\r\n    \"max_check_attempts\": 7,\r\n    \"normal_check_interval\": 2,\r\n    \"retry_check_interval\": 1,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"volatility_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": true,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"acknowledgement_timeout\": 8,\r\n    \"freshness_checked\": 0,\r\n    \"freshness_threshold\": 11,\r\n    \"flap_detection_enabled\": 1,\r\n    \"low_flap_threshold\": 36,\r\n    \"high_flap_threshold\": 87,\r\n    \"event_handler_enabled\": 0,\r\n    \"event_handler_command_id\": {{CommandId}},\r\n    \"event_handler_command_args\": [\"Hi\", \"Bjour\"],\r\n    \"graph_template_id\": 1,\r\n    \"note\": \"Bloubloublou\",\r\n    \"note_url\": \"Hakuna Matata\",\r\n    \"action_url\": \"Chachacha\",\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"4\",\r\n    \"severity_id\": {{ServiceSeverity1Id}},\r\n    \"geo_coords\": \"12.34,23.5\",\r\n    \"is_activated\": true,\r\n    \"service_categories\": [ {{ServiceCategory1Id}} ],\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"MACROA\",\r\n        \"value\": \"A\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        },\r\n        {\r\n        \"name\": \"MACROB\",\r\n        \"value\": \"B\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        }\r\n    ],\r\n    \"service_groups\": [ {{ServiceGroup1Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (1)\r",
									"    pm.expect(responseJson.result.length).to.eql(1);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0].id).to.eql(pm.collectionVariables.get(\"Service1Id\"));\r",
									"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"Service1Name\"));\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].normal_check_interval).to.eql(2);\r",
									"    pm.expect(responseJson.result[0].retry_check_interval).to.eql(1);\r",
									"    pm.expect(responseJson.result[0].is_activated).to.eql(true);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service with mandatory properties defined + check command",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Service2Name\", \"service 002\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service has been successfully created, with name '\" + pm.collectionVariables.get(\"Service2Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"Service2Id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Service2Name}}\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"check_command_id\": {{CommandId}}\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (2)\r",
									"    pm.expect(responseJson.result.length).to.eql(2);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0].id).to.eql(pm.collectionVariables.get(\"Service1Id\"));\r",
									"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"Service1Name\"));\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].normal_check_interval).to.eql(2);\r",
									"    pm.expect(responseJson.result[0].retry_check_interval).to.eql(1);\r",
									"    pm.expect(responseJson.result[0].is_activated).to.eql(true);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1].id).to.eql(pm.collectionVariables.get(\"Service2Id\"));\r",
									"    pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"Service2Name\"));\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].service_template).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].check_timeperiod).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].notification_timeperiod).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].severity).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].normal_check_interval).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].retry_check_interval).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].is_activated).to.eql(true);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service with mandatory properties defined + template",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Service3Name\", \"service 003\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service has been successfully created, with name '\" + pm.collectionVariables.get(\"Service3Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"Service3Id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Service3Name}}\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"service_template_id\": {{ServiceTemplate1Id}}\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (3)\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0].id).to.eql(pm.collectionVariables.get(\"Service1Id\"));\r",
									"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"Service1Name\"));\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].normal_check_interval).to.eql(2);\r",
									"    pm.expect(responseJson.result[0].retry_check_interval).to.eql(1);\r",
									"    pm.expect(responseJson.result[0].is_activated).to.eql(true);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1].id).to.eql(pm.collectionVariables.get(\"Service2Id\"));\r",
									"    pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"Service2Name\"));\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].service_template).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].check_timeperiod).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].notification_timeperiod).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].severity).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].normal_check_interval).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].retry_check_interval).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].is_activated).to.eql(true);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[2].id).to.eql(pm.collectionVariables.get(\"Service3Id\"));\r",
									"    pm.expect(responseJson.result[2].name).to.eql(pm.collectionVariables.get(\"Service3Name\"));\r",
									"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].check_timeperiod).to.eql(null);\r",
									"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql(null);\r",
									"    pm.expect(responseJson.result[2].severity).to.eql(null);\r",
									"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[2].groups).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[2].normal_check_interval).to.eql(null);\r",
									"    pm.expect(responseJson.result[2].retry_check_interval).to.eql(null);\r",
									"    pm.expect(responseJson.result[2].is_activated).to.eql(true);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service without name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The service has not been created, because the name is mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[name] The property name is required\\n\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"host_id\": {{Host1Id}},\r\n    \"service_template_id\": {{ServiceTemplate1Id}},\r\n    \"comment\": \"comment\",\r\n    \"check_command_id\": {{CommandId}},\r\n    \"check_command_args\": [\"Holà\", \"Hello\"],\r\n    \"check_timeperiod_id\": 1,\r\n    \"max_check_attempts\": 7,\r\n    \"normal_check_interval\": 2,\r\n    \"retry_check_interval\": 1,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"volatility_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": true,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"acknowledgement_timeout\": 8,\r\n    \"freshness_checked\": 0,\r\n    \"freshness_threshold\": 11,\r\n    \"flap_detection_enabled\": 1,\r\n    \"low_flap_threshold\": 36,\r\n    \"high_flap_threshold\": 87,\r\n    \"event_handler_enabled\": 0,\r\n    \"event_handler_command_id\": {{CommandId}},\r\n    \"event_handler_command_args\": [\"Hi\", \"Bjour\"],\r\n    \"graph_template_id\": 1,\r\n    \"note\": \"Bloubloublou\",\r\n    \"note_url\": \"Hakuna Matata\",\r\n    \"action_url\": \"Chachacha\",\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"4\",\r\n    \"severity_id\": {{ServiceSeverity1Id}},\r\n    \"geo_coords\": \"12.34,23.5\",\r\n    \"is_activated\": true,\r\n    \"service_categories\": [ {{ServiceCategory1Id}} ],\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"MACROA\",\r\n        \"value\": \"A\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        },\r\n        {\r\n        \"name\": \"MACROB\",\r\n        \"value\": \"B\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        }\r\n    ],\r\n    \"service_groups\": [ {{ServiceGroup1Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service without host",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The service has not been created, because the host is mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[host_id] The property host_id is required\\n\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"service 333\",\r\n    \"service_template_id\": {{ServiceTemplate1Id}},\r\n    \"comment\": \"comment\",\r\n    \"check_command_id\": {{CommandId}},\r\n    \"check_command_args\": [\"Holà\", \"Hello\"],\r\n    \"check_timeperiod_id\": 1,\r\n    \"max_check_attempts\": 7,\r\n    \"normal_check_interval\": 2,\r\n    \"retry_check_interval\": 1,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"volatility_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": true,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"acknowledgement_timeout\": 8,\r\n    \"freshness_checked\": 0,\r\n    \"freshness_threshold\": 11,\r\n    \"flap_detection_enabled\": 1,\r\n    \"low_flap_threshold\": 36,\r\n    \"high_flap_threshold\": 87,\r\n    \"event_handler_enabled\": 0,\r\n    \"event_handler_command_id\": {{CommandId}},\r\n    \"event_handler_command_args\": [\"Hi\", \"Bjour\"],\r\n    \"graph_template_id\": 1,\r\n    \"note\": \"Bloubloublou\",\r\n    \"note_url\": \"Hakuna Matata\",\r\n    \"action_url\": \"Chachacha\",\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"4\",\r\n    \"severity_id\": {{ServiceSeverity1Id}},\r\n    \"geo_coords\": \"12.34,23.5\",\r\n    \"is_activated\": true,\r\n    \"service_categories\": [ {{ServiceCategory1Id}} ],\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"MACROA\",\r\n        \"value\": \"A\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        },\r\n        {\r\n        \"name\": \"MACROB\",\r\n        \"value\": \"B\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        }\r\n    ],\r\n    \"service_groups\": [ {{ServiceGroup1Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service without check command",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The service has not been created, because the check command or template is mandatory.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"The check command cannot be null if the service template is null\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"service 333\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"comment\": \"comment\",\r\n    \"check_timeperiod_id\": 1,\r\n    \"max_check_attempts\": 7,\r\n    \"normal_check_interval\": 2,\r\n    \"retry_check_interval\": 1,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"volatility_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": true,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"acknowledgement_timeout\": 8,\r\n    \"freshness_checked\": 0,\r\n    \"freshness_threshold\": 11,\r\n    \"flap_detection_enabled\": 1,\r\n    \"low_flap_threshold\": 36,\r\n    \"high_flap_threshold\": 87,\r\n    \"event_handler_enabled\": 0,\r\n    \"event_handler_command_id\": {{CommandId}},\r\n    \"event_handler_command_args\": [\"Hi\", \"Bjour\"],\r\n    \"graph_template_id\": 1,\r\n    \"note\": \"Bloubloublou\",\r\n    \"note_url\": \"Hakuna Matata\",\r\n    \"action_url\": \"Chachacha\",\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"4\",\r\n    \"severity_id\": {{ServiceSeverity1Id}},\r\n    \"geo_coords\": \"12.34,23.5\",\r\n    \"is_activated\": true,\r\n    \"service_categories\": [ {{ServiceCategory1Id}} ],\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"MACROA\",\r\n        \"value\": \"A\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        },\r\n        {\r\n        \"name\": \"MACROB\",\r\n        \"value\": \"B\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        }\r\n    ],\r\n    \"service_groups\": [ {{ServiceGroup1Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service with empty name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The service has not been created, because the name cannot be empty.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[NewService::name] The string is empty, but non empty string was expected\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"service_template_id\": {{ServiceTemplate1Id}},\r\n    \"comment\": \"comment\",\r\n    \"check_command_id\": {{CommandId}},\r\n    \"check_command_args\": [\"Holà\", \"Hello\"],\r\n    \"check_timeperiod_id\": 1,\r\n    \"max_check_attempts\": 7,\r\n    \"normal_check_interval\": 2,\r\n    \"retry_check_interval\": 1,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"volatility_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": true,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"acknowledgement_timeout\": 8,\r\n    \"freshness_checked\": 0,\r\n    \"freshness_threshold\": 11,\r\n    \"flap_detection_enabled\": 1,\r\n    \"low_flap_threshold\": 36,\r\n    \"high_flap_threshold\": 87,\r\n    \"event_handler_enabled\": 0,\r\n    \"event_handler_command_id\": {{CommandId}},\r\n    \"event_handler_command_args\": [\"Hi\", \"Bjour\"],\r\n    \"graph_template_id\": 1,\r\n    \"note\": \"Bloubloublou\",\r\n    \"note_url\": \"Hakuna Matata\",\r\n    \"action_url\": \"Chachacha\",\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"4\",\r\n    \"severity_id\": {{ServiceSeverity1Id}},\r\n    \"geo_coords\": \"12.34,23.5\",\r\n    \"is_activated\": true,\r\n    \"service_categories\": [ {{ServiceCategory1Id}} ],\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"MACROA\",\r\n        \"value\": \"A\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        },\r\n        {\r\n        \"name\": \"MACROB\",\r\n        \"value\": \"B\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        }\r\n    ],\r\n    \"service_groups\": [ {{ServiceGroup1Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service with special characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Service4Name\", \"sérvîcè-004\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service has been successfully created, with name '\" + pm.collectionVariables.get(\"Service4Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"Service4Id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Service4Name}}\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"service_template_id\": {{ServiceTemplate1Id}},\r\n    \"comment\": \"comment\",\r\n    \"check_timeperiod_id\": 1,\r\n    \"max_check_attempts\": 7,\r\n    \"normal_check_interval\": 2,\r\n    \"retry_check_interval\": 1,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"volatility_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"acknowledgement_timeout\": 8,\r\n    \"freshness_checked\": 0,\r\n    \"freshness_threshold\": 11,\r\n    \"graph_template_id\": 1,\r\n    \"note\": \"Bloubloublou\",\r\n    \"note_url\": \"Hakuna Matata\",\r\n    \"action_url\": \"Chachacha\",\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"4\",\r\n    \"severity_id\": {{ServiceSeverity1Id}},\r\n    \"geo_coords\": \"12.34,23.5\",\r\n    \"is_activated\": true,\r\n    \"service_groups\": [ {{ServiceGroup1Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (4)\r",
									"    pm.expect(responseJson.result.length).to.eql(4);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0].id).to.eql(pm.collectionVariables.get(\"Service1Id\"));\r",
									"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"Service1Name\"));\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].normal_check_interval).to.eql(2);\r",
									"    pm.expect(responseJson.result[0].retry_check_interval).to.eql(1);\r",
									"    pm.expect(responseJson.result[0].is_activated).to.eql(true);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1].id).to.eql(pm.collectionVariables.get(\"Service2Id\"));\r",
									"    pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"Service2Name\"));\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].service_template).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].check_timeperiod).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].notification_timeperiod).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].severity).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].normal_check_interval).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].retry_check_interval).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].is_activated).to.eql(true);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[2].id).to.eql(pm.collectionVariables.get(\"Service3Id\"));\r",
									"    pm.expect(responseJson.result[2].name).to.eql(pm.collectionVariables.get(\"Service3Name\"));\r",
									"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].check_timeperiod).to.eql(null);\r",
									"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql(null);\r",
									"    pm.expect(responseJson.result[2].severity).to.eql(null);\r",
									"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[2].groups).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[2].normal_check_interval).to.eql(null);\r",
									"    pm.expect(responseJson.result[2].retry_check_interval).to.eql(null);\r",
									"    pm.expect(responseJson.result[2].is_activated).to.eql(true);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[3].id).to.eql(pm.collectionVariables.get(\"Service4Id\"));\r",
									"    pm.expect(responseJson.result[3].name).to.eql(pm.collectionVariables.get(\"Service4Name\"));\r",
									"    pm.expect(responseJson.result[3].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[3].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[3].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[3].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[3].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[3].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[3].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[3].normal_check_interval).to.eql(2);\r",
									"    pm.expect(responseJson.result[3].retry_check_interval).to.eql(1);\r",
									"    pm.expect(responseJson.result[3].is_activated).to.eql(true);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The service with name '\" + pm.collectionVariables.get(\"Service2Name\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Service2Name\");\r",
									"    pm.collectionVariables.unset(\"Service2Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/{{Service2Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"{{Service2Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload ACL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (3)\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0].id).to.eql(pm.collectionVariables.get(\"Service1Id\"));\r",
									"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"Service1Name\"));\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].normal_check_interval).to.eql(2);\r",
									"    pm.expect(responseJson.result[0].retry_check_interval).to.eql(1);\r",
									"    pm.expect(responseJson.result[0].is_activated).to.eql(true);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1].id).to.eql(pm.collectionVariables.get(\"Service3Id\"));\r",
									"    pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"Service3Name\"));\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[1].check_timeperiod).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].notification_timeperiod).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].severity).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].normal_check_interval).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].retry_check_interval).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].is_activated).to.eql(true);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[2].id).to.eql(pm.collectionVariables.get(\"Service4Id\"));\r",
									"    pm.expect(responseJson.result[2].name).to.eql(pm.collectionVariables.get(\"Service4Name\"));\r",
									"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[2].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].normal_check_interval).to.eql(2);\r",
									"    pm.expect(responseJson.result[2].retry_check_interval).to.eql(1);\r",
									"    pm.expect(responseJson.result[2].is_activated).to.eql(true);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "User with R/W rights",
			"item": [
				{
					"name": "Login with Read/Write user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login_user_RW'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW}}\",\r\n      \"password\": \"{{api_password_user_RW}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Service5Name\", \"service 005\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service has been successfully created, with name '\" + pm.collectionVariables.get(\"Service5Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"Service5Id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Service5Name}}\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"check_command_id\": {{CommandId}},\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": false,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"service_categories\": [ {{ServiceCategory1Id}} ],\r\n    \"service_groups\": [ {{ServiceGroup1Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from R/W user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload ACL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with Read/Write user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login_user_RW'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW}}\",\r\n      \"password\": \"{{api_password_user_RW}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (4)\r",
									"    pm.expect(responseJson.result.length).to.eql(4);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0].id).to.eql(pm.collectionVariables.get(\"Service1Id\"));\r",
									"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"Service1Name\"));\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].normal_check_interval).to.eql(2);\r",
									"    pm.expect(responseJson.result[0].retry_check_interval).to.eql(1);\r",
									"    pm.expect(responseJson.result[0].is_activated).to.eql(true);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1].id).to.eql(pm.collectionVariables.get(\"Service3Id\"));\r",
									"    pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"Service3Name\"));\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[1].check_timeperiod).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].notification_timeperiod).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].severity).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].normal_check_interval).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].retry_check_interval).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].is_activated).to.eql(true);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[2].id).to.eql(pm.collectionVariables.get(\"Service4Id\"));\r",
									"    pm.expect(responseJson.result[2].name).to.eql(pm.collectionVariables.get(\"Service4Name\"));\r",
									"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[2].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].normal_check_interval).to.eql(2);\r",
									"    pm.expect(responseJson.result[2].retry_check_interval).to.eql(1);\r",
									"    pm.expect(responseJson.result[2].is_activated).to.eql(true);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[3].id).to.eql(pm.collectionVariables.get(\"Service5Id\"));\r",
									"    pm.expect(responseJson.result[3].name).to.eql(pm.collectionVariables.get(\"Service5Name\"));\r",
									"    pm.expect(responseJson.result[3].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[3].service_template).to.eql(null);\r",
									"    pm.expect(responseJson.result[3].check_timeperiod).to.eql(null);\r",
									"    pm.expect(responseJson.result[3].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[3].severity).to.eql(null);\r",
									"    pm.expect(responseJson.result[3].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\")\r",
									"    }]);\r",
									"    pm.expect(responseJson.result[3].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[3].normal_check_interval).to.eql(null);\r",
									"    pm.expect(responseJson.result[3].retry_check_interval).to.eql(null);\r",
									"    pm.expect(responseJson.result[3].is_activated).to.eql(true);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The service with name '\" + pm.collectionVariables.get(\"Service5Name\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Service5Name\");\r",
									"    pm.collectionVariables.unset(\"Service5Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/{{Service5Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"{{Service5Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (3)\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0].id).to.eql(pm.collectionVariables.get(\"Service1Id\"));\r",
									"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"Service1Name\"));\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].normal_check_interval).to.eql(2);\r",
									"    pm.expect(responseJson.result[0].retry_check_interval).to.eql(1);\r",
									"    pm.expect(responseJson.result[0].is_activated).to.eql(true);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1].id).to.eql(pm.collectionVariables.get(\"Service3Id\"));\r",
									"    pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"Service3Name\"));\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[1].check_timeperiod).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].notification_timeperiod).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].severity).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].normal_check_interval).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].retry_check_interval).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].is_activated).to.eql(true);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[2].id).to.eql(pm.collectionVariables.get(\"Service4Id\"));\r",
									"    pm.expect(responseJson.result[2].name).to.eql(pm.collectionVariables.get(\"Service4Name\"));\r",
									"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[2].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].normal_check_interval).to.eql(2);\r",
									"    pm.expect(responseJson.result[2].retry_check_interval).to.eql(1);\r",
									"    pm.expect(responseJson.result[2].is_activated).to.eql(true);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from R/W user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "User with R/W rights with filters",
			"item": [
				{
					"name": "No access",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new service",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"Service6Name\", \"service 006\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service has been successfully created, with name '\" + pm.collectionVariables.get(\"Service6Name\") + \"'.\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"\r",
											"    // Creation of a variable with the ID of the new service\r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.collectionVariables.set(\"Service6Id\", response.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Service6Name}}\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"check_command_id\": {{CommandId}},\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": false,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"service_categories\": [ {{ServiceCategory1Id}} ],\r\n    \"service_groups\": [ {{ServiceGroup1Id}} ]\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"No services listed because the user does not have correct rights\", function() {\r",
											"    // Check the number of hosts (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Service not found.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"\r",
											"    pm.expect(responseJson.message).to.eql(\"Service not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services/{{Service6Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services",
										"{{Service6Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "Access only to SC",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show ACLResources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resource has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    var response = JSON.parse(responseBody);",
											"    pm.collectionVariables.set(\"ACLResources\", response.result[1].name);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"ACLRESOURCE\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Grant the new Service Category to the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The filter for the service category has been added to the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addfilter_servicecategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{ServiceCategory1Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"No services listed because the user does not have correct rights\", function() {\r",
											"    // Check the number of hosts (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Service not found.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"\r",
											"    pm.expect(responseJson.message).to.eql(\"Service not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services/{{Service6Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services",
										"{{Service6Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "Access to SG + filter on SC",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Grant the new Service Group to the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service group has been granted to the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"grant_servicegroup\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{ServiceGroup1Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (2)\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0].id).to.eql(pm.collectionVariables.get(\"Service1Id\"));\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"Service1Name\"));\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].severity).to.eql(null);\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].normal_check_interval).to.eql(2);\r",
											"    pm.expect(responseJson.result[0].retry_check_interval).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].is_activated).to.eql(true);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1].id).to.eql(pm.collectionVariables.get(\"Service6Id\"));\r",
											"    pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"Service6Name\"));\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql(null);\r",
											"    pm.expect(responseJson.result[1].check_timeperiod).to.eql(null);\r",
											"    pm.expect(responseJson.result[1].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].severity).to.eql(null);\r",
											"    pm.expect(responseJson.result[1].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].normal_check_interval).to.eql(null);\r",
											"    pm.expect(responseJson.result[1].retry_check_interval).to.eql(null);\r",
											"    pm.expect(responseJson.result[1].is_activated).to.eql(true);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"The service with name '\" + pm.collectionVariables.get(\"Service6Name\") + \"' has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.collectionVariables.unset(\"Service6Name\");\r",
											"    pm.collectionVariables.unset(\"Service6Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services/{{Service6Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services",
										"{{Service6Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (1)\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0].id).to.eql(pm.collectionVariables.get(\"Service1Id\"));\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"Service1Name\"));\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].severity).to.eql(null);\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].normal_check_interval).to.eql(2);\r",
											"    pm.expect(responseJson.result[0].retry_check_interval).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].is_activated).to.eql(true);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "Access only to SG with another category filter",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new service",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"Service7Name\", \"service 007\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service has been successfully created, with name '\" + pm.collectionVariables.get(\"Service7Name\") + \"'.\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"\r",
											"    // Creation of a variable with the ID of the new service\r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.collectionVariables.set(\"Service7Id\", response.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Service7Name}}\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"check_command_id\": {{CommandId}},\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": false,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"service_categories\": [ {{ServiceCategory1Id}} ],\r\n    \"service_groups\": [ {{ServiceGroup1Id}} ]\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new Service Category filter of the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service category filter has been added to the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addfilter_servicecategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{ServiceCategory2Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the new Service Category filter of the ACL Resource  ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service category filter has been deleted from the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"delfilter_servicecategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{ServiceCategory1Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"No services listed because the user does not have correct rights\", function() {\r",
											"    // Check the number of hosts (2)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Service not found.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"\r",
											"    pm.expect(responseJson.message).to.eql(\"Service not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services/{{Service7Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services",
										"{{Service7Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "Access only to SG without category filter",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the new Service Category filter of the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service group has been granted to the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"delfilter_servicecategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{ServiceCategory2Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (3)\r",
											"    pm.expect(responseJson.result.length).to.eql(3);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0].id).to.eql(pm.collectionVariables.get(\"Service1Id\"));\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"Service1Name\"));\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].normal_check_interval).to.eql(2);\r",
											"    pm.expect(responseJson.result[0].retry_check_interval).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].is_activated).to.eql(true);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1].id).to.eql(pm.collectionVariables.get(\"Service4Id\"));\r",
											"    pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"Service4Name\"));\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[1].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].normal_check_interval).to.eql(2);\r",
											"    pm.expect(responseJson.result[1].retry_check_interval).to.eql(1);\r",
											"    pm.expect(responseJson.result[1].is_activated).to.eql(true);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[2].id).to.eql(pm.collectionVariables.get(\"Service7Id\"));\r",
											"    pm.expect(responseJson.result[2].name).to.eql(pm.collectionVariables.get(\"Service7Name\"));\r",
											"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].service_template).to.eql(null);\r",
											"    pm.expect(responseJson.result[2].check_timeperiod).to.eql(null);\r",
											"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[2].severity).to.eql(null);\r",
											"    pm.expect(responseJson.result[2].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].normal_check_interval).to.eql(null);\r",
											"    pm.expect(responseJson.result[2].retry_check_interval).to.eql(null);\r",
											"    pm.expect(responseJson.result[2].is_activated).to.eql(true);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"The service with name '\" + pm.collectionVariables.get(\"Service7Name\") + \"' has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.collectionVariables.unset(\"Service7Name\");\r",
											"    pm.collectionVariables.unset(\"Service7Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services/{{Service7Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services",
										"{{Service7Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (2)\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0].id).to.eql(pm.collectionVariables.get(\"Service1Id\"));\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"Service1Name\"));\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].normal_check_interval).to.eql(2);\r",
											"    pm.expect(responseJson.result[0].retry_check_interval).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].is_activated).to.eql(true);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1].id).to.eql(pm.collectionVariables.get(\"Service4Id\"));\r",
											"    pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"Service4Name\"));\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[1].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].normal_check_interval).to.eql(2);\r",
											"    pm.expect(responseJson.result[1].retry_check_interval).to.eql(1);\r",
											"    pm.expect(responseJson.result[1].is_activated).to.eql(true);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "Access to host with another category filter",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new service",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"Service8Name\", \"service 008\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service has been successfully created, with name '\" + pm.collectionVariables.get(\"Service8Name\") + \"'.\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"\r",
											"    // Creation of a variable with the ID of the new service\r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.collectionVariables.set(\"Service8Id\", response.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Service8Name}}\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"check_command_id\": {{CommandId}},\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": false,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"service_categories\": [ {{ServiceCategory1Id}} ],\r\n    \"service_groups\": [ {{ServiceGroup1Id}} ]\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new Service Category filter of the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service category filter has been added to the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addfilter_servicecategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{ServiceCategory2Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"No services listed because the user does not have correct rights\", function() {\r",
											"    // Check the number of hosts (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Service not found.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"\r",
											"    pm.expect(responseJson.message).to.eql(\"Service not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services/{{Service8Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services",
										"{{Service8Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "Access to host without category filter",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the new Service Category filter of the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service group has been granted to the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"delfilter_servicecategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{ServiceCategory2Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (3)\r",
											"    pm.expect(responseJson.result.length).to.eql(3);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0].id).to.eql(pm.collectionVariables.get(\"Service1Id\"));\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"Service1Name\"));\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].normal_check_interval).to.eql(2);\r",
											"    pm.expect(responseJson.result[0].retry_check_interval).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].is_activated).to.eql(true);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1].id).to.eql(pm.collectionVariables.get(\"Service4Id\"));\r",
											"    pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"Service4Name\"));\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[1].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].normal_check_interval).to.eql(2);\r",
											"    pm.expect(responseJson.result[1].retry_check_interval).to.eql(1);\r",
											"    pm.expect(responseJson.result[1].is_activated).to.eql(true);\r",
											"\r",
											"\r",
											"    \r",
											"    pm.expect(responseJson.result[2].id).to.eql(pm.collectionVariables.get(\"Service8Id\"));\r",
											"    pm.expect(responseJson.result[2].name).to.eql(pm.collectionVariables.get(\"Service8Name\"));\r",
											"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].service_template).to.eql(null);\r",
											"    pm.expect(responseJson.result[2].check_timeperiod).to.eql(null);\r",
											"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[2].severity).to.eql(null);\r",
											"    pm.expect(responseJson.result[2].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].normal_check_interval).to.eql(null);\r",
											"    pm.expect(responseJson.result[2].retry_check_interval).to.eql(null);\r",
											"    pm.expect(responseJson.result[2].is_activated).to.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"The service with name '\" + pm.collectionVariables.get(\"Service8Name\") + \"' has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.collectionVariables.unset(\"Service8Name\");\r",
											"    pm.collectionVariables.unset(\"Service8Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services/{{Service8Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services",
										"{{Service8Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (2)\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0].id).to.eql(pm.collectionVariables.get(\"Service1Id\"));\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"Service1Name\"));\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].normal_check_interval).to.eql(2);\r",
											"    pm.expect(responseJson.result[0].retry_check_interval).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].is_activated).to.eql(true);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1].id).to.eql(pm.collectionVariables.get(\"Service4Id\"));\r",
											"    pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"Service4Name\"));\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[1].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].normal_check_interval).to.eql(2);\r",
											"    pm.expect(responseJson.result[1].retry_check_interval).to.eql(1);\r",
											"    pm.expect(responseJson.result[1].is_activated).to.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "User with Read Only  rights",
			"item": [
				{
					"name": "Login with Read Only user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login_user_Read'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Read}}\",\r\n      \"password\": \"{{api_password_user_Read}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Service5Name\", \"service 005\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to create services.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to add a service\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"service 555\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"check_command_id\": {{CommandId}}\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to delete services.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to delete a service\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/{{Service4Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"{{Service4Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (3)\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0].id).to.eql(pm.collectionVariables.get(\"Service1Id\"));\r",
									"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"Service1Name\"));\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].normal_check_interval).to.eql(2);\r",
									"    pm.expect(responseJson.result[0].retry_check_interval).to.eql(1);\r",
									"    pm.expect(responseJson.result[0].is_activated).to.eql(true);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1].id).to.eql(pm.collectionVariables.get(\"Service3Id\"));\r",
									"    pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"Service3Name\"));\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[1].check_timeperiod).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].notification_timeperiod).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].severity).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].normal_check_interval).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].retry_check_interval).to.eql(null);\r",
									"    pm.expect(responseJson.result[1].is_activated).to.eql(true);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[2].id).to.eql(pm.collectionVariables.get(\"Service4Id\"));\r",
									"    pm.expect(responseJson.result[2].name).to.eql(pm.collectionVariables.get(\"Service4Name\"));\r",
									"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[2].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].normal_check_interval).to.eql(2);\r",
									"    pm.expect(responseJson.result[2].retry_check_interval).to.eql(1);\r",
									"    pm.expect(responseJson.result[2].is_activated).to.eql(true);\r",
									"\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from Read Only user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "User with No Access",
			"item": [
				{
					"name": "Login with user with no access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login_user_Nothing'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Nothing}}\",\r\n      \"password\": \"{{api_password_user_Nothing}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Service5Name\", \"service 005\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to create services.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to add a service\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"service 005\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"check_command_id\": {{CommandId}}\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to delete services.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to delete a service\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/{{Service4Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"{{Service4Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to list services.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to access services\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user with no access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "Reset",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The service with name '\" + pm.collectionVariables.get(\"Service1Name\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Service1Name\");\r",
									"    pm.collectionVariables.unset(\"Service1Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/{{Service1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"{{Service1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The service with name '\" + pm.collectionVariables.get(\"Service3Name\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Service3Name\");\r",
									"    pm.collectionVariables.unset(\"Service3Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/{{Service3Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"{{Service3Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The service with name '\" + pm.collectionVariables.get(\"Service4Name\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Service4Name\");\r",
									"    pm.collectionVariables.unset(\"Service4Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/{{Service4Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"{{Service4Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of all service severities",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Service severity\" + pm.collectionVariables.get(\"ServiceSeverity1Name\") + \" has successfully been deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/configuration/services/severities/{{ServiceSeverity1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"severities",
								"{{ServiceSeverity1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a service category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service category with name '\" + pm.collectionVariables.get(\"ServiceCategory1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceCategory1Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"ServiceCategory1Name\");\r",
									"    pm.collectionVariables.unset(\"ServiceCategory1Alias\");\r",
									"    pm.collectionVariables.unset(\"ServiceCategory1Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/categories/{{ServiceCategory1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"categories",
								"{{ServiceCategory1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a service category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service category with name '\" + pm.collectionVariables.get(\"ServiceCategory2Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceCategory2Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"ServiceCategory2Name\");\r",
									"    pm.collectionVariables.unset(\"ServiceCategory2Alias\");\r",
									"    pm.collectionVariables.unset(\"ServiceCategory2Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/categories/{{ServiceCategory2Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"categories",
								"{{ServiceCategory2Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a service group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service group with name '\" + pm.collectionVariables.get(\"ServiceGroup1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceGroup1Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"ServiceGroup1Name\");\r",
									"    pm.collectionVariables.unset(\"ServiceGroup1Alias\");\r",
									"    pm.collectionVariables.unset(\"ServiceGroup1Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/groups/{{ServiceGroup1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"groups",
								"{{ServiceGroup1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a service template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The service template with name '\" + pm.collectionVariables.get(\"ServiceTemplate1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceTemplate1Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"ServiceTemplate1Name\");\r",
									"    pm.collectionVariables.unset(\"ServiceTemplate1Alias\");\r",
									"    pm.collectionVariables.unset(\"ServiceTemplate1Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/templates/{{ServiceTemplate1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"templates",
								"{{ServiceTemplate1Id}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "50",
									"disabled": true
								},
								{
									"key": "sort_by",
									"value": "id",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The host with name '\" + pm.collectionVariables.get(\"Host1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host1Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Host1Name\");\r",
									"    pm.collectionVariables.unset(\"Host1Alias\");\r",
									"    pm.collectionVariables.unset(\"Host1Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/{{Host1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"{{Host1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a command",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"A command has been successfully deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.collectionVariables.unset(\"CommandId\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"CMD\",\n  \"values\": \"check-host-alive\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}