{
	"info": {
		"_postman_id": "3b873097-6ee2-4dda-b3fe-76208645d0b6",
		"name": "test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29556865",
		"_collection_link": "https://centreon-api-v2-monitoring-clapi.postman.co/workspace/Refacto-Tests-API~937020c6-b43d-4380-8c50-a2069c131e07/collection/29556865-3b873097-6ee2-4dda-b3fe-76208645d0b6?action=share&source=collection_link&creator=29556865"
	},
	"item": [
		{
			"name": "[1001] Login with admin user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Include this exact block (customize the nextRequestInCaseOfFailure, the expectedResponseCode and the pm.test message at will) in every request that checks the status code of a response\r",
							"const responseJson = pm.response.json();\r",
							"const nextRequestInCaseOfFailure = \"[1001] Logout from admin user and clear collection variables\"\r",
							"\r",
							"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
							"    const expectedResponseCode = 200\r",
							"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
							"    pm.response.to.have.status(expectedResponseCode);\r",
							"// End of block (do not forget to close the test assertion if you have nothing else to add in it)\r",
							"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
							"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
							"    pm.environment.set(\"token\", responseJson.security.token);\r",
							"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
							"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
							"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableCookies": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"Object.prototype.setNextRequestBasedOnStatusCode = (pm, postman, response, expectedResponseCode, nextRequestInCaseOfFailure) => {",
					"    if(expectedResponseCode != response.code) {",
					"        if (!pm.collectionVariables.get(\"requestTries\")) {",
					"            pm.collectionVariables.set(\"requestTries\", 0);",
					"        }",
					"        pm.collectionVariables.set(\"requestTries\", pm.collectionVariables.get(\"requestTries\") + 1);",
					"        if(pm.collectionVariables.get(\"requestTries\") < pm.environment.get(\"maxNumberOfRetries\")) {",
					"            console.log(\"Response does not have the expected status code | Resending the request \\\"\" + pm.info.requestName + \"\\\"... | Number of tries: \" + pm.collectionVariables.get(\"requestTries\"));",
					"            postman.setNextRequest(pm.info.requestName);",
					"        } else {",
					"            pm.collectionVariables.unset(\"requestTries\");",
					"            pm.collectionVariables.unset(\"nextRequestInCaseOfFailure\");",
					"            console.log(\"Response does not have the expected status code | Aborting the current scenario (too many tries)\");",
					"            postman.setNextRequest(nextRequestInCaseOfFailure);",
					"        }",
					"    } else {",
					"        pm.collectionVariables.unset(\"requestTries\");",
					"        console.log(\"Response has the expected status code \" + pm.response.code + \" | Running the next tests\")",
					"    }",
					"  }"
				]
			}
		}
	],
	"variable": [
		{
			"key": "old_password",
			"value": ""
		}
	]
}