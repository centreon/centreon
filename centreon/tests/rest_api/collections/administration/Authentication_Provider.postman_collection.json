{
	"info": {
		"_postman_id": "a1b0e06a-b8ee-43d5-835c-7a49724f9105",
		"name": "Authentication_Provider",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16182525"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "List authentication provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are successully listed.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.eql(\r",
									"        {\r",
									"            \"password_security_policy\": {\r",
									"            \"password_min_length\": 12,\r",
									"            \"has_uppercase\": true,\r",
									"            \"has_lowercase\": true,\r",
									"            \"has_number\": true,\r",
									"            \"has_special_character\": true,\r",
									"            \"attempts\": 5,\r",
									"            \"blocking_duration\": 900,\r",
									"            \"password_expiration\": {\r",
									"                \"expiration_delay\": 15552000,\r",
									"                \"excluded_users\": [\r",
									"                    \"centreon-gorgone\"\r",
									"                ]\r",
									"            },\r",
									"            \"can_reuse_passwords\": false,\r",
									"            \"delay_before_new_password\": 3600\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The parameters are successully updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 8,\r\n    \"has_uppercase\": false,\r\n    \"has_lowercase\": false,\r\n    \"has_number\": true,\r\n    \"has_special_character\": false,\r\n    \"attempts\": 8,\r\n    \"blocking_duration\": 600,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 15553000,\r\n      \"excluded_users\": [\r\n        \"admin\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": true,\r\n    \"delay_before_new_password\": 7200\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "List authentication provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are successully listed.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.eql(\r",
									"        {\r",
									"            \"password_security_policy\": {\r",
									"            \"password_min_length\": 8,\r",
									"            \"has_uppercase\": false,\r",
									"            \"has_lowercase\": false,\r",
									"            \"has_number\": true,\r",
									"            \"has_special_character\": false,\r",
									"            \"attempts\": 8,\r",
									"            \"blocking_duration\": 600,\r",
									"            \"password_expiration\": {\r",
									"            \"expiration_delay\": 15553000,\r",
									"            \"excluded_users\": [\r",
									"                \"admin\"\r",
									"            ]\r",
									"            },\r",
									"            \"can_reuse_passwords\": true,\r",
									"            \"delay_before_new_password\": 7200\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are not updated, because of invalid values.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[password_security_policy.password_min_length] Must have a minimum value of 8\\n\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 7,\r\n    \"has_uppercase\": false,\r\n    \"has_lowercase\": false,\r\n    \"has_number\": true,\r\n    \"has_special_character\": false,\r\n    \"attempts\": 8,\r\n    \"blocking_duration\": 600,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 15553000,\r\n      \"excluded_users\": [\r\n        \"admin\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": true,\r\n    \"delay_before_new_password\": 7200\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are not updated, because of invalid values.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[password_security_policy.password_min_length] Must have a maximum value of 128\\n\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 129,\r\n    \"has_uppercase\": false,\r\n    \"has_lowercase\": false,\r\n    \"has_number\": true,\r\n    \"has_special_character\": false,\r\n    \"attempts\": 8,\r\n    \"blocking_duration\": 600,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 15553000,\r\n      \"excluded_users\": [\r\n        \"admin\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": true,\r\n    \"delay_before_new_password\": 7200\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are not updated, because of invalid values.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[password_security_policy.attempts] Must have a minimum value of 1\\n\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 12,\r\n    \"has_uppercase\": false,\r\n    \"has_lowercase\": false,\r\n    \"has_number\": true,\r\n    \"has_special_character\": false,\r\n    \"attempts\": 0,\r\n    \"blocking_duration\": 600,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 15553000,\r\n      \"excluded_users\": [\r\n        \"admin\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": true,\r\n    \"delay_before_new_password\": 7200\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are not updated, because of invalid values.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[password_security_policy.attempts] Must have a maximum value of 10\\n\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 12,\r\n    \"has_uppercase\": false,\r\n    \"has_lowercase\": false,\r\n    \"has_number\": true,\r\n    \"has_special_character\": false,\r\n    \"attempts\": 11,\r\n    \"blocking_duration\": 600,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 15553000,\r\n      \"excluded_users\": [\r\n        \"admin\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": true,\r\n    \"delay_before_new_password\": 7200\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are not updated, because of invalid values.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[password_security_policy.blocking_duration] Must have a maximum value of 604800\\n\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 12,\r\n    \"has_uppercase\": false,\r\n    \"has_lowercase\": false,\r\n    \"has_number\": true,\r\n    \"has_special_character\": false,\r\n    \"attempts\": 5,\r\n    \"blocking_duration\": 604801,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 15553000,\r\n      \"excluded_users\": [\r\n        \"admin\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": true,\r\n    \"delay_before_new_password\": 7200\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are not updated, because of invalid values.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[password_security_policy.password_expiration.expiration_delay] Must have a minimum value of 604800\\n\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 12,\r\n    \"has_uppercase\": false,\r\n    \"has_lowercase\": false,\r\n    \"has_number\": true,\r\n    \"has_special_character\": false,\r\n    \"attempts\": 5,\r\n    \"blocking_duration\": 900,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 604799,\r\n      \"excluded_users\": [\r\n        \"admin\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": true,\r\n    \"delay_before_new_password\": 7200\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are not updated, because of invalid values.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[password_security_policy.delay_before_new_password] Must have a minimum value of 3600\\n\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 12,\r\n    \"has_uppercase\": false,\r\n    \"has_lowercase\": false,\r\n    \"has_number\": true,\r\n    \"has_special_character\": false,\r\n    \"attempts\": 5,\r\n    \"blocking_duration\": 900,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 604800,\r\n      \"excluded_users\": [\r\n        \"admin\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": true,\r\n    \"delay_before_new_password\": 3599\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are not updated, because of invalid values.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[password_security_policy.delay_before_new_password] Must have a maximum value of 604800\\n\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 12,\r\n    \"has_uppercase\": false,\r\n    \"has_lowercase\": false,\r\n    \"has_number\": true,\r\n    \"has_special_character\": false,\r\n    \"attempts\": 5,\r\n    \"blocking_duration\": 900,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 604800,\r\n      \"excluded_users\": [\r\n        \"admin\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": true,\r\n    \"delay_before_new_password\": 604801\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User non-admin without topology",
			"item": [
				{
					"name": "Add user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"user-test;user-test;user-test@localhost;Centreon!123;0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"user-test;reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new access rights has been successfully granted.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ALL;user-test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with user-test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(\"user-test\");\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"user-test\",\r\n      \"password\": \"Centreon!123\"\r\n    }\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The parameters are not listed, because the user does not have sufficient rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 8,\r\n    \"has_uppercase\": false,\r\n    \"has_lowercase\": false,\r\n    \"has_number\": true,\r\n    \"has_special_character\": false,\r\n    \"attempts\": 8,\r\n    \"blocking_duration\": 600,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 15553000,\r\n      \"excluded_users\": [\r\n        \"admin\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": true,\r\n    \"delay_before_new_password\": 7200\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "List authentication provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The parameters are not listed, because the user does not have sufficient rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user non-admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "User non-admin with topology",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu RW",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RW right",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Read/Write rights has been successfully.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;1;Administration;Authentication\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RW to ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ALL;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with user-test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(\"user-test\");\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"user-test\",\r\n      \"password\": \"Centreon!123\"\r\n    }\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The parameters are successully updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 12,\r\n    \"has_uppercase\": true,\r\n    \"has_lowercase\": true,\r\n    \"has_number\": true,\r\n    \"has_special_character\": true,\r\n    \"attempts\": 5,\r\n    \"blocking_duration\": 900,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 15552000,\r\n      \"excluded_users\": [\r\n        \"centreon-gorgone\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": false,\r\n    \"delay_before_new_password\": 3600\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "List authentication provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are successully listed.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.eql(\r",
									"        {\r",
									"            \"password_security_policy\": {\r",
									"            \"password_min_length\": 12,\r",
									"            \"has_uppercase\": true,\r",
									"            \"has_lowercase\": true,\r",
									"            \"has_number\": true,\r",
									"            \"has_special_character\": true,\r",
									"            \"attempts\": 5,\r",
									"            \"blocking_duration\": 900,\r",
									"            \"password_expiration\": {\r",
									"                \"expiration_delay\": 15552000,\r",
									"                \"excluded_users\": [\r",
									"                    \"centreon-gorgone\"\r",
									"                ]\r",
									"            },\r",
									"            \"can_reuse_passwords\": false,\r",
									"            \"delay_before_new_password\": 3600\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user non-admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}