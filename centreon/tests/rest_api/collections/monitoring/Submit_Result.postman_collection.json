{
	"info": {
		"_postman_id": "26a801a2-9e88-4f7a-ae8c-a2adae488035",
		"name": "Submit_Result",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16182525"
	},
	"item": [
		{
			"name": "0101 - By admin",
			"item": [
				{
					"name": "Login with admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a command (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The command has been successfully created, with name '\" + pm.collectionVariables.get(\"Command1Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new command \r",
									"    pm.collectionVariables.set(\"CommandId\", responseJson.id);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the command response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": { \"type\": \"integer\" },\r",
									"            \"name\": { \"type\": \"string\" },\r",
									"            \"type\": { \"type\": \"integer\" },\r",
									"            \"command_line\": { \"type\": \"string\" },\r",
									"            \"is_shell\": { \"type\": \"boolean\" },\r",
									"            \"is_activated\": { \"type\": \"boolean\" },\r",
									"            \"is_locked\": { \"type\": \"boolean\" },\r",
									"            \"argument_example\": { \"type\": [\"string\", \"null\"], },\r",
									"            \"arguments\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"description\": { \"type\": \"string\" }\r",
									"                    },\r",
									"                    \"required\": [\"name\", \"description\"]\r",
									"                }\r",
									"            },\r",
									"            \"macros\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"type\": { \"type\": \"string\" },\r",
									"                        \"description\": { \"type\": \"string\" }\r",
									"                    },\r",
									"                    \"required\": [\"name\", \"type\", \"description\"]\r",
									"                }\r",
									"            },\r",
									"            \"connector\": {\r",
									"                \"type\": [\"object\", \"null\"],\r",
									"                \"properties\": {\r",
									"                    \"id\": { \"type\": \"integer\" },\r",
									"                    \"name\": { \"type\": \"string\" }\r",
									"                },\r",
									"                \"required\": [\"id\", \"name\"]\r",
									"            },\r",
									"            \"grap_template\": {\r",
									"                \"type\": [\"object\", \"null\"],\r",
									"                \"properties\": {\r",
									"                    \"id\": { \"type\": \"integer\" },\r",
									"                    \"name\": { \"type\": \"string\" }\r",
									"                },\r",
									"                \"required\": [\"id\", \"name\"]\r",
									"            }\r",
									"                        \r",
									"        },\r",
									"        \"required\": [\"id\", \"name\", \"type\", \"command_line\", \"is_shell\", \"is_activated\", \"is_locked\", \"argument_example\", \"arguments\", \"macros\", \"connector\", \"grap_template\"]\r",
									"    };\r",
									"    \r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Command1Name\", \"command_1\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Command1Name}}\",\r\n    \"type\": 2,\r\n    \"command_line\": \"$USER1$/check_icmp -H $HOSTADDRESS$ -w 3000.0,80% -c 5000.0,100% -p 1\",\r\n    \"is_shell\": false\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/commands",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"commands"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a host template (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host template has been successfully created, with name '\" + pm.collectionVariables.get(\"HostTemplate1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostTemplate1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host template\r",
									"    pm.collectionVariables.set(\"HostTemplate1Id\", responseJson.id);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for host template creation response\", function () {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            id: { type: \"integer\" },\r",
									"            name: { type: \"string\" },\r",
									"            alias: { type: \"string\" },\r",
									"            snmp_version: { type: [\"string\", \"null\"] },\r",
									"            timezone_id: { type: [\"integer\", \"null\"] },\r",
									"            check_command_id: { type: [\"integer\", \"null\"] },\r",
									"            severity_id: { type: [\"integer\", \"null\"] },\r",
									"            check_timeperiod_id: { type: [\"integer\", \"null\"] },\r",
									"            note_url: { type: [\"string\", \"null\"] },\r",
									"            note: { type: [\"string\", \"null\"] },\r",
									"            action_url: { type: [\"string\", \"null\"] },\r",
									"            max_check_attempts: { type: [\"integer\", \"null\"] },\r",
									"            normal_check_interval: { type: [\"integer\", \"null\"] },\r",
									"            retry_check_interval: { type: [\"integer\", \"null\"] },\r",
									"            active_check_enabled: { type: \"integer\" },\r",
									"            passive_check_enabled: { type: \"integer\" },\r",
									"            notification_enabled: { type: \"integer\" },\r",
									"            notification_options: { type: [\"integer\", \"null\"] },\r",
									"            notification_interval: { type: [\"integer\", \"null\"] },\r",
									"            notification_timeperiod_id: { type: [\"integer\", \"null\"] },\r",
									"            add_inherited_contact_group: { type: \"boolean\" },\r",
									"            add_inherited_contact: { type: \"boolean\" },\r",
									"            first_notification_delay: { type: [\"integer\", \"null\"] },\r",
									"            recovery_notification_delay: { type: [\"integer\", \"null\"] },\r",
									"            acknowledgement_timeout: { type: [\"integer\", \"null\"] },\r",
									"            freshness_checked: { type: \"integer\" },\r",
									"            freshness_threshold: { type: [\"integer\", \"null\"] },\r",
									"            flap_detection_enabled: { type: \"integer\" },\r",
									"            low_flap_threshold: { type: [\"integer\", \"null\"] },\r",
									"            high_flap_threshold: { type: [\"integer\", \"null\"] },\r",
									"            event_handler_enabled: { type: \"integer\" },\r",
									"            event_handler_command_id: { type: [\"integer\", \"null\"] },\r",
									"            icon_id: { type: [\"integer\", \"null\"] },\r",
									"            icon_alternative: { type: [\"string\", \"null\"] },\r",
									"            comment: { type: [\"string\", \"null\"] },\r",
									"            is_locked: { type: \"boolean\" },\r",
									"            check_command_args: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"string\"\r",
									"                }\r",
									"            },\r",
									"            event_handler_command_args: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"string\"\r",
									"                }\r",
									"            },\r",
									"            categories: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            templates: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            macros: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        name: { type: \"string\" },\r",
									"                        value: { type: [\"string\", \"null\"] },\r",
									"                        is_password: { type: \"boolean\" },\r",
									"                        description: { type: [\"string\", \"null\"] }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        required: [\"id\", \"name\", \"alias\", \"snmp_version\", \"timezone_id\", \"severity_id\", \"check_command_id\", \"check_command_args\", \"check_timeperiod_id\", \"max_check_attempts\", \"normal_check_interval\", \"retry_check_interval\", \"active_check_enabled\", \"passive_check_enabled\", \"notification_enabled\", \"notification_options\", \"notification_interval\", \"notification_timeperiod_id\", \"add_inherited_contact_group\", \"add_inherited_contact\", \"first_notification_delay\", \"recovery_notification_delay\", \"acknowledgement_timeout\", \"freshness_checked\", \"freshness_threshold\", \"flap_detection_enabled\", \"low_flap_threshold\", \"high_flap_threshold\", \"event_handler_enabled\", \"event_handler_command_id\", \"event_handler_command_args\", \"note_url\", \"note\", \"action_url\", \"icon_id\", \"icon_alternative\", \"comment\", \"is_locked\", \"categories\", \"templates\", \"macros\"]\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostTemplate1Name\", \"host_template_1\");\r",
									"pm.collectionVariables.set(\"HostTemplate1Alias\", \"I'm the first host template created by admin\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"{{HostTemplate1Name}}\",\r\n\"alias\": \"{{HostTemplate1Alias}}\",\r\n\"check_command_id\": {{CommandId}},\r\n\"max_check_attempts\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a service template (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The service template has been successfully created, with name '\" + pm.collectionVariables.get(\"ServiceTemplate1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceTemplate1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service template\r",
									"    pm.collectionVariables.set(\"ServiceTemplate1Id\", responseJson.id);\r",
									"\r",
									"    pm.expect(responseJson).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"ServiceTemplate1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"ServiceTemplate1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"ServiceTemplate1Alias\"),\r",
									"        \"comment\": null,\r",
									"        \"service_template_id\": null,\r",
									"        \"check_command_id\": pm.collectionVariables.get('CommandId'),\r",
									"        \"check_timeperiod_id\": null,\r",
									"        \"max_check_attempts\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"active_check_enabled\": 2,\r",
									"        \"passive_check_enabled\": 2,\r",
									"        \"volatility_enabled\": 2,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"is_contact_additive_inheritance\": false,\r",
									"        \"is_contact_group_additive_inheritance\": false,\r",
									"        \"notification_interval\": null,\r",
									"        \"notification_timeperiod_id\": null,\r",
									"        \"notification_type\": null,\r",
									"        \"first_notification_delay\": null,\r",
									"        \"recovery_notification_delay\": null,\r",
									"        \"acknowledgement_timeout\": null,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"freshness_threshold\": null,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"graph_template_id\": null,\r",
									"        \"note\": null,\r",
									"        \"note_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_alternative\": null,\r",
									"        \"severity_id\": null,\r",
									"        \"is_locked\": false\r",
									"    });\r",
									"    pm.expect(responseJson.check_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.host_templates).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.macros).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.groups).to.be.an('Array').that.is.empty;\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the service template creation response\", function () {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            id: { type: \"integer\" },\r",
									"            name: { type: \"string\" },\r",
									"            alias: { type: [\"string\", \"null\"] },\r",
									"            comment: { type: [\"string\", \"null\"] },\r",
									"            service_template_id: { type: [\"integer\", \"null\"] },\r",
									"            check_command_id: { type: [\"integer\", \"null\"] },\r",
									"            check_command_args: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"string\"\r",
									"                }\r",
									"            },\r",
									"            check_timeperiod_id: { type: [\"integer\", \"null\"] },\r",
									"            max_check_attempts: { type: [\"integer\", \"null\"] },\r",
									"            normal_check_interval: { type: [\"integer\", \"null\"] },\r",
									"            retry_check_interval: { type: [\"integer\", \"null\"] },\r",
									"            active_check_enabled: { type: \"integer\" },\r",
									"            passive_check_enabled: { type: \"integer\" },\r",
									"            volatility_enabled: { type: \"integer\" },\r",
									"            notification_enabled: { type: \"integer\" },\r",
									"            is_contact_additive_inheritance: { type: \"boolean\" },\r",
									"            is_contact_group_additive_inheritance: { type: \"boolean\" },\r",
									"            notification_interval: { type: [\"integer\", \"null\"] },\r",
									"            notification_timeperiod_id: { type: [\"integer\", \"null\"] },\r",
									"            notification_type: { type: [\"integer\", \"null\"] },\r",
									"            first_notification_delay: { type: [\"integer\", \"null\"] },\r",
									"            recovery_notification_delay: { type: [\"integer\", \"null\"] },\r",
									"            acknowledgement_timeout: { type: [\"integer\", \"null\"] },\r",
									"            freshness_checked: { type: \"integer\" },\r",
									"            freshness_threshold: { type: [\"integer\", \"null\"] },\r",
									"            flap_detection_enabled: { type: \"integer\" },\r",
									"            low_flap_threshold: { type: [\"integer\", \"null\"] },\r",
									"            high_flap_threshold: { type: [\"integer\", \"null\"] },\r",
									"            event_handler_enabled: { type: \"integer\" },\r",
									"            event_handler_command_id: { type: [\"integer\", \"null\"] },\r",
									"            event_handler_command_args: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"string\"\r",
									"                }\r",
									"            },\r",
									"            graph_template_id: { type: [\"integer\", \"null\"] },\r",
									"            note: { type: [\"string\", \"null\"] },\r",
									"            note_url: { type: [\"string\", \"null\"] },\r",
									"            action_url: { type: [\"string\", \"null\"] },\r",
									"            icon_id: { type: [\"integer\", \"null\"] },\r",
									"            icon_alternative: { type: [\"string\", \"null\"] },\r",
									"            severity_id: { type: [\"integer\", \"null\"] },\r",
									"            host_templates: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"integer\"\r",
									"                }\r",
									"            },\r",
									"            is_locked: { type: \"boolean\" },\r",
									"            macros: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        name: { type: \"string\" },\r",
									"                        value: { type: [\"string\", \"null\"] },\r",
									"                        is_password: { type: \"boolean\" },\r",
									"                        description: { type: [\"string\", \"null\"] }\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            categories: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" },\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            groups: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" },\r",
									"                        host_template_id: { type: \"integer\" },\r",
									"                        host_template_name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        required: [\"id\", \"name\", \"alias\", \"comment\", \"service_template_id\", \"check_command_id\", \"check_command_args\", \"check_timeperiod_id\", \"max_check_attempts\", \"normal_check_interval\", \"retry_check_interval\", \"active_check_enabled\", \"passive_check_enabled\", \"volatility_enabled\", \"notification_enabled\", \"is_contact_additive_inheritance\", \"is_contact_group_additive_inheritance\", \"notification_interval\", \"notification_timeperiod_id\", \"notification_type\", \"first_notification_delay\", \"recovery_notification_delay\", \"acknowledgement_timeout\", \"freshness_checked\", \"freshness_threshold\", \"flap_detection_enabled\", \"low_flap_threshold\", \"high_flap_threshold\", \"event_handler_enabled\", \"event_handler_command_id\", \"event_handler_command_args\", \"graph_template_id\", \"note\", \"note_url\", \"action_url\", \"icon_id\", \"icon_alternative\", \"severity_id\", \"host_templates\", \"is_locked\", \"macros\", \"categories\", \"groups\"]\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"ServiceTemplate1Name\", \"service_template_1\");\r",
									"pm.collectionVariables.set(\"ServiceTemplate1Alias\", \"I-m a first service template\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"{{ServiceTemplate1Name}}\",\r\n\"alias\": \"{{ServiceTemplate1Alias}}\",\r\n\"check_command_id\": {{CommandId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a host (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Host1Name\", \"host_1\");\r",
									"pm.collectionVariables.set(\"Host1Alias\", \"I'm the first host created by admin\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Host1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host\r",
									"    pm.collectionVariables.set(\"Host1Id\", responseJson.id);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"Host1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"Host1Alias\"),\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"monitoring_server_id\": 1,\r",
									"        \"snmp_version\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"note_url\": null,\r",
									"        \"note\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_alternative\": null,\r",
									"        \"comment\": null,\r",
									"        \"timezone_id\": null,\r",
									"        \"severity_id\": null,\r",
									"        \"check_command_id\": null,\r",
									"        \"check_timeperiod_id\": null,\r",
									"        \"notification_timeperiod_id\": null,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"max_check_attempts\": null,\r",
									"        \"normal_check_interval\": 3,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"notification_options\": null,\r",
									"        \"notification_interval\": null,\r",
									"        \"first_notification_delay\": null,\r",
									"        \"recovery_notification_delay\": null,\r",
									"        \"acknowledgement_timeout\": null,\r",
									"        \"freshness_threshold\": null,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"active_check_enabled\": 0,\r",
									"        \"passive_check_enabled\": 1,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"check_command_args\": [],\r",
									"        \"event_handler_command_args\": [],\r",
									"        \"categories\": [],\r",
									"        \"groups\": [],\r",
									"        \"templates\": [\r",
									"            {\r",
									"                \"id\": pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
									"                \"name\": pm.collectionVariables.get(\"HostTemplate1Name\"),\r",
									"            }\r",
									"        ],\r",
									"        \"macros\": [],\r",
									"        \"add_inherited_contact_group\": false,\r",
									"        \"add_inherited_contact\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the host creation response\", function () {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            id: { type: \"integer\" },\r",
									"            name: { type: \"string\" },\r",
									"            alias: { type: [\"string\", \"null\"] },\r",
									"            address: { type: \"string\" },\r",
									"            monitoring_server_id: { type: \"integer\" },\r",
									"            snmp_version: { type: [\"string\", \"null\"] },\r",
									"            timezone_id: { type: [\"integer\", \"null\"] },\r",
									"            severity_id: { type: [\"integer\", \"null\"] },\r",
									"            check_command_id: { type: [\"integer\", \"null\"] },\r",
									"            check_timeperiod_id: { type: [\"integer\", \"null\"] },\r",
									"            note_url: { type: [\"string\", \"null\"] },\r",
									"            note: { type: [\"string\", \"null\"] },\r",
									"            action_url: { type: [\"string\", \"null\"] },\r",
									"            max_check_attempts: { type: [\"integer\", \"null\"] },\r",
									"            normal_check_interval: { type: [\"integer\", \"null\"] },\r",
									"            retry_check_interval: { type: [\"integer\", \"null\"] },\r",
									"            active_check_enabled: { type: \"integer\" },\r",
									"            passive_check_enabled: { type: \"integer\" },\r",
									"            notification_enabled: { type: \"integer\" },\r",
									"            notification_options: { type: [\"integer\", \"null\"] },\r",
									"            notification_interval: { type: [\"integer\", \"null\"] },\r",
									"            notification_timeperiod_id: { type: [\"integer\", \"null\"] },\r",
									"            add_inherited_contact_group: { type: \"boolean\" },\r",
									"            add_inherited_contact: { type: \"boolean\" },\r",
									"            first_notification_delay: { type: [\"integer\", \"null\"] },\r",
									"            recovery_notification_delay: { type: [\"integer\", \"null\"] },\r",
									"            acknowledgement_timeout: { type: [\"integer\", \"null\"] },\r",
									"            freshness_checked: { type: \"integer\" },\r",
									"            freshness_threshold: { type: [\"integer\", \"null\"] },\r",
									"            flap_detection_enabled: { type: \"integer\" },\r",
									"            low_flap_threshold: { type: [\"integer\", \"null\"] },\r",
									"            high_flap_threshold: { type: [\"integer\", \"null\"] },\r",
									"            event_handler_enabled: { type: \"integer\" },\r",
									"            event_handler_command_id: { type: [\"integer\", \"null\"] },\r",
									"            icon_id: { type: [\"integer\", \"null\"] },\r",
									"            icon_alternative: { type: [\"string\", \"null\"] },\r",
									"            comment: { type: [\"string\", \"null\"] },\r",
									"            geo_coords: { type: [\"string\", \"null\"] },\r",
									"            is_activated: { type: \"boolean\" },\r",
									"            check_command_args: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"string\"\r",
									"                }\r",
									"            },\r",
									"            event_handler_command_args: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"string\"\r",
									"                }\r",
									"            },\r",
									"            categories: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            templates: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            groups: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            macros: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        required: [\"id\", \"monitoring_server_id\", \"name\", \"address\", \"alias\", \"snmp_version\", \"geo_coords\", \"note_url\", \"note\", \"action_url\", \"icon_alternative\", \"comment\", \"timezone_id\", \"severity_id\", \"check_command_id\", \"check_timeperiod_id\", \"notification_timeperiod_id\", \"event_handler_command_id\", \"icon_id\", \"max_check_attempts\", \"normal_check_interval\", \"retry_check_interval\", \"notification_options\", \"notification_interval\", \"first_notification_delay\", \"recovery_notification_delay\", \"acknowledgement_timeout\", \"freshness_threshold\", \"low_flap_threshold\", \"high_flap_threshold\", \"freshness_checked\", \"active_check_enabled\", \"passive_check_enabled\", \"notification_enabled\", \"flap_detection_enabled\", \"event_handler_enabled\", \"check_command_args\", \"event_handler_command_args\", \"categories\", \"groups\", \"templates\", \"macros\", \"add_inherited_contact_group\", \"add_inherited_contact\", \"is_activated\"]\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Host1Name}}\",\r\n    \"alias\": \"{{Host1Alias}}\",\r\n    \"address\": \"127.0.0.1\",\r\n    \"monitoring_server_id\": 1,\r\n    \"normal_check_interval\": 3,\r\n    \"active_check_enabled\": 0,\r\n    \"passive_check_enabled\": 1,\r\n    \"templates\": [ {{HostTemplate1Id}} ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a service (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Service1Name\", \"service_001\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Service1Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host\r",
									"    pm.collectionVariables.set(\"Service1Id\", responseJson.id);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
									"        \"host_id\": pm.collectionVariables.get(\"Host1Id\"),\r",
									"        \"comment\": null,\r",
									"        \"service_template_id\": pm.collectionVariables.get(\"ServiceTemplate1Id\"),\r",
									"        \"check_command_id\": null,\r",
									"        \"check_command_args\": [],\r",
									"        \"check_timeperiod_id\": null,\r",
									"        \"max_check_attempts\": 1,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"active_check_enabled\": 0,\r",
									"        \"passive_check_enabled\": 1,\r",
									"        \"volatility_enabled\": 2,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"is_contact_additive_inheritance\": false,\r",
									"        \"is_contact_group_additive_inheritance\": false,\r",
									"        \"notification_interval\": null,\r",
									"        \"notification_timeperiod_id\": null,\r",
									"        \"notification_type\": null,\r",
									"        \"first_notification_delay\": null,\r",
									"        \"recovery_notification_delay\": null,\r",
									"        \"acknowledgement_timeout\": null,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"freshness_threshold\": null,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"event_handler_command_args\": [],\r",
									"        \"graph_template_id\": null,\r",
									"        \"note\": null,\r",
									"        \"note_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_alternative\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"severity_id\": null,\r",
									"        \"is_activated\": true,\r",
									"        \"macros\": [],\r",
									"        \"categories\": [],\r",
									"        \"groups\": []\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the service creation response\", function () {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            id: { type: \"integer\" },\r",
									"            name: { type: \"string\" },\r",
									"            host_id: { type: \"integer\" },\r",
									"            comment: { type: [\"string\", \"null\"] },\r",
									"            service_template_id: { type: [\"integer\", \"null\"] },\r",
									"            check_command_id: { type: [\"integer\", \"null\"] },\r",
									"            check_command_args: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"string\"\r",
									"                }\r",
									"            },\r",
									"            check_timeperiod_id: { type: [\"integer\", \"null\"] },\r",
									"            max_check_attempts: { type: [\"integer\", \"null\"] },\r",
									"            normal_check_interval: { type: [\"integer\", \"null\"] },\r",
									"            retry_check_interval: { type: [\"integer\", \"null\"] },\r",
									"            active_check_enabled: { type: \"integer\" },\r",
									"            passive_check_enabled: { type: \"integer\" },\r",
									"            volatility_enabled: { type: \"integer\" },\r",
									"            notification_enabled: { type: \"integer\" },\r",
									"            is_contact_additive_inheritance: { type: \"boolean\" },\r",
									"            is_contact_group_additive_inheritance: { type: \"boolean\" },\r",
									"            notification_interval: { type: [\"integer\", \"null\"] },\r",
									"            notification_timeperiod_id: { type: [\"integer\", \"null\"] },\r",
									"            notification_type: { type: [\"integer\", \"null\"] },\r",
									"            first_notification_delay: { type: [\"integer\", \"null\"] },\r",
									"            recovery_notification_delay: { type: [\"integer\", \"null\"] },\r",
									"            acknowledgement_timeout: { type: [\"integer\", \"null\"] },\r",
									"            freshness_checked: { type: \"integer\" },\r",
									"            freshness_threshold: { type: [\"integer\", \"null\"] },\r",
									"            flap_detection_enabled: { type: \"integer\" },\r",
									"            low_flap_threshold: { type: [\"integer\", \"null\"] },\r",
									"            high_flap_threshold: { type: [\"integer\", \"null\"] },\r",
									"            event_handler_enabled: { type: \"integer\" },\r",
									"            event_handler_command_id: { type: [\"integer\", \"null\"] },\r",
									"            event_handler_command_args: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"string\"\r",
									"                }\r",
									"            },\r",
									"            graph_template_id: { type: [\"integer\", \"null\"] },\r",
									"            note: { type: [\"string\", \"null\"] },\r",
									"            note_url: { type: [\"string\", \"null\"] },\r",
									"            action_url: { type: [\"string\", \"null\"] },\r",
									"            icon_id: { type: [\"integer\", \"null\"] },\r",
									"            icon_alternative: { type: [\"string\", \"null\"] },\r",
									"            geo_coords: { type: [\"string\", \"null\"] },\r",
									"            severity_id: { type: [\"integer\", \"null\"] },\r",
									"            is_activated: { type: \"boolean\" },\r",
									"            macros: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        name: { type: \"string\" },\r",
									"                        value: { type: [\"string\", \"null\"] },\r",
									"                        is_password: { type: \"boolean\" },\r",
									"                        description: { type: [\"string\", \"null\"] }\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            categories: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" },\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            groups: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" },\r",
									"                        host_template_id: { type: \"integer\" },\r",
									"                        host_template_name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        required: [\"id\", \"name\", \"comment\", \"service_template_id\", \"check_command_id\", \"check_command_args\", \"check_timeperiod_id\", \"max_check_attempts\", \"normal_check_interval\", \"retry_check_interval\", \"active_check_enabled\", \"passive_check_enabled\", \"volatility_enabled\", \"notification_enabled\", \"is_contact_additive_inheritance\", \"is_contact_group_additive_inheritance\", \"notification_interval\", \"notification_timeperiod_id\", \"notification_type\", \"first_notification_delay\", \"recovery_notification_delay\", \"acknowledgement_timeout\", \"freshness_checked\", \"freshness_threshold\", \"flap_detection_enabled\", \"low_flap_threshold\", \"high_flap_threshold\", \"event_handler_enabled\", \"event_handler_command_id\", \"event_handler_command_args\", \"graph_template_id\", \"note\", \"note_url\", \"action_url\", \"icon_id\", \"icon_alternative\", \"geo_coords\", \"severity_id\", \"is_activated\", \"macros\", \"categories\", \"groups\"]\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Service1Name}}\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"service_template_id\": {{ServiceTemplate1Id}},\r\n    \"active_check_enabled\": 0,\r\n    \"passive_check_enabled\": 1,\r\n    \"max_check_attempts\": 1\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Export the configuration (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The configuration has successfully been reloaded.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/generate-and-reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"generate-and-reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit a result to the host and the service by admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"expectedHttpStatus\", 200);\r",
									"pm.collectionVariables.set(\"maxNumberOfTries\", 10);\r",
									"pm.collectionVariables.set(\"sleepBetweenTries\", 2000);\r",
									"\r",
									"if (!pm.collectionVariables.get(\"collection_tries\")) {\r",
									"    pm.collectionVariables.set(\"collection_tries\", 1);\r",
									"}\r",
									"\r",
									"if ((pm.response.code != 204) && (pm.collectionVariables.get(\"collection_tries\") < pm.collectionVariables.get(\"maxNumberOfTries\"))) {\r",
									"    var tries = parseInt(pm.collectionVariables.get(\"collection_tries\"));\r",
									"    pm.collectionVariables.set(\"collection_tries\", tries + 1);\r",
									"    setTimeout(function() {}, pm.collectionVariables.get(\"sleepBetweenTries\"));\r",
									"    postman.setNextRequest(\"Submit a result to the host and the service by admin (successful)\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"collection_tries\");\r",
									"\r",
									"    pm.test(\"The result has been successfully submitted\", function () {\r",
									"        pm.response.to.have.status(204);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resources\": [{\r\n        \"type\": \"host\",\r\n        \"id\": {{Host1Id}},\r\n        \"parent\": null,\r\n        \"status\": 0,\r\n        \"output\": \"Host Okay !\"\r\n    },\r\n    {\r\n        \"type\": \"service\",\r\n        \"id\": {{Service1Id}},\r\n        \"parent\": {\r\n            \"id\": {{Host1Id}}\r\n        },\r\n        \"status\": 1,\r\n        \"output\": \"Warning for the service\"\r\n    }]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/resources/submit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"resources",
								"submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wait for the result to be submitted to the service by admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"if (!pm.collectionVariables.get(\"collection_tries\")) {\r",
									"    pm.collectionVariables.set(\"collection_tries\", 1);\r",
									"}\r",
									"\r",
									"if ((pm.collectionVariables.get(\"collection_tries\") < pm.collectionVariables.get(\"maxNumberOfTries\") && responseJson.state == 4) || (pm.response.code !== pm.collectionVariables.get(\"expectedHttpStatus\"))) {\r",
									"    var tries = parseInt(pm.collectionVariables.get(\"collection_tries\"));\r",
									"    pm.collectionVariables.set(\"collection_tries\", tries + 1);\r",
									"    setTimeout(function() {}, pm.collectionVariables.get(\"sleepBetweenTries\"));\r",
									"    postman.setNextRequest(\"Wait for the result to be submitted to the service by admin (successful)\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"collection_tries\");\r",
									"\r",
									"    pm.test(\"Service is in Warning state with correct informations\", function () {\r",
									"        pm.response.to.have.status(pm.collectionVariables.get(\"expectedHttpStatus\"));\r",
									"\r",
									"        pm.expect(responseJson.state).to.eql(1);\r",
									"        pm.expect(responseJson.output).to.eql(\"Warning for the service\\n\");\r",
									"        pm.expect(responseJson.performance_data).to.eql(\"\");\r",
									"    });\r",
									"\r",
									"        pm.test(\"Schema validation for the monitoring response\", function () {\r",
									"        const schema = {\r",
									"            type: \"object\",\r",
									"            properties: {\r",
									"                duration: { type: [\"string\", \"null\"] },\r",
									"                id: { type: \"integer\" },\r",
									"                check_attempt: { type: \"string\" },\r",
									"                check_command: { type: \"string\" },\r",
									"                check_interval: { type: \"number\" },\r",
									"                check_period: { type: \"string\" },\r",
									"                check_type: { type: \"integer\" },\r",
									"                command_line: { type: [\"string\", \"null\"] },\r",
									"                description: { type: \"string\" },\r",
									"                display_name: { type: \"string\" },\r",
									"                execution_time: { type: \"number\" },\r",
									"                icon_image: { type: \"string\" },\r",
									"                icon_image_alt: { type: \"string\" },\r",
									"                is_acknowledged: { type: \"boolean\" },\r",
									"                is_active_check: { type: \"boolean\" },\r",
									"                is_checked: { type: \"boolean\" },\r",
									"                scheduled_downtime_depth: { type: \"integer\" },\r",
									"                last_check: { type: [\"string\", \"null\"] },\r",
									"                last_hard_state_change: { type: [\"string\", \"null\"] },\r",
									"                last_notification: { type: [\"string\", \"null\"] },\r",
									"                last_time_critical: { type: [\"string\", \"null\"] },\r",
									"                last_time_ok: { type: [\"string\", \"null\"] },\r",
									"                last_time_unknown: { type: [\"string\", \"null\"] },\r",
									"                last_time_warning: { type: [\"string\", \"null\"] },\r",
									"                last_update: { type: [\"string\", \"null\"] },\r",
									"                last_state_change: { type: [\"string\", \"null\"] },\r",
									"                latency: { type: \"number\" },\r",
									"                max_check_attempts: { type: \"integer\" },\r",
									"                next_check: { type: [\"string\", \"null\"] },\r",
									"                output: { type: \"string\" },\r",
									"                performance_data: { type: \"string\" },\r",
									"                state: { type: \"integer\" },\r",
									"                state_type: { type: \"integer\" },\r",
									"                criticality: { type: [\"string\", \"null\"] },\r",
									"                downtimes: { type: \"array\" },\r",
									"                acknowledgement: { type: [\"object\", \"null\"] },\r",
									"                flapping: { type: \"boolean\" },\r",
									"                status: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        code: { type: \"number\" },\r",
									"                        name: { type: \"string\" },\r",
									"                        severity_code: { type: \"number\" }\r",
									"                    },\r",
									"                    required: [\"code\", \"name\", \"severity_code\"]\r",
									"                },\r",
									"                notify: { type: \"boolean\" }\r",
									"            },\r",
									"            required: [\"duration\", \"id\", \"check_attempt\", \"check_command\", \"check_interval\", \"check_period\", \"check_type\", \"command_line\", \"description\", \"display_name\", \"execution_time\", \"icon_image\", \"icon_image_alt\", \"is_acknowledged\", \"is_active_check\", \"is_checked\", \"scheduled_downtime_depth\", \"last_check\", \"last_hard_state_change\", \"last_notification\", \"last_time_critical\", \"last_time_ok\", \"last_time_unknown\", \"last_time_warning\", \"last_update\", \"last_state_change\", \"latency\", \"max_check_attempts\", \"next_check\", \"output\", \"performance_data\", \"state\", \"state_type\", \"criticality\", \"downtimes\", \"acknowledgement\", \"flapping\", \"status\", \"notify\"]\r",
									"        };\r",
									"\r",
									"        pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"    });\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts/{{Host1Id}}/services/{{Service1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts",
								"{{Host1Id}}",
								"services",
								"{{Service1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wait for the result to be submitted to the host by admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"if (!pm.collectionVariables.get(\"collection_tries\")) {\r",
									"    pm.collectionVariables.set(\"collection_tries\", 1);\r",
									"}\r",
									"\r",
									"if ((pm.collectionVariables.get(\"collection_tries\") < pm.collectionVariables.get(\"maxNumberOfTries\") && responseJson.state == 4) || (pm.response.code !== pm.collectionVariables.get(\"expectedHttpStatus\"))) {\r",
									"    var tries = parseInt(pm.collectionVariables.get(\"collection_tries\"));\r",
									"    pm.collectionVariables.set(\"collection_tries\", tries + 1);\r",
									"    setTimeout(function() {}, pm.collectionVariables.get(\"sleepBetweenTries\"));\r",
									"    postman.setNextRequest(\"Wait for the result to be submitted to the host by admin (successful)\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"collection_tries\");\r",
									"\r",
									"    pm.test(\"Host is Ok and has all the correct informations\", function () {\r",
									"        pm.response.to.have.status(pm.collectionVariables.get(\"expectedHttpStatus\"));\r",
									"\r",
									"        pm.expect(responseJson.state).to.eql(0);\r",
									"        pm.expect(responseJson.output).to.eql(\"Host Okay !\\n\");\r",
									"    });\r",
									"\r",
									"        pm.test(\"Schema validation for the monitoring response\", function () {\r",
									"        const schema = {\r",
									"            type: \"object\",\r",
									"            properties: {\r",
									"                id: { type: \"integer\" },\r",
									"                poller_id: { type: \"integer\" },\r",
									"                name: { type: \"string\" },\r",
									"                acknowledged: { type: \"boolean\" },\r",
									"                active_checks: { type: \"boolean\" },\r",
									"                address_ip: { type: \"string\" },\r",
									"                alias: { type: \"string\" },\r",
									"                check_attempt: { type: \"integer\" },\r",
									"                check_command: { type: \"string\" },\r",
									"                check_interval: { type: \"integer\" },\r",
									"                check_period: { type: \"string\" },\r",
									"                check_type: { type: \"integer\" },\r",
									"                checked: { type: \"boolean\" },\r",
									"                display_name: { type: \"string\" },\r",
									"                enabled: { type: \"boolean\" },\r",
									"                execution_time: { type: \"number\" },\r",
									"                icon_image: { type: \"string\" },\r",
									"                icon_image_alt: { type: \"string\" },\r",
									"                last_check: { type: \"string\" },\r",
									"                last_hard_state: { type: \"integer\" },\r",
									"                last_hard_state_change: { type: [\"string\", \"null\"] },\r",
									"                last_notification: { type: [\"string\", \"null\"] },\r",
									"                last_state_change: { type: [\"string\", \"null\"] },\r",
									"                last_time_down: { type: [\"string\", \"null\"] },\r",
									"                last_time_unreachable: { type: [\"string\", \"null\"] },\r",
									"                last_time_up: { type: [\"string\", \"null\"] },\r",
									"                last_update: { type: [\"string\", \"null\"] },\r",
									"                latency: { type: \"number\" },\r",
									"                max_check_attempts: { type: \"integer\" },\r",
									"                next_check: { type: \"string\" },\r",
									"                next_host_notification: { type: [\"string\", \"null\"] },\r",
									"                notification_interval: { type: \"integer\" },\r",
									"                notification_number: { type: \"integer\" },\r",
									"                notification_period: { type: \"string\" },\r",
									"                notify: { type: \"boolean\" },\r",
									"                notify_on_down: { type: \"boolean\" },\r",
									"                notify_on_downtime: { type: \"boolean\" },\r",
									"                notify_on_flapping: { type: \"boolean\" },\r",
									"                notify_on_recovery: { type: \"boolean\" },\r",
									"                notify_on_unreachable: { type: \"boolean\" },\r",
									"                output: { type: \"string\" },\r",
									"                passive_checks: { type: \"boolean\" },\r",
									"                services: {\r",
									"                    type: \"array\",\r",
									"                    items: {\r",
									"                        type: \"object\",\r",
									"                        properties: {\r",
									"                            id: { type: \"integer\" },\r",
									"                            description: { type: \"string\" },\r",
									"                            display_name: { type: \"string\" },\r",
									"                            state: { type: \"integer\" },\r",
									"                            notify: { type: [\"integer\", \"null\"] }\r",
									"                        },\r",
									"                        required: [\"id\", \"description\", \"display_name\", \"state\", \"notify\"]\r",
									"                    }\r",
									"                },\r",
									"                state: { type: \"integer\" },\r",
									"                state_type: { type: \"integer\" },\r",
									"                timezone: { type: \"string\" },\r",
									"                scheduled_downtime_depth: { type: \"integer\" },\r",
									"                criticality: { type: [\"integer\", \"null\"] },\r",
									"                flapping: { type: \"boolean\" },\r",
									"                percent_state_change: { type: \"number\" },\r",
									"                downtimes: {\r",
									"                    type: \"array\",\r",
									"                    items: {\r",
									"                        type: \"object\",\r",
									"                        properties: {\r",
									"                            id: { type: \"integer\" },\r",
									"                            author_id: { type: \"integer\" },\r",
									"                            author_name: { type: \"string\" },\r",
									"                            host_id: { type: \"integer\" },\r",
									"                            comment: { type: \"string\" },\r",
									"                            duration: { type: \"integer\" },\r",
									"                            entry_time: { type: \"string\" },\r",
									"                            start_time: { type: \"string\" },\r",
									"                            end_time: { type: \"string\" },\r",
									"                            deletion_time: { type: [\"string\", \"null\"] },\r",
									"                            actual_start_time: { type: \"string\" },\r",
									"                            actual_end_time: { type: \"string\" },\r",
									"                            is_started: { type: \"boolean\" },\r",
									"                            is_cancelled: { type: \"boolean\" },\r",
									"                            is_fixed: { type: \"boolean\" }\r",
									"                        },\r",
									"                        required: [\"id\", \"author_id\", \"author_name\", \"host_id\", \"comment\", \"duration\", \"entry_time\", \"start_time\", \"end_time\", \"deletion_time\", \"actual_start_time\", \"actual_end_time\", \"is_started\", \"is_cancelled\", \"is_fixed\"]\r",
									"                    }\r",
									"                },\r",
									"                acknowledgement: {\r",
									"                    type: [\"object\", \"null\"],\r",
									"                    properties: {\r",
									"                        host: {\r",
									"                            type: [\"object\", \"null\"],\r",
									"                            properties: {\r",
									"                                id: { type: \"integer\" },\r",
									"                                author_id: { type: \"integer\" },\r",
									"                                author_name: { type: \"string\" },\r",
									"                                comment: { type: \"string\" },\r",
									"                                deletion_time: { type: [\"string\", \"null\"] },\r",
									"                                entry_time: { type: \"string\" },\r",
									"                                host_id: { type: \"integer\" },\r",
									"                                poller_id: { type: \"integer\" },\r",
									"                                is_notify_contacts: { type: \"boolean\" },\r",
									"                                is_persistent_comment: { type: \"boolean\" },\r",
									"                                is_sticky: { type: \"boolean\" },\r",
									"                                state: { type: \"integer\" }\r",
									"                            }\r",
									"                        },\r",
									"                    },\r",
									"                },\r",
									"                poller_name: { type: \"string\" }\r",
									"            },\r",
									"            required: [\"id\", \"poller_id\", \"name\", \"acknowledged\", \"active_checks\", \"address_ip\", \"alias\", \"check_attempt\", \"check_command\", \"check_interval\", \"check_period\", \"check_type\", \"checked\", \"display_name\", \"enabled\", \"execution_time\", \"icon_image\", \"icon_image_alt\", \"last_check\", \"last_hard_state\", \"last_hard_state_change\", \"last_notification\", \"last_state_change\", \"last_time_down\", \"last_time_unreachable\", \"last_time_up\", \"last_update\", \"latency\", \"max_check_attempts\", \"next_check\", \"next_host_notification\", \"notification_interval\", \"notification_number\", \"notification_period\", \"notify\", \"notify_on_down\", \"notify_on_downtime\", \"notify_on_flapping\", \"notify_on_recovery\", \"notify_on_unreachable\", \"output\", \"passive_checks\", \"services\", \"state\", \"state_type\", \"timezone\", \"scheduled_downtime_depth\", \"criticality\", \"flapping\", \"percent_state_change\", \"downtimes\", \"acknowledgement\", \"poller_name\"]\r",
									"        };\r",
									"\r",
									"        pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"    });\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts/{{Host1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts",
								"{{Host1Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "0102 - Creation user-non-admin",
			"item": [
				{
					"name": "Add user-non-admin (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_non_admin\", \"user-non-admin\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_non_admin}};{{api_login_user_non_admin}};{{api_login_user_non_admin}}@localhost;Centreon!123;0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve user-non-admin ID (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The id of the user has been successfully retrieved.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"  for(let i=0; i < responseJson.result.length; i++){\r",
									"    if(responseJson.result[i].alias === pm.collectionVariables.get('api_login_user_non_admin')){\r",
									"        pm.collectionVariables.set(\"user_Id\", responseJson.result[i].id);\r",
									"    }\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"CONTACT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_non_admin}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_non_admin}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group ACL-non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ACL-non-admin;ACL-non-admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to ACL-non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ACL-non-admin;{{api_login_user_non_admin}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu RS (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RS;RS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RW right to RS (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Read/Write rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n\"values\": \"RS;1;Monitoring\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RS to ACL-non-admin(successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ACL-non-admin;RS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Action Action-non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL action has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLACTION\",\r\n  \"values\": \"Action-non-admin;Action-non-admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Action-non-admin to ACL-non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL action has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addaction\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ACL-non-admin;Action-non-admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "0103 - Submit Result by user without access to Actions and Ressources",
			"item": [
				{
					"name": "Login with user-non-admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get(\"api_login_user_non_admin\"));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_non_admin}}\",\r\n      \"password\": \"Centreon!123\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit a result to the host and the service (error)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The result has not been submitted, because the user does not have necessary rights.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resources\": [{\r\n        \"type\": \"host\",\r\n        \"id\": {{Host1Id}},\r\n        \"parent\": null,\r\n        \"status\": 2,\r\n        \"output\": \"Host Down !\"\r\n    },\r\n    {\r\n        \"type\": \"service\",\r\n        \"id\": {{Service1Id}},\r\n        \"parent\": {\r\n            \"id\": {{Host1Id}}\r\n        },\r\n        \"status\": 3,\r\n        \"output\": \"Critical service\"\r\n    }]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/resources/submit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"resources",
								"submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wait for the result to be submitted to the service (error)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Service not found because user does not have necessary rights.\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts/{{Host1Id}}/services/{{Service1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts",
								"{{Host1Id}}",
								"services",
								"{{Service1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wait for the result to be submitted to the host (error)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Service not found because user does not have necessary rights.\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts/{{Host1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts",
								"{{Host1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from non-admin-user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "0104 - Submit Result by user-non-admin with access to Actions but without access to Resources",
			"item": [
				{
					"name": "Login with admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant submit result action in Action-non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL action rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grant\",\r\n  \"object\": \"ACLACTION\",\r\n  \"values\": \"Action-non-admin;host_submit_result|service_submit_result\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload ACL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL has been reloaded.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"reload\",\r\n  \"object\": \"ACL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with user-non-admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get(\"api_login_user_non_admin\"));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_non_admin}}\",\r\n      \"password\": \"Centreon!123\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit a result to the host and the service (error)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The result has not been submitted, because the user does not have necessary rights.\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(responseJson.message).to.include(\"Host \" + pm.collectionVariables.get(\"Host1Id\") + \" not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resources\": [{\r\n        \"type\": \"host\",\r\n        \"id\": {{Host1Id}},\r\n        \"parent\": null,\r\n        \"status\": 2,\r\n        \"output\": \"Host Down !\"\r\n    },\r\n    {\r\n        \"type\": \"service\",\r\n        \"id\": {{Service1Id}},\r\n        \"parent\": {\r\n            \"id\": {{Host1Id}}\r\n        },\r\n        \"status\": 3,\r\n        \"output\": \"Critical service\"\r\n    }]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/resources/submit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"resources",
								"submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wait for the result to be submitted to the service (error)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Service not found because user does not have necessary rights.\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts/{{Host1Id}}/services/{{Service1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts",
								"{{Host1Id}}",
								"services",
								"{{Service1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wait for the result to be submitted to the host (error)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Service not found because user does not have necessary rights.\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts/{{Host1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts",
								"{{Host1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from non-admin-user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "0105 - Submit Result by user-non-admin with access to resources and actions",
			"item": [
				{
					"name": "Login with admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link All Resources to ACL-non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The resources has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ACL-non-admin;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload ACL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL has been reloaded.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"reload\",\r\n  \"object\": \"ACL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with user-non-admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get(\"api_login_user_non_admin\"));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_non_admin}}\",\r\n      \"password\": \"Centreon!123\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit a result to the host and the service by user non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get(\"collection_tries\")) {\r",
									"    pm.collectionVariables.set(\"collection_tries\", 1);\r",
									"}\r",
									"\r",
									"if ((pm.response.code != 204) && (pm.collectionVariables.get(\"collection_tries\") < pm.collectionVariables.get(\"maxNumberOfTries\"))) {\r",
									"    var tries = parseInt(pm.collectionVariables.get(\"collection_tries\"));\r",
									"    pm.collectionVariables.set(\"collection_tries\", tries + 1);\r",
									"    setTimeout(function() {}, pm.collectionVariables.get(\"sleepBetweenTries\"));\r",
									"    postman.setNextRequest(\"Submit a result to the host and the service by user non-admin (successful)\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"collection_tries\");\r",
									"\r",
									"    pm.test(\"The result has been successfully submitted\", function () {\r",
									"        pm.response.to.have.status(204);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resources\": [{\r\n        \"type\": \"host\",\r\n        \"id\": {{Host1Id}},\r\n        \"parent\": null,\r\n        \"status\": 2,\r\n        \"output\": \"Host Down !\"\r\n    },\r\n    {\r\n        \"type\": \"service\",\r\n        \"id\": {{Service1Id}},\r\n        \"parent\": {\r\n            \"id\": {{Host1Id}}\r\n        },\r\n        \"status\": 3,\r\n        \"output\": \"Unknown service\"\r\n    }]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/resources/submit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"resources",
								"submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wait for the result to be submitted to the host by user non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"if (!pm.collectionVariables.get(\"collection_tries\")) {\r",
									"    pm.collectionVariables.set(\"collection_tries\", 1);\r",
									"}\r",
									"\r",
									"if ((pm.collectionVariables.get(\"collection_tries\") < pm.collectionVariables.get(\"maxNumberOfTries\")) &&(responseJson.state == 0)) {\r",
									"    var tries = parseInt(pm.collectionVariables.get(\"collection_tries\"));\r",
									"    pm.collectionVariables.set(\"collection_tries\", tries + 1);\r",
									"    setTimeout(function() {}, pm.collectionVariables.get(\"sleepBetweenTries\"));\r",
									"    postman.setNextRequest(\"Wait for the result to be submitted to the host by user non-admin (successful)\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"collection_tries\");\r",
									"\r",
									"    pm.test(\"Host is Down and has all the correct informations\", function () {\r",
									"        pm.response.to.have.status(pm.collectionVariables.get(\"expectedHttpStatus\"));\r",
									"\r",
									"        pm.expect(responseJson.state).to.eql(1);\r",
									"        pm.expect(responseJson.output).to.eql(\"Host Down !\\n\");\r",
									"    });\r",
									"\r",
									"        pm.test(\"Schema validation for the monitoring response\", function () {\r",
									"        const schema = {\r",
									"            type: \"object\",\r",
									"            properties: {\r",
									"                id: { type: \"integer\" },\r",
									"                poller_id: { type: \"integer\" },\r",
									"                name: { type: \"string\" },\r",
									"                acknowledged: { type: \"boolean\" },\r",
									"                active_checks: { type: \"boolean\" },\r",
									"                address_ip: { type: \"string\" },\r",
									"                alias: { type: \"string\" },\r",
									"                check_attempt: { type: \"integer\" },\r",
									"                check_command: { type: \"string\" },\r",
									"                check_interval: { type: \"integer\" },\r",
									"                check_period: { type: \"string\" },\r",
									"                check_type: { type: \"integer\" },\r",
									"                checked: { type: \"boolean\" },\r",
									"                display_name: { type: \"string\" },\r",
									"                enabled: { type: \"boolean\" },\r",
									"                execution_time: { type: \"number\" },\r",
									"                icon_image: { type: \"string\" },\r",
									"                icon_image_alt: { type: \"string\" },\r",
									"                last_check: { type: \"string\" },\r",
									"                last_hard_state: { type: \"integer\" },\r",
									"                last_hard_state_change: { type: \"string\" },\r",
									"                last_notification: { type: [\"string\", \"null\"] },\r",
									"                last_state_change: { type: \"string\" },\r",
									"                last_time_down: { type: \"string\" },\r",
									"                last_time_unreachable: { type: [\"string\", \"null\"] },\r",
									"                last_time_up: { type: [\"string\", \"null\"] },\r",
									"                last_update: { type: \"string\" },\r",
									"                latency: { type: \"number\" },\r",
									"                max_check_attempts: { type: \"integer\" },\r",
									"                next_check: { type: \"string\" },\r",
									"                next_host_notification: { type: [\"string\", \"null\"] },\r",
									"                notification_interval: { type: \"integer\" },\r",
									"                notification_number: { type: \"integer\" },\r",
									"                notification_period: { type: \"string\" },\r",
									"                notify: { type: \"boolean\" },\r",
									"                notify_on_down: { type: \"boolean\" },\r",
									"                notify_on_downtime: { type: \"boolean\" },\r",
									"                notify_on_flapping: { type: \"boolean\" },\r",
									"                notify_on_recovery: { type: \"boolean\" },\r",
									"                notify_on_unreachable: { type: \"boolean\" },\r",
									"                output: { type: \"string\" },\r",
									"                passive_checks: { type: \"boolean\" },\r",
									"                services: {\r",
									"                    type: \"array\",\r",
									"                    items: {\r",
									"                        type: \"object\",\r",
									"                        properties: {\r",
									"                            id: { type: \"integer\" },\r",
									"                            description: { type: \"string\" },\r",
									"                            display_name: { type: \"string\" },\r",
									"                            state: { type: \"integer\" },\r",
									"                            notify: { type: [\"integer\", \"null\"] }\r",
									"                        },\r",
									"                        required: [\"id\", \"description\", \"display_name\", \"state\", \"notify\"]\r",
									"                    }\r",
									"                },\r",
									"                state: { type: \"integer\" },\r",
									"                state_type: { type: \"integer\" },\r",
									"                timezone: { type: \"string\" },\r",
									"                scheduled_downtime_depth: { type: \"integer\" },\r",
									"                criticality: { type: [\"integer\", \"null\"] },\r",
									"                flapping: { type: \"boolean\" },\r",
									"                percent_state_change: { type: \"number\" },\r",
									"                downtimes: {\r",
									"                    type: \"array\",\r",
									"                    items: {\r",
									"                        type: \"object\",\r",
									"                        properties: {\r",
									"                            id: { type: \"integer\" },\r",
									"                            author_id: { type: \"integer\" },\r",
									"                            author_name: { type: \"string\" },\r",
									"                            host_id: { type: \"integer\" },\r",
									"                            comment: { type: \"string\" },\r",
									"                            duration: { type: \"integer\" },\r",
									"                            entry_time: { type: \"string\" },\r",
									"                            start_time: { type: \"string\" },\r",
									"                            end_time: { type: \"string\" },\r",
									"                            deletion_time: { type: [\"string\", \"null\"] },\r",
									"                            actual_start_time: { type: \"string\" },\r",
									"                            actual_end_time: { type: \"string\" },\r",
									"                            is_started: { type: \"boolean\" },\r",
									"                            is_cancelled: { type: \"boolean\" },\r",
									"                            is_fixed: { type: \"boolean\" }\r",
									"                        },\r",
									"                        required: [\"id\", \"author_id\", \"author_name\", \"host_id\", \"comment\", \"duration\", \"entry_time\", \"start_time\", \"end_time\", \"deletion_time\", \"actual_start_time\", \"actual_end_time\", \"is_started\", \"is_cancelled\", \"is_fixed\"]\r",
									"                    }\r",
									"                },\r",
									"                acknowledgement: {\r",
									"                    type: [\"object\", \"null\"],\r",
									"                    properties: {\r",
									"                        host: {\r",
									"                            type: [\"object\", \"null\"],\r",
									"                            properties: {\r",
									"                                id: { type: \"integer\" },\r",
									"                                author_id: { type: \"integer\" },\r",
									"                                author_name: { type: \"string\" },\r",
									"                                comment: { type: \"string\" },\r",
									"                                deletion_time: { type: [\"string\", \"null\"] },\r",
									"                                entry_time: { type: \"string\" },\r",
									"                                host_id: { type: \"integer\" },\r",
									"                                poller_id: { type: \"integer\" },\r",
									"                                is_notify_contacts: { type: \"boolean\" },\r",
									"                                is_persistent_comment: { type: \"boolean\" },\r",
									"                                is_sticky: { type: \"boolean\" },\r",
									"                                state: { type: \"integer\" }\r",
									"                            }\r",
									"                        },\r",
									"                    },\r",
									"                },\r",
									"                poller_name: { type: \"string\" }\r",
									"            },\r",
									"            required: [\"id\", \"poller_id\", \"name\", \"acknowledged\", \"active_checks\", \"address_ip\", \"alias\", \"check_attempt\", \"check_command\", \"check_interval\", \"check_period\", \"check_type\", \"checked\", \"display_name\", \"enabled\", \"execution_time\", \"icon_image\", \"icon_image_alt\", \"last_check\", \"last_hard_state\", \"last_hard_state_change\", \"last_notification\", \"last_state_change\", \"last_time_down\", \"last_time_unreachable\", \"last_time_up\", \"last_update\", \"latency\", \"max_check_attempts\", \"next_check\", \"next_host_notification\", \"notification_interval\", \"notification_number\", \"notification_period\", \"notify\", \"notify_on_down\", \"notify_on_downtime\", \"notify_on_flapping\", \"notify_on_recovery\", \"notify_on_unreachable\", \"output\", \"passive_checks\", \"services\", \"state\", \"state_type\", \"timezone\", \"scheduled_downtime_depth\", \"criticality\", \"flapping\", \"percent_state_change\", \"downtimes\", \"acknowledgement\", \"poller_name\"]\r",
									"        };\r",
									"\r",
									"        pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"    });\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts/{{Host1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts",
								"{{Host1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wait for the result to be submitted to the service by the user non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"if (!pm.collectionVariables.get(\"collection_tries\")) {\r",
									"    pm.collectionVariables.set(\"collection_tries\", 1);\r",
									"}\r",
									"\r",
									"if ((pm.collectionVariables.get(\"collection_tries\") < pm.collectionVariables.get(\"maxNumberOfTries\")) &&(responseJson.state == 1)) {\r",
									"    var tries = parseInt(pm.collectionVariables.get(\"collection_tries\"));\r",
									"    pm.collectionVariables.set(\"collection_tries\", tries + 1);\r",
									"    setTimeout(function() {}, pm.collectionVariables.get(\"sleepBetweenTries\"));\r",
									"    postman.setNextRequest(\"Wait for the result to be submitted to the service by the user non-admin (successful)\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"collection_tries\");\r",
									"\r",
									"    pm.test(\"Service is in Warning state with correct informations\", function () {\r",
									"        pm.response.to.have.status(pm.collectionVariables.get(\"expectedHttpStatus\"));\r",
									"\r",
									"        pm.expect(responseJson.state).to.eql(3);\r",
									"        pm.expect(responseJson.output).to.eql(\"Unknown service\\n\");\r",
									"        pm.expect(responseJson.performance_data).to.eql(\"\");\r",
									"    });\r",
									"\r",
									"        pm.test(\"Schema validation for the monitoring response\", function () {\r",
									"        const schema = {\r",
									"            type: \"object\",\r",
									"            properties: {\r",
									"                duration: { type: [\"string\", \"null\"] },\r",
									"                id: { type: \"integer\" },\r",
									"                check_attempt: { type: \"string\" },\r",
									"                check_command: { type: \"string\" },\r",
									"                check_interval: { type: \"number\" },\r",
									"                check_period: { type: \"string\" },\r",
									"                check_type: { type: \"integer\" },\r",
									"                command_line: { type: [\"string\", \"null\"] },\r",
									"                description: { type: \"string\" },\r",
									"                display_name: { type: \"string\" },\r",
									"                execution_time: { type: \"number\" },\r",
									"                icon_image: { type: \"string\" },\r",
									"                icon_image_alt: { type: \"string\" },\r",
									"                is_acknowledged: { type: \"boolean\" },\r",
									"                is_active_check: { type: \"boolean\" },\r",
									"                is_checked: { type: \"boolean\" },\r",
									"                scheduled_downtime_depth: { type: \"integer\" },\r",
									"                last_check: { type: [\"string\", \"null\"] },\r",
									"                last_hard_state_change: { type: [\"string\", \"null\"] },\r",
									"                last_notification: { type: [\"string\", \"null\"] },\r",
									"                last_time_critical: { type: [\"string\", \"null\"] },\r",
									"                last_time_ok: { type: [\"string\", \"null\"] },\r",
									"                last_time_unknown: { type: [\"string\", \"null\"] },\r",
									"                last_time_warning: { type: [\"string\", \"null\"] },\r",
									"                last_update: { type: [\"string\", \"null\"] },\r",
									"                last_state_change: { type: [\"string\", \"null\"] },\r",
									"                latency: { type: \"number\" },\r",
									"                max_check_attempts: { type: \"integer\" },\r",
									"                next_check: { type: [\"string\", \"null\"] },\r",
									"                output: { type: \"string\" },\r",
									"                performance_data: { type: \"string\" },\r",
									"                state: { type: \"integer\" },\r",
									"                state_type: { type: \"integer\" },\r",
									"                criticality: { type: [\"string\", \"null\"] },\r",
									"                downtimes: { type: \"array\" },\r",
									"                acknowledgement: { type: [\"object\", \"null\"] },\r",
									"                flapping: { type: \"boolean\" },\r",
									"                status: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        code: { type: \"number\" },\r",
									"                        name: { type: \"string\" },\r",
									"                        severity_code: { type: \"number\" }\r",
									"                    },\r",
									"                    required: [\"code\", \"name\", \"severity_code\"]\r",
									"                },\r",
									"                notify: { type: \"boolean\" }\r",
									"            },\r",
									"            required: [\"duration\", \"id\", \"check_attempt\", \"check_command\", \"check_interval\", \"check_period\", \"check_type\", \"command_line\", \"description\", \"display_name\", \"execution_time\", \"icon_image\", \"icon_image_alt\", \"is_acknowledged\", \"is_active_check\", \"is_checked\", \"scheduled_downtime_depth\", \"last_check\", \"last_hard_state_change\", \"last_notification\", \"last_time_critical\", \"last_time_ok\", \"last_time_unknown\", \"last_time_warning\", \"last_update\", \"last_state_change\", \"latency\", \"max_check_attempts\", \"next_check\", \"output\", \"performance_data\", \"state\", \"state_type\", \"criticality\", \"downtimes\", \"acknowledgement\", \"flapping\", \"status\", \"notify\"]\r",
									"        };\r",
									"\r",
									"        pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"    });\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts/{{Host1Id}}/services/{{Service1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts",
								"{{Host1Id}}",
								"services",
								"{{Service1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from non-admin-user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}