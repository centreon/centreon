{
	"info": {
		"_postman_id": "25f494b5-7cac-42de-bbe4-150fb6b126a5",
		"name": "Host_Monitoring",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16182525"
	},
	"item": [
		{
			"name": "0101 - Host Monitoring By admin",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a command",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The command has been successfully created, with name '\" + pm.collectionVariables.get(\"Command1Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new command \r",
									"    pm.collectionVariables.set(\"CommandId\", responseJson.id);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the command response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": { \"type\": \"integer\" },\r",
									"            \"name\": { \"type\": \"string\" },\r",
									"            \"type\": { \"type\": \"integer\" },\r",
									"            \"command_line\": { \"type\": \"string\" },\r",
									"            \"is_shell\": { \"type\": \"boolean\" },\r",
									"            \"is_activated\": { \"type\": \"boolean\" },\r",
									"            \"is_locked\": { \"type\": \"boolean\" },\r",
									"            \"argument_example\": { \"type\": [\"string\", \"null\"], },\r",
									"            \"arguments\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"description\": { \"type\": \"string\" }\r",
									"                    },\r",
									"                    \"required\": [\"name\", \"description\"]\r",
									"                }\r",
									"            },\r",
									"            \"macros\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"type\": { \"type\": \"string\" },\r",
									"                        \"description\": { \"type\": \"string\" }\r",
									"                    },\r",
									"                    \"required\": [\"name\", \"type\", \"description\"]\r",
									"                }\r",
									"            },\r",
									"            \"connector\": {\r",
									"                \"type\": [\"object\", \"null\"],\r",
									"                \"properties\": {\r",
									"                    \"id\": { \"type\": \"integer\" },\r",
									"                    \"name\": { \"type\": \"string\" }\r",
									"                },\r",
									"                \"required\": [\"id\", \"name\"]\r",
									"            },\r",
									"            \"grap_template\": {\r",
									"                \"type\": [\"object\", \"null\"],\r",
									"                \"properties\": {\r",
									"                    \"id\": { \"type\": \"integer\" },\r",
									"                    \"name\": { \"type\": \"string\" }\r",
									"                },\r",
									"                \"required\": [\"id\", \"name\"]\r",
									"            }\r",
									"                        \r",
									"        },\r",
									"        \"required\": [\"id\", \"name\", \"type\", \"command_line\", \"is_shell\", \"is_activated\", \"is_locked\", \"argument_example\", \"arguments\", \"macros\", \"connector\", \"grap_template\"]\r",
									"    };\r",
									"    \r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Command1Name\", \"command_1\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Command1Name}}\",\r\n    \"type\": 2,\r\n    \"command_line\": \"$USER1$/check_icmp -H $HOSTADDRESS$ -w 3000.0,80% -c 5000.0,100% -p 1\",\r\n    \"is_shell\": false\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/commands",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"commands"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a host template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host template has been successfully created, with name '\" + pm.collectionVariables.get(\"HostTemplate1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostTemplate1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host template\r",
									"    pm.collectionVariables.set(\"HostTemplate1Id\", responseJson.id);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for host template creation response\", function () {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            id: { type: \"integer\" },\r",
									"            name: { type: \"string\" },\r",
									"            alias: { type: \"string\" },\r",
									"            snmp_version: { type: [\"string\", \"null\"] },\r",
									"            timezone_id: { type: [\"integer\", \"null\"] },\r",
									"            check_command_id: { type: [\"integer\", \"null\"] },\r",
									"            severity_id: { type: [\"integer\", \"null\"] },\r",
									"            check_timeperiod_id: { type: [\"integer\", \"null\"] },\r",
									"            note_url: { type: [\"string\", \"null\"] },\r",
									"            note: { type: [\"string\", \"null\"] },\r",
									"            action_url: { type: [\"string\", \"null\"] },\r",
									"            max_check_attempts: { type: [\"integer\", \"null\"] },\r",
									"            normal_check_interval: { type: [\"integer\", \"null\"] },\r",
									"            retry_check_interval: { type: [\"integer\", \"null\"] },\r",
									"            active_check_enabled: { type: \"integer\" },\r",
									"            passive_check_enabled: { type: \"integer\" },\r",
									"            notification_enabled: { type: \"integer\" },\r",
									"            notification_options: { type: [\"integer\", \"null\"] },\r",
									"            notification_interval: { type: [\"integer\", \"null\"] },\r",
									"            notification_timeperiod_id: { type: [\"integer\", \"null\"] },\r",
									"            add_inherited_contact_group: { type: \"boolean\" },\r",
									"            add_inherited_contact: { type: \"boolean\" },\r",
									"            first_notification_delay: { type: [\"integer\", \"null\"] },\r",
									"            recovery_notification_delay: { type: [\"integer\", \"null\"] },\r",
									"            acknowledgement_timeout: { type: [\"integer\", \"null\"] },\r",
									"            freshness_checked: { type: \"integer\" },\r",
									"            freshness_threshold: { type: [\"integer\", \"null\"] },\r",
									"            flap_detection_enabled: { type: \"integer\" },\r",
									"            low_flap_threshold: { type: [\"integer\", \"null\"] },\r",
									"            high_flap_threshold: { type: [\"integer\", \"null\"] },\r",
									"            event_handler_enabled: { type: \"integer\" },\r",
									"            event_handler_command_id: { type: [\"integer\", \"null\"] },\r",
									"            icon_id: { type: [\"integer\", \"null\"] },\r",
									"            icon_alternative: { type: [\"string\", \"null\"] },\r",
									"            comment: { type: [\"string\", \"null\"] },\r",
									"            is_locked: { type: \"boolean\" },\r",
									"            check_command_args: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"string\"\r",
									"                }\r",
									"            },\r",
									"            event_handler_command_args: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"string\"\r",
									"                }\r",
									"            },\r",
									"            categories: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            templates: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            macros: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        name: { type: \"string\" },\r",
									"                        value: { type: [\"string\", \"null\"] },\r",
									"                        is_password: { type: \"boolean\" },\r",
									"                        description: { type: [\"string\", \"null\"] }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        required: [\"id\", \"name\", \"alias\", \"snmp_version\", \"timezone_id\", \"severity_id\", \"check_command_id\", \"check_command_args\", \"check_timeperiod_id\", \"max_check_attempts\", \"normal_check_interval\", \"retry_check_interval\", \"active_check_enabled\", \"passive_check_enabled\", \"notification_enabled\", \"notification_options\", \"notification_interval\", \"notification_timeperiod_id\", \"add_inherited_contact_group\", \"add_inherited_contact\", \"first_notification_delay\", \"recovery_notification_delay\", \"acknowledgement_timeout\", \"freshness_checked\", \"freshness_threshold\", \"flap_detection_enabled\", \"low_flap_threshold\", \"high_flap_threshold\", \"event_handler_enabled\", \"event_handler_command_id\", \"event_handler_command_args\", \"note_url\", \"note\", \"action_url\", \"icon_id\", \"icon_alternative\", \"comment\", \"is_locked\", \"categories\", \"templates\", \"macros\"]\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostTemplate1Name\", \"host_template_1\");\r",
									"pm.collectionVariables.set(\"HostTemplate1Alias\", \"I'm the first host template created by admin\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"{{HostTemplate1Name}}\",\r\n\"alias\": \"{{HostTemplate1Alias}}\",\r\n\"check_command_id\": {{CommandId}},\r\n\"max_check_attempts\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a host",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Host1Name\", \"host_1\");\r",
									"pm.collectionVariables.set(\"Host1Alias\", \"I'm the first host created by admin\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Host1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host\r",
									"    pm.collectionVariables.set(\"Host1Id\", responseJson.id);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"Host1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"Host1Alias\"),\r",
									"        \"address\": \"999.99.99.99\",\r",
									"        \"monitoring_server_id\": 1,\r",
									"        \"snmp_version\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"note_url\": null,\r",
									"        \"note\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_alternative\": null,\r",
									"        \"comment\": null,\r",
									"        \"timezone_id\": null,\r",
									"        \"severity_id\": null,\r",
									"        \"check_command_id\": null,\r",
									"        \"check_timeperiod_id\": null,\r",
									"        \"notification_timeperiod_id\": null,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"max_check_attempts\": null,\r",
									"        \"normal_check_interval\": 3,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"notification_options\": null,\r",
									"        \"notification_interval\": null,\r",
									"        \"first_notification_delay\": null,\r",
									"        \"recovery_notification_delay\": null,\r",
									"        \"acknowledgement_timeout\": null,\r",
									"        \"freshness_threshold\": null,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"active_check_enabled\": 2,\r",
									"        \"passive_check_enabled\": 2,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"check_command_args\": [],\r",
									"        \"event_handler_command_args\": [],\r",
									"        \"categories\": [],\r",
									"        \"groups\": [],\r",
									"        \"templates\": [\r",
									"            {\r",
									"                \"id\": pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
									"                \"name\": pm.collectionVariables.get(\"HostTemplate1Name\"),\r",
									"            }\r",
									"        ],\r",
									"        \"macros\": [],\r",
									"        \"add_inherited_contact_group\": false,\r",
									"        \"add_inherited_contact\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the host creation response\", function () {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            id: { type: \"integer\" },\r",
									"            name: { type: \"string\" },\r",
									"            alias: { type: [\"string\", \"null\"] },\r",
									"            address: { type: \"string\" },\r",
									"            monitoring_server_id: { type: \"integer\" },\r",
									"            snmp_version: { type: [\"string\", \"null\"] },\r",
									"            timezone_id: { type: [\"integer\", \"null\"] },\r",
									"            severity_id: { type: [\"integer\", \"null\"] },\r",
									"            check_command_id: { type: [\"integer\", \"null\"] },\r",
									"            check_timeperiod_id: { type: [\"integer\", \"null\"] },\r",
									"            note_url: { type: [\"string\", \"null\"] },\r",
									"            note: { type: [\"string\", \"null\"] },\r",
									"            action_url: { type: [\"string\", \"null\"] },\r",
									"            max_check_attempts: { type: [\"integer\", \"null\"] },\r",
									"            normal_check_interval: { type: [\"integer\", \"null\"] },\r",
									"            retry_check_interval: { type: [\"integer\", \"null\"] },\r",
									"            active_check_enabled: { type: \"integer\" },\r",
									"            passive_check_enabled: { type: \"integer\" },\r",
									"            notification_enabled: { type: \"integer\" },\r",
									"            notification_options: { type: [\"integer\", \"null\"] },\r",
									"            notification_interval: { type: [\"integer\", \"null\"] },\r",
									"            notification_timeperiod_id: { type: [\"integer\", \"null\"] },\r",
									"            add_inherited_contact_group: { type: \"boolean\" },\r",
									"            add_inherited_contact: { type: \"boolean\" },\r",
									"            first_notification_delay: { type: [\"integer\", \"null\"] },\r",
									"            recovery_notification_delay: { type: [\"integer\", \"null\"] },\r",
									"            acknowledgement_timeout: { type: [\"integer\", \"null\"] },\r",
									"            freshness_checked: { type: \"integer\" },\r",
									"            freshness_threshold: { type: [\"integer\", \"null\"] },\r",
									"            flap_detection_enabled: { type: \"integer\" },\r",
									"            low_flap_threshold: { type: [\"integer\", \"null\"] },\r",
									"            high_flap_threshold: { type: [\"integer\", \"null\"] },\r",
									"            event_handler_enabled: { type: \"integer\" },\r",
									"            event_handler_command_id: { type: [\"integer\", \"null\"] },\r",
									"            icon_id: { type: [\"integer\", \"null\"] },\r",
									"            icon_alternative: { type: [\"string\", \"null\"] },\r",
									"            comment: { type: [\"string\", \"null\"] },\r",
									"            geo_coords: { type: [\"string\", \"null\"] },\r",
									"            is_activated: { type: \"boolean\" },\r",
									"            check_command_args: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"string\"\r",
									"                }\r",
									"            },\r",
									"            event_handler_command_args: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"string\"\r",
									"                }\r",
									"            },\r",
									"            categories: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            templates: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            groups: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            macros: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        required: [\"id\", \"monitoring_server_id\", \"name\", \"address\", \"alias\", \"snmp_version\", \"geo_coords\", \"note_url\", \"note\", \"action_url\", \"icon_alternative\", \"comment\", \"timezone_id\", \"severity_id\", \"check_command_id\", \"check_timeperiod_id\", \"notification_timeperiod_id\", \"event_handler_command_id\", \"icon_id\", \"max_check_attempts\", \"normal_check_interval\", \"retry_check_interval\", \"notification_options\", \"notification_interval\", \"first_notification_delay\", \"recovery_notification_delay\", \"acknowledgement_timeout\", \"freshness_threshold\", \"low_flap_threshold\", \"high_flap_threshold\", \"freshness_checked\", \"active_check_enabled\", \"passive_check_enabled\", \"notification_enabled\", \"flap_detection_enabled\", \"event_handler_enabled\", \"check_command_args\", \"event_handler_command_args\", \"categories\", \"groups\", \"templates\", \"macros\", \"add_inherited_contact_group\", \"add_inherited_contact\", \"is_activated\"]\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Host1Name}}\",\r\n    \"alias\": \"{{Host1Alias}}\",\r\n    \"address\": \"999.99.99.99\",\r\n    \"monitoring_server_id\": 1,\r\n    \"normal_check_interval\": 3,\r\n    \"templates\": [ {{HostTemplate1Id}} ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a second host",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Host2Name\", \"host_2\");\r",
									"pm.collectionVariables.set(\"Host2Alias\", \"I'm the second host created by admin\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Host2Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host2Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host\r",
									"    pm.collectionVariables.set(\"Host2Id\", responseJson.id);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"Host2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host2Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"Host2Alias\"),\r",
									"        \"address\": \"999.99.99.99\",\r",
									"        \"monitoring_server_id\": 1,\r",
									"        \"snmp_version\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"note_url\": null,\r",
									"        \"note\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_alternative\": null,\r",
									"        \"comment\": null,\r",
									"        \"timezone_id\": null,\r",
									"        \"severity_id\": null,\r",
									"        \"check_command_id\": null,\r",
									"        \"check_timeperiod_id\": null,\r",
									"        \"notification_timeperiod_id\": null,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"max_check_attempts\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"notification_options\": null,\r",
									"        \"notification_interval\": null,\r",
									"        \"first_notification_delay\": null,\r",
									"        \"recovery_notification_delay\": null,\r",
									"        \"acknowledgement_timeout\": null,\r",
									"        \"freshness_threshold\": null,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"active_check_enabled\": 2,\r",
									"        \"passive_check_enabled\": 2,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"check_command_args\": [],\r",
									"        \"event_handler_command_args\": [],\r",
									"        \"categories\": [],\r",
									"        \"groups\": [],\r",
									"        \"templates\": [\r",
									"            {\r",
									"                \"id\": pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
									"                \"name\": pm.collectionVariables.get(\"HostTemplate1Name\"),\r",
									"            }\r",
									"        ],\r",
									"        \"macros\": [],\r",
									"        \"add_inherited_contact_group\": false,\r",
									"        \"add_inherited_contact\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the host creation response\", function () {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            id: { type: \"integer\" },\r",
									"            name: { type: \"string\" },\r",
									"            alias: { type: [\"string\", \"null\"] },\r",
									"            address: { type: \"string\" },\r",
									"            monitoring_server_id: { type: \"integer\" },\r",
									"            snmp_version: { type: [\"string\", \"null\"] },\r",
									"            timezone_id: { type: [\"integer\", \"null\"] },\r",
									"            severity_id: { type: [\"integer\", \"null\"] },\r",
									"            check_command_id: { type: [\"integer\", \"null\"] },\r",
									"            check_timeperiod_id: { type: [\"integer\", \"null\"] },\r",
									"            note_url: { type: [\"string\", \"null\"] },\r",
									"            note: { type: [\"string\", \"null\"] },\r",
									"            action_url: { type: [\"string\", \"null\"] },\r",
									"            max_check_attempts: { type: [\"integer\", \"null\"] },\r",
									"            normal_check_interval: { type: [\"integer\", \"null\"] },\r",
									"            retry_check_interval: { type: [\"integer\", \"null\"] },\r",
									"            active_check_enabled: { type: \"integer\" },\r",
									"            passive_check_enabled: { type: \"integer\" },\r",
									"            notification_enabled: { type: \"integer\" },\r",
									"            notification_options: { type: [\"integer\", \"null\"] },\r",
									"            notification_interval: { type: [\"integer\", \"null\"] },\r",
									"            notification_timeperiod_id: { type: [\"integer\", \"null\"] },\r",
									"            add_inherited_contact_group: { type: \"boolean\" },\r",
									"            add_inherited_contact: { type: \"boolean\" },\r",
									"            first_notification_delay: { type: [\"integer\", \"null\"] },\r",
									"            recovery_notification_delay: { type: [\"integer\", \"null\"] },\r",
									"            acknowledgement_timeout: { type: [\"integer\", \"null\"] },\r",
									"            freshness_checked: { type: \"integer\" },\r",
									"            freshness_threshold: { type: [\"integer\", \"null\"] },\r",
									"            flap_detection_enabled: { type: \"integer\" },\r",
									"            low_flap_threshold: { type: [\"integer\", \"null\"] },\r",
									"            high_flap_threshold: { type: [\"integer\", \"null\"] },\r",
									"            event_handler_enabled: { type: \"integer\" },\r",
									"            event_handler_command_id: { type: [\"integer\", \"null\"] },\r",
									"            icon_id: { type: [\"integer\", \"null\"] },\r",
									"            icon_alternative: { type: [\"string\", \"null\"] },\r",
									"            comment: { type: [\"string\", \"null\"] },\r",
									"            geo_coords: { type: [\"string\", \"null\"] },\r",
									"            is_activated: { type: \"boolean\" },\r",
									"            check_command_args: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"string\"\r",
									"                }\r",
									"            },\r",
									"            event_handler_command_args: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"string\"\r",
									"                }\r",
									"            },\r",
									"            categories: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            templates: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            groups: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            macros: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        required: [\"id\", \"monitoring_server_id\", \"name\", \"address\", \"alias\", \"snmp_version\", \"geo_coords\", \"note_url\", \"note\", \"action_url\", \"icon_alternative\", \"comment\", \"timezone_id\", \"severity_id\", \"check_command_id\", \"check_timeperiod_id\", \"notification_timeperiod_id\", \"event_handler_command_id\", \"icon_id\", \"max_check_attempts\", \"normal_check_interval\", \"retry_check_interval\", \"notification_options\", \"notification_interval\", \"first_notification_delay\", \"recovery_notification_delay\", \"acknowledgement_timeout\", \"freshness_threshold\", \"low_flap_threshold\", \"high_flap_threshold\", \"freshness_checked\", \"active_check_enabled\", \"passive_check_enabled\", \"notification_enabled\", \"flap_detection_enabled\", \"event_handler_enabled\", \"check_command_args\", \"event_handler_command_args\", \"categories\", \"groups\", \"templates\", \"macros\", \"add_inherited_contact_group\", \"add_inherited_contact\", \"is_activated\"]\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Host2Name}}\",\r\n    \"alias\": \"{{Host2Alias}}\",\r\n    \"address\": \"999.99.99.99\",\r\n    \"monitoring_server_id\": 1,\r\n    \"templates\": [ {{HostTemplate1Id}} ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Export the configuration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The configuration has successfully been reloaded.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/generate-and-reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"generate-and-reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the hosts are monitored by admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"expectedHttpStatus\", 200);\r",
									"pm.collectionVariables.set(\"maxNumberOfTries\", 10);\r",
									"pm.collectionVariables.set(\"sleepBetweenTries\", 2000);\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"if (!pm.collectionVariables.get(\"collection_tries\")) {\r",
									"    pm.collectionVariables.set(\"collection_tries\", 1);\r",
									"}\r",
									"\r",
									"if ((pm.collectionVariables.get(\"collection_tries\") < pm.collectionVariables.get(\"maxNumberOfTries\") && responseJson.result.length < 2) || (pm.response.code !== pm.collectionVariables.get(\"expectedHttpStatus\"))) {\r",
									"    var tries = parseInt(pm.collectionVariables.get(\"collection_tries\"));\r",
									"    pm.collectionVariables.set(\"collection_tries\", tries + 1);\r",
									"    setTimeout(function () { }, pm.collectionVariables.get(\"sleepBetweenTries\"));\r",
									"    postman.setNextRequest(\"Check the hosts are monitored by admin (successful)\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"collection_tries\");\r",
									"\r",
									"    pm.test(\"Hosts are successfully monitored\", function () {\r",
									"        pm.response.to.have.status(pm.collectionVariables.get(\"expectedHttpStatus\"));\r",
									"\r",
									"        pm.expect(responseJson.result.length).to.eql(2);\r",
									"        pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"Host1Name\"));\r",
									"        pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"Host2Name\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Schema validation for monitoring response is successful\", function () {\r",
									"        const schema = {\r",
									"            type: \"object\",\r",
									"            properties: {\r",
									"                result: {\r",
									"                    type: \"array\",\r",
									"                    items: {\r",
									"                        type: \"object\",\r",
									"                        properties: {\r",
									"                            id: { type: \"integer\" },\r",
									"                            poller_id: { type: \"integer\" },\r",
									"                            name: { type: \"string\" },\r",
									"                            acknowledged: { type: \"boolean\" },\r",
									"                            address_ip: { type: \"string\" },\r",
									"                            alias: { type: \"string\" },\r",
									"                            check_attempt: { type: \"integer\" },\r",
									"                            checked: { type: \"boolean\" },\r",
									"                            display_name: { type: \"string\" },\r",
									"                            execution_time: { type: [\"number\", \"null\"] },\r",
									"                            icon_image: { type: \"string\" },\r",
									"                            icon_image_alt: { type: \"string\" },\r",
									"                            last_check: { type: [\"string\", \"null\"] },\r",
									"                            last_hard_state_change: { type: [\"string\", \"null\"] },\r",
									"                            last_state_change: { type: [\"string\", \"null\"] },\r",
									"                            last_time_down: { type: [\"string\", \"null\"] },\r",
									"                            last_time_unreachable: { type: [\"string\", \"null\"] },\r",
									"                            last_time_up: { type: [\"string\", \"null\"] },\r",
									"                            last_update: { type: [\"string\", \"null\"] },\r",
									"                            max_check_attempts: { type: \"integer\" },\r",
									"                            output: { type: \"string\" },\r",
									"                            passive_checks: { type: \"boolean\" },\r",
									"                            state: { type: \"integer\" },\r",
									"                            state_type: { type: \"integer\" },\r",
									"                            timezone: { type: \"string\" },\r",
									"                            scheduled_downtime_depth: { type: \"integer\" },\r",
									"                            criticality: { type: [\"integer\", \"null\"] }\r",
									"                        },\r",
									"                        required: [\"id\", \"poller_id\", \"name\", \"acknowledged\", \"address_ip\", \"alias\", \"check_attempt\", \"checked\", \"display_name\", \"execution_time\", \"icon_image\", \"icon_image_alt\", \"last_check\", \"last_hard_state_change\", \"last_state_change\", \"last_time_down\", \"last_time_unreachable\", \"last_time_up\", \"last_update\", \"max_check_attempts\", \"output\", \"passive_checks\", \"state\", \"state_type\", \"timezone\", \"scheduled_downtime_depth\", \"criticality\"]\r",
									"                    }\r",
									"                },\r",
									"                meta: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        page: { type: \"integer\" },\r",
									"                        limit: { type: \"integer\" },\r",
									"                        search: {\r",
									"                            type: \"object\",\r",
									"                            properties: {\r",
									"                                $and: {\r",
									"                                    type: \"object\",\r",
									"                                    properties: {\r",
									"                                        \"host.name\": { type: \"object\" }\r",
									"                                    }\r",
									"                                }\r",
									"                            }\r",
									"                        },\r",
									"                        sort_by: { type: \"object\" },\r",
									"                        total: { type: \"integer\" }\r",
									"                    },\r",
									"                    required: [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"                }\r",
									"            },\r",
									"            required: [\"result\", \"meta\"]\r",
									"        };\r",
									"\r",
									"        pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"    });\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts?sort_by={\"host.name\":\"ASC\"}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts"
							],
							"query": [
								{
									"key": "sort_by",
									"value": "{\"host.name\":\"ASC\"}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check a host is monitored with filter by admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"if (!pm.collectionVariables.get(\"collection_tries\")) {\r",
									"    pm.collectionVariables.set(\"collection_tries\", 1);\r",
									"}\r",
									"\r",
									"if ((pm.collectionVariables.get(\"collection_tries\") < pm.collectionVariables.get(\"maxNumberOfTries\") && responseJson.result.length == 0) || (pm.response.code !== pm.collectionVariables.get(\"expectedHttpStatus\"))) {\r",
									"    var tries = parseInt(pm.collectionVariables.get(\"collection_tries\"));\r",
									"    pm.collectionVariables.set(\"collection_tries\", tries + 1);\r",
									"    setTimeout(function () { }, pm.collectionVariables.get(\"sleepBetweenTries\"));\r",
									"    postman.setNextRequest(\"Check a host is monitored with filter by admin (successful)\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"collection_tries\");\r",
									"\r",
									"    pm.test(\"The host is successfully listed\", function () {\r",
									"        pm.response.to.have.status(pm.collectionVariables.get(\"expectedHttpStatus\"));\r",
									"\r",
									"        pm.expect(responseJson.result.length).to.eql(1);\r",
									"        pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"Host2Name\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Schema validation for monitoring response is successful\", function () {\r",
									"        const schema = {\r",
									"            type: \"object\",\r",
									"            properties: {\r",
									"                result: {\r",
									"                    type: \"array\",\r",
									"                    items: {\r",
									"                        type: \"object\",\r",
									"                        properties: {\r",
									"                            id: { type: \"integer\" },\r",
									"                            poller_id: { type: \"integer\" },\r",
									"                            name: { type: \"string\" },\r",
									"                            acknowledged: { type: \"boolean\" },\r",
									"                            address_ip: { type: \"string\" },\r",
									"                            alias: { type: \"string\" },\r",
									"                            check_attempt: { type: \"integer\" },\r",
									"                            checked: { type: \"boolean\" },\r",
									"                            display_name: { type: \"string\" },\r",
									"                            execution_time: { type: [\"number\", \"null\"] },\r",
									"                            icon_image: { type: \"string\" },\r",
									"                            icon_image_alt: { type: \"string\" },\r",
									"                            last_check: { type: [\"string\", \"null\"] },\r",
									"                            last_hard_state_change: { type: [\"string\", \"null\"] },\r",
									"                            last_state_change: { type: [\"string\", \"null\"] },\r",
									"                            last_time_down: { type: [\"string\", \"null\"] },\r",
									"                            last_time_unreachable: { type: [\"string\", \"null\"] },\r",
									"                            last_time_up: { type: [\"string\", \"null\"] },\r",
									"                            last_update: { type: [\"string\", \"null\"] },\r",
									"                            max_check_attempts: { type: \"integer\" },\r",
									"                            output: { type: \"string\" },\r",
									"                            passive_checks: { type: \"boolean\" },\r",
									"                            state: { type: \"integer\" },\r",
									"                            state_type: { type: \"integer\" },\r",
									"                            timezone: { type: \"string\" },\r",
									"                            scheduled_downtime_depth: { type: \"integer\" },\r",
									"                            criticality: { type: [\"integer\", \"null\"] }\r",
									"                        },\r",
									"                        required: [\"id\", \"poller_id\", \"name\", \"acknowledged\", \"address_ip\", \"alias\", \"check_attempt\", \"checked\", \"display_name\", \"execution_time\", \"icon_image\", \"icon_image_alt\", \"last_check\", \"last_hard_state_change\", \"last_state_change\", \"last_time_down\", \"last_time_unreachable\", \"last_time_up\", \"last_update\", \"max_check_attempts\", \"output\", \"passive_checks\", \"state\", \"state_type\", \"timezone\", \"scheduled_downtime_depth\", \"criticality\"]\r",
									"                    }\r",
									"                },\r",
									"                meta: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        page: { type: \"integer\" },\r",
									"                        limit: { type: \"integer\" },\r",
									"                        search: {\r",
									"                            type: \"object\",\r",
									"                            properties: {\r",
									"                                $and: {\r",
									"                                    type: \"object\",\r",
									"                                    properties: {\r",
									"                                        \"host.name\": { type: \"object\" }\r",
									"                                    }\r",
									"                                }\r",
									"                            }\r",
									"                        },\r",
									"                        sort_by: { type: \"object\" },\r",
									"                        total: { type: \"integer\" }\r",
									"                    },\r",
									"                    required: [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"                }\r",
									"            },\r",
									"            required: [\"result\", \"meta\"]\r",
									"        };\r",
									"\r",
									"        pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"    });\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts?search={\"host.name\":{\"$rg\":\"{{Host2Name}}\"}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts"
							],
							"query": [
								{
									"key": "search",
									"value": "{\"host.name\":{\"$rg\":\"{{Host2Name}}\"}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "0102 - Creation user-non-admin",
			"item": [
				{
					"name": "Add user-non-admin (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_non_admin\", \"user-non-admin\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_non_admin}};{{api_login_user_non_admin}};{{api_login_user_non_admin}}@localhost;Centreon!123;0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_non_admin}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_non_admin}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group ACL-non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ACL-non-admin;ACL-non-admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to ACL-non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ACL-non-admin;{{api_login_user_non_admin}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu RS (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RS;RS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RW right to RS (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Read/Write rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n\"values\": \"RS;1;Monitoring\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RS to ACL-non-admin(successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ACL-non-admin;RS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "0103 - Host Monitoring by user without access to Ressources",
			"item": [
				{
					"name": "Login with user-non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get(\"api_login_user_non_admin\"));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_non_admin}}\",\r\n      \"password\": \"Centreon!123\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the hosts are monitored",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"No monitored hosts are listed.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.result.length).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for monitoring response is successful\", function () {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            result: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        poller_id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" },\r",
									"                        acknowledged: { type: \"boolean\" },\r",
									"                        address_ip: { type: \"string\" },\r",
									"                        alias: { type: \"string\" },\r",
									"                        check_attempt: { type: \"integer\" },\r",
									"                        checked: { type: \"boolean\" },\r",
									"                        display_name: { type: \"string\" },\r",
									"                        execution_time: { type: [\"number\", \"null\"] },\r",
									"                        icon_image: { type: \"string\" },\r",
									"                        icon_image_alt: { type: \"string\" },\r",
									"                        last_check: { type: [\"string\", \"null\"] },\r",
									"                        last_hard_state_change: { type: [\"string\", \"null\"] },\r",
									"                        last_state_change: { type: [\"string\", \"null\"] },\r",
									"                        last_time_down: { type: [\"string\", \"null\"] },\r",
									"                        last_time_unreachable: { type: [\"string\", \"null\"] },\r",
									"                        last_time_up: { type: [\"string\", \"null\"] },\r",
									"                        last_update: { type: [\"string\", \"null\"] },\r",
									"                        max_check_attempts: { type: \"integer\" },\r",
									"                        output: { type: \"string\" },\r",
									"                        passive_checks: { type: \"boolean\" },\r",
									"                        state: { type: \"integer\" },\r",
									"                        state_type: { type: \"integer\" },\r",
									"                        timezone: { type: \"string\" },\r",
									"                        scheduled_downtime_depth: { type: \"integer\" },\r",
									"                        criticality: { type: [\"integer\", \"null\"] }\r",
									"                    },\r",
									"                    required: [\"id\", \"poller_id\", \"name\", \"acknowledged\", \"address_ip\", \"alias\", \"check_attempt\", \"checked\", \"display_name\", \"execution_time\", \"icon_image\", \"icon_image_alt\", \"last_check\", \"last_hard_state_change\", \"last_state_change\", \"last_time_down\", \"last_time_unreachable\", \"last_time_up\", \"last_update\", \"max_check_attempts\", \"output\", \"passive_checks\", \"state\", \"state_type\", \"timezone\", \"scheduled_downtime_depth\", \"criticality\"]\r",
									"                }\r",
									"            },\r",
									"            meta: {\r",
									"                type: \"object\",\r",
									"                properties: {\r",
									"                    page: { type: \"integer\" },\r",
									"                    limit: { type: \"integer\" },\r",
									"                    search: {\r",
									"                        type: \"object\",\r",
									"                        properties: {\r",
									"                            $and: {\r",
									"                                type: \"object\",\r",
									"                                properties: {\r",
									"                                    \"host.name\": { type: \"object\" }\r",
									"                                }\r",
									"                            }\r",
									"                        }\r",
									"                    },\r",
									"                    sort_by: { type: \"object\" },\r",
									"                    total: { type: \"integer\" }\r",
									"                },\r",
									"                required: [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"            }\r",
									"        },\r",
									"        required: [\"result\", \"meta\"]\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check one host is monitored",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host is not listed.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.result.length).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for monitoring response is successful\", function () {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            result: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        poller_id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" },\r",
									"                        acknowledged: { type: \"boolean\" },\r",
									"                        address_ip: { type: \"string\" },\r",
									"                        alias: { type: \"string\" },\r",
									"                        check_attempt: { type: \"integer\" },\r",
									"                        checked: { type: \"boolean\" },\r",
									"                        display_name: { type: \"string\" },\r",
									"                        execution_time: { type: [\"number\", \"null\"] },\r",
									"                        icon_image: { type: \"string\" },\r",
									"                        icon_image_alt: { type: \"string\" },\r",
									"                        last_check: { type: [\"string\", \"null\"] },\r",
									"                        last_hard_state_change: { type: [\"string\", \"null\"] },\r",
									"                        last_state_change: { type: [\"string\", \"null\"] },\r",
									"                        last_time_down: { type: [\"string\", \"null\"] },\r",
									"                        last_time_unreachable: { type: [\"string\", \"null\"] },\r",
									"                        last_time_up: { type: [\"string\", \"null\"] },\r",
									"                        last_update: { type: [\"string\", \"null\"] },\r",
									"                        max_check_attempts: { type: \"integer\" },\r",
									"                        output: { type: \"string\" },\r",
									"                        passive_checks: { type: \"boolean\" },\r",
									"                        state: { type: \"integer\" },\r",
									"                        state_type: { type: \"integer\" },\r",
									"                        timezone: { type: \"string\" },\r",
									"                        scheduled_downtime_depth: { type: \"integer\" },\r",
									"                        criticality: { type: [\"integer\", \"null\"] }\r",
									"                    },\r",
									"                    required: [\"id\", \"poller_id\", \"name\", \"acknowledged\", \"address_ip\", \"alias\", \"check_attempt\", \"checked\", \"display_name\", \"execution_time\", \"icon_image\", \"icon_image_alt\", \"last_check\", \"last_hard_state_change\", \"last_state_change\", \"last_time_down\", \"last_time_unreachable\", \"last_time_up\", \"last_update\", \"max_check_attempts\", \"output\", \"passive_checks\", \"state\", \"state_type\", \"timezone\", \"scheduled_downtime_depth\", \"criticality\"]\r",
									"                }\r",
									"            },\r",
									"            meta: {\r",
									"                type: \"object\",\r",
									"                properties: {\r",
									"                    page: { type: \"integer\" },\r",
									"                    limit: { type: \"integer\" },\r",
									"                    search: {\r",
									"                        type: \"object\",\r",
									"                        properties: {\r",
									"                            $and: {\r",
									"                                type: \"object\",\r",
									"                                properties: {\r",
									"                                    \"host.name\": { type: \"object\" }\r",
									"                                }\r",
									"                            }\r",
									"                        }\r",
									"                    },\r",
									"                    sort_by: { type: \"object\" },\r",
									"                    total: { type: \"integer\" }\r",
									"                },\r",
									"                required: [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"            }\r",
									"        },\r",
									"        required: [\"result\", \"meta\"]\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts?search={\"host.name\":{\"$rg\":\"{{Host2Name}}\"}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts"
							],
							"query": [
								{
									"key": "search",
									"value": "{\"host.name\":{\"$rg\":\"{{Host2Name}}\"}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from non-admin-user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "0104 - Host Monitoring by user-non-admin with access to resources",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link All Resources to ACL-non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ACL-non-admin;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload ACL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL has been reloaded.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"reload\",\r\n  \"object\": \"ACL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with user-non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get(\"api_login_user_non_admin\"));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_non_admin}}\",\r\n      \"password\": \"Centreon!123\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the hosts are monitored by user non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"if (!pm.collectionVariables.get(\"collection_tries\")) {\r",
									"    pm.collectionVariables.set(\"collection_tries\", 1);\r",
									"}\r",
									"\r",
									"if ((pm.collectionVariables.get(\"collection_tries\") < pm.collectionVariables.get(\"maxNumberOfTries\") && responseJson.result.length == 0) || (pm.response.code !== pm.collectionVariables.get(\"expectedHttpStatus\"))) {\r",
									"    var tries = parseInt(pm.collectionVariables.get(\"collection_tries\"));\r",
									"    pm.collectionVariables.set(\"collection_tries\", tries + 1);\r",
									"    setTimeout(function () { }, pm.collectionVariables.get(\"sleepBetweenTries\"));\r",
									"    postman.setNextRequest(\"Check the hosts are monitored by user non-admin (successful)\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"collection_tries\");\r",
									"\r",
									"    pm.test(\"Both hosts are successfully monitored\", function () {\r",
									"        pm.response.to.have.status(pm.collectionVariables.get(\"expectedHttpStatus\"));\r",
									"\r",
									"        pm.expect(responseJson.result.length).to.eql(2);\r",
									"        pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"Host1Name\"));\r",
									"        pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"Host2Name\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Schema validation for monitoring response is successful\", function () {\r",
									"        const schema = {\r",
									"            type: \"object\",\r",
									"            properties: {\r",
									"                result: {\r",
									"                    type: \"array\",\r",
									"                    items: {\r",
									"                        type: \"object\",\r",
									"                        properties: {\r",
									"                            id: { type: \"integer\" },\r",
									"                            poller_id: { type: \"integer\" },\r",
									"                            name: { type: \"string\" },\r",
									"                            acknowledged: { type: \"boolean\" },\r",
									"                            address_ip: { type: \"string\" },\r",
									"                            alias: { type: \"string\" },\r",
									"                            check_attempt: { type: \"integer\" },\r",
									"                            checked: { type: \"boolean\" },\r",
									"                            display_name: { type: \"string\" },\r",
									"                            execution_time: { type: [\"number\", \"null\"] },\r",
									"                            icon_image: { type: \"string\" },\r",
									"                            icon_image_alt: { type: \"string\" },\r",
									"                            last_check: { type: [\"string\", \"null\"] },\r",
									"                            last_hard_state_change: { type: [\"string\", \"null\"] },\r",
									"                            last_state_change: { type: [\"string\", \"null\"] },\r",
									"                            last_time_down: { type: [\"string\", \"null\"] },\r",
									"                            last_time_unreachable: { type: [\"string\", \"null\"] },\r",
									"                            last_time_up: { type: [\"string\", \"null\"] },\r",
									"                            last_update: { type: [\"string\", \"null\"] },\r",
									"                            max_check_attempts: { type: \"integer\" },\r",
									"                            output: { type: \"string\" },\r",
									"                            passive_checks: { type: \"boolean\" },\r",
									"                            state: { type: \"integer\" },\r",
									"                            state_type: { type: \"integer\" },\r",
									"                            timezone: { type: \"string\" },\r",
									"                            scheduled_downtime_depth: { type: \"integer\" },\r",
									"                            criticality: { type: [\"integer\", \"null\"] }\r",
									"                        },\r",
									"                        required: [\"id\", \"poller_id\", \"name\", \"acknowledged\", \"address_ip\", \"alias\", \"check_attempt\", \"checked\", \"display_name\", \"execution_time\", \"icon_image\", \"icon_image_alt\", \"last_check\", \"last_hard_state_change\", \"last_state_change\", \"last_time_down\", \"last_time_unreachable\", \"last_time_up\", \"last_update\", \"max_check_attempts\", \"output\", \"passive_checks\", \"state\", \"state_type\", \"timezone\", \"scheduled_downtime_depth\", \"criticality\"]\r",
									"                    }\r",
									"                },\r",
									"                meta: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        page: { type: \"integer\" },\r",
									"                        limit: { type: \"integer\" },\r",
									"                        search: {\r",
									"                            type: \"object\",\r",
									"                            properties: {\r",
									"                                $and: {\r",
									"                                    type: \"object\",\r",
									"                                    properties: {\r",
									"                                        \"host.name\": { type: \"object\" }\r",
									"                                    }\r",
									"                                }\r",
									"                            }\r",
									"                        },\r",
									"                        sort_by: { type: \"object\" },\r",
									"                        total: { type: \"integer\" }\r",
									"                    },\r",
									"                    required: [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"                }\r",
									"            },\r",
									"            required: [\"result\", \"meta\"]\r",
									"        };\r",
									"\r",
									"        pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check a host is monitored with filter by user non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"if (!pm.collectionVariables.get(\"collection_tries\")) {\r",
									"    pm.collectionVariables.set(\"collection_tries\", 1);\r",
									"}\r",
									"\r",
									"if ((pm.collectionVariables.get(\"collection_tries\") < pm.collectionVariables.get(\"maxNumberOfTries\") && responseJson.result.length == 0) || (pm.response.code !== pm.collectionVariables.get(\"expectedHttpStatus\"))) {\r",
									"    var tries = parseInt(pm.collectionVariables.get(\"collection_tries\"));\r",
									"    pm.collectionVariables.set(\"collection_tries\", tries + 1);\r",
									"    setTimeout(function () { }, pm.collectionVariables.get(\"sleepBetweenTries\"));\r",
									"    postman.setNextRequest(\"Check a host is monitored with filter by user non-admin (successful)\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"collection_tries\");\r",
									"\r",
									"    pm.test(\"The host is successfully listed\", function () {\r",
									"        pm.response.to.have.status(pm.collectionVariables.get(\"expectedHttpStatus\"));\r",
									"\r",
									"        pm.expect(responseJson.result.length).to.eql(1);\r",
									"        pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"Host1Name\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Schema validation for monitoring response is successful\", function () {\r",
									"        const schema = {\r",
									"            type: \"object\",\r",
									"            properties: {\r",
									"                result: {\r",
									"                    type: \"array\",\r",
									"                    items: {\r",
									"                        type: \"object\",\r",
									"                        properties: {\r",
									"                            id: { type: \"integer\" },\r",
									"                            poller_id: { type: \"integer\" },\r",
									"                            name: { type: \"string\" },\r",
									"                            acknowledged: { type: \"boolean\" },\r",
									"                            address_ip: { type: \"string\" },\r",
									"                            alias: { type: \"string\" },\r",
									"                            check_attempt: { type: \"integer\" },\r",
									"                            checked: { type: \"boolean\" },\r",
									"                            display_name: { type: \"string\" },\r",
									"                            execution_time: { type: [\"number\", \"null\"] },\r",
									"                            icon_image: { type: \"string\" },\r",
									"                            icon_image_alt: { type: \"string\" },\r",
									"                            last_check: { type: [\"string\", \"null\"] },\r",
									"                            last_hard_state_change: { type: [\"string\", \"null\"] },\r",
									"                            last_state_change: { type: [\"string\", \"null\"] },\r",
									"                            last_time_down: { type: [\"string\", \"null\"] },\r",
									"                            last_time_unreachable: { type: [\"string\", \"null\"] },\r",
									"                            last_time_up: { type: [\"string\", \"null\"] },\r",
									"                            last_update: { type: [\"string\", \"null\"] },\r",
									"                            max_check_attempts: { type: \"integer\" },\r",
									"                            output: { type: \"string\" },\r",
									"                            passive_checks: { type: \"boolean\" },\r",
									"                            state: { type: \"integer\" },\r",
									"                            state_type: { type: \"integer\" },\r",
									"                            timezone: { type: \"string\" },\r",
									"                            scheduled_downtime_depth: { type: \"integer\" },\r",
									"                            criticality: { type: [\"integer\", \"null\"] }\r",
									"                        },\r",
									"                        required: [\"id\", \"poller_id\", \"name\", \"acknowledged\", \"address_ip\", \"alias\", \"check_attempt\", \"checked\", \"display_name\", \"execution_time\", \"icon_image\", \"icon_image_alt\", \"last_check\", \"last_hard_state_change\", \"last_state_change\", \"last_time_down\", \"last_time_unreachable\", \"last_time_up\", \"last_update\", \"max_check_attempts\", \"output\", \"passive_checks\", \"state\", \"state_type\", \"timezone\", \"scheduled_downtime_depth\", \"criticality\"]\r",
									"                    }\r",
									"                },\r",
									"                meta: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        page: { type: \"integer\" },\r",
									"                        limit: { type: \"integer\" },\r",
									"                        search: {\r",
									"                            type: \"object\",\r",
									"                            properties: {\r",
									"                                $and: {\r",
									"                                    type: \"object\",\r",
									"                                    properties: {\r",
									"                                        \"host.name\": { type: \"object\" }\r",
									"                                    }\r",
									"                                }\r",
									"                            }\r",
									"                        },\r",
									"                        sort_by: { type: \"object\" },\r",
									"                        total: { type: \"integer\" }\r",
									"                    },\r",
									"                    required: [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"                }\r",
									"            },\r",
									"            required: [\"result\", \"meta\"]\r",
									"        };\r",
									"\r",
									"        pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts?search={\"host.name\":{\"$rg\":\"{{Host1Name}}\"}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts"
							],
							"query": [
								{
									"key": "search",
									"value": "{\"host.name\":{\"$rg\":\"{{Host1Name}}\"}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from non-admin-user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}