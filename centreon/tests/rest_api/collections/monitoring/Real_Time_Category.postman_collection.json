{
	"info": {
		"_postman_id": "1d8599ff-9611-451a-b0a8-219c3395edb4",
		"name": "Real_Time_Category",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16182525",
		"_collection_link": "https://centreon-api-testing.postman.co/workspace/Migration-of-%2522behat%2522-tests~e335ae07-f9ab-4b8d-bc6c-19b9f0078df4/collection/16182525-1d8599ff-9611-451a-b0a8-219c3395edb4?action=share&source=collection_link&creator=16182525"
	},
	"item": [
		{
			"name": "0101 - Real Time Category By admin",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a command",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The command has been successfully created, with name '\" + pm.collectionVariables.get(\"Command1Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new command \r",
									"    pm.collectionVariables.set(\"CommandId\", responseJson.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Command1Name\", \"command_1\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Command1Name}}\",\r\n    \"type\": 2,\r\n    \"command_line\": \"$USER1$/check_icmp -H $HOSTADDRESS$ -w 3000.0,80% -c 5000.0,100% -p 1\",\r\n    \"is_shell\": false\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/commands",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"commands"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a host template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host template has been successfully created, with name '\" + pm.collectionVariables.get(\"HostTemplate1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostTemplate1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host template\r",
									"    pm.collectionVariables.set(\"HostTemplate1Id\", responseJson.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostTemplate1Name\", \"host_template_1\");\r",
									"pm.collectionVariables.set(\"HostTemplate1Alias\", \"I'm the first host template created by admin\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"{{HostTemplate1Name}}\",\r\n\"alias\": \"{{HostTemplate1Alias}}\",\r\n\"check_command_id\": {{CommandId}},\r\n\"max_check_attempts\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a service template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The service template has been successfully created, with name '\" + pm.collectionVariables.get(\"ServiceTemplate1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceTemplate1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service template\r",
									"    pm.collectionVariables.set(\"ServiceTemplate1Id\", responseJson.id);\r",
									"\r",
									"    pm.expect(responseJson).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"ServiceTemplate1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"ServiceTemplate1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"ServiceTemplate1Alias\"),\r",
									"        \"comment\": null,\r",
									"        \"service_template_id\": null,\r",
									"        \"check_command_id\": pm.collectionVariables.get('CommandId'),\r",
									"        \"check_timeperiod_id\": null,\r",
									"        \"max_check_attempts\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"active_check_enabled\": 2,\r",
									"        \"passive_check_enabled\": 2,\r",
									"        \"volatility_enabled\": 2,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"is_contact_additive_inheritance\": false,\r",
									"        \"is_contact_group_additive_inheritance\": false,\r",
									"        \"notification_interval\": null,\r",
									"        \"notification_timeperiod_id\": null,\r",
									"        \"notification_type\": null,\r",
									"        \"first_notification_delay\": null,\r",
									"        \"recovery_notification_delay\": null,\r",
									"        \"acknowledgement_timeout\": null,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"freshness_threshold\": null,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"graph_template_id\": null,\r",
									"        \"note\": null,\r",
									"        \"note_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_alternative\": null,\r",
									"        \"severity_id\": null,\r",
									"        \"is_locked\": false\r",
									"    });\r",
									"    pm.expect(responseJson.check_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.host_templates).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.macros).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.groups).to.be.an('Array').that.is.empty;\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"ServiceTemplate1Name\", \"service_template_1\");\r",
									"pm.collectionVariables.set(\"ServiceTemplate1Alias\", \"I-m a first service template\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"{{ServiceTemplate1Name}}\",\r\n\"alias\": \"{{ServiceTemplate1Alias}}\",\r\n\"check_command_id\": {{CommandId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a first host Category (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostCategory1Name\", \"Test_H_Category_1\");\r",
									"pm.collectionVariables.set(\"HostCategory1Alias\", \"I'm a host Category!\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host Category has been successfully created, with name '\" + pm.collectionVariables.get(\"HostCategory1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostCategory1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host Category\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"HostCategory1Id\", response.id);\r",
									"    \r",
									"    pm.expect(response).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostCategory1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostCategory1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostCategory1Alias\"),\r",
									"        \"is_activated\": true,\r",
									"        \"comment\":\"I look like a category\"\r",
									"    });\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{HostCategory1Name}}\",\r\n    \"alias\":\"{{HostCategory1Alias}}\",\r\n    \"is_activated\": true,\r\n    \"comment\":\"I look like a category\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a second host Category (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostCategory2Name\", \"Test_H_Category_2\");\r",
									"pm.collectionVariables.set(\"HostCategory2Alias\", \"I'm a host Category!\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host Category has been successfully created, with name '\" + pm.collectionVariables.get(\"HostCategory2Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostCategory2Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host Category\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"HostCategory2Id\", response.id);\r",
									"    \r",
									"    pm.expect(response).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostCategory2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostCategory2Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostCategory2Alias\"),\r",
									"        \"is_activated\": true,\r",
									"        \"comment\":\"I look like a category\"\r",
									"    });\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{HostCategory2Name}}\",\r\n    \"alias\":\"{{HostCategory2Alias}}\",\r\n    \"is_activated\": true,\r\n    \"comment\":\"I look like a category\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a third host Category disabled (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostCategory3Name\", \"Test_H_Category_3\");\r",
									"pm.collectionVariables.set(\"HostCategory3Alias\", \"I'm a host Category!\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host Category has been successfully created, with name '\" + pm.collectionVariables.get(\"HostCategory3Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostCategory3Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host Category\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"HostCategory3Id\", response.id);\r",
									"    \r",
									"    pm.expect(response).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostCategory3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostCategory3Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostCategory3Alias\"),\r",
									"        \"is_activated\": false,\r",
									"        \"comment\":\"I look like a category\"\r",
									"    });\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{HostCategory3Name}}\",\r\n    \"alias\":\"{{HostCategory3Alias}}\",\r\n    \"is_activated\": false,\r\n    \"comment\":\"I look like a category\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a first service Category (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"ServiceCategory1Name\", \"Test_S_Category_1\");\r",
									"pm.collectionVariables.set(\"ServiceCategory1Alias\", \"I'm a service Category!\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service sCategoryverity has been successfully created, with name '\" + pm.collectionVariables.get(\"ServiceCategory1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceCategory1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service severity\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"ServiceCategory1Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"ServiceCategory1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"ServiceCategory1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"ServiceCategory1Alias\"),\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{ServiceCategory1Name}}\",\r\n    \"alias\":\"{{ServiceCategory1Alias}}\",\r\n    \"is_activated\": true\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a second service Category (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"ServiceCategory2Name\", \"Test_S_Category_2\");\r",
									"pm.collectionVariables.set(\"ServiceCategory2Alias\", \"I'm a service Category!\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service Category has been successfully created, with name '\" + pm.collectionVariables.get(\"ServiceCategory2Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceCategory2Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service Category\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"ServiceCategory2Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"ServiceCategory2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"ServiceCategory2Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"ServiceCategory2Alias\"),\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{ServiceCategory2Name}}\",\r\n    \"alias\":\"{{ServiceCategory2Alias}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a third service Category (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"ServiceCategory3Name\", \"Test_S_Category_3\");\r",
									"pm.collectionVariables.set(\"ServiceCategory3Alias\", \"I'm a service Category!\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service Category has been successfully created, with name '\" + pm.collectionVariables.get(\"ServiceCategory3Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceCategory3Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service Category\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"ServiceCategory3Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"ServiceCategory3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"ServiceCategory3Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"ServiceCategory3Alias\"),\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{ServiceCategory3Name}}\",\r\n    \"alias\":\"{{ServiceCategory3Alias}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a host",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Host1Name\", \"host_1\");\r",
									"pm.collectionVariables.set(\"Host1Alias\", \"I'm the first host created by admin\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Host1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host\r",
									"    pm.collectionVariables.set(\"Host1Id\", responseJson.id);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"Host1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"Host1Alias\"),\r",
									"        \"address\": \"999.99.99.99\",\r",
									"        \"monitoring_server_id\": 1,\r",
									"        \"snmp_version\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"note_url\": null,\r",
									"        \"note\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_alternative\": null,\r",
									"        \"comment\": null,\r",
									"        \"timezone_id\": null,\r",
									"        \"severity_id\": null,\r",
									"        \"check_command_id\": null,\r",
									"        \"check_timeperiod_id\": null,\r",
									"        \"notification_timeperiod_id\": null,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"max_check_attempts\": null,\r",
									"        \"normal_check_interval\": 3,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"notification_options\": null,\r",
									"        \"notification_interval\": null,\r",
									"        \"first_notification_delay\": null,\r",
									"        \"recovery_notification_delay\": null,\r",
									"        \"acknowledgement_timeout\": null,\r",
									"        \"freshness_threshold\": null,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"active_check_enabled\": 2,\r",
									"        \"passive_check_enabled\": 2,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"check_command_args\": [],\r",
									"        \"event_handler_command_args\": [],\r",
									"        \"categories\": [\r",
									"            {\r",
									"                \"id\": pm.collectionVariables.get(\"HostCategory1Id\"),\r",
									"                \"name\": pm.collectionVariables.get(\"HostCategory1Name\"),\r",
									"            },\r",
									"            {\r",
									"                \"id\": pm.collectionVariables.get(\"HostCategory2Id\"),\r",
									"                \"name\": pm.collectionVariables.get(\"HostCategory2Name\"),\r",
									"            }\r",
									"        ],\r",
									"        \"groups\": [],\r",
									"        \"templates\": [\r",
									"            {\r",
									"                \"id\": pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
									"                \"name\": pm.collectionVariables.get(\"HostTemplate1Name\"),\r",
									"            }\r",
									"        ],\r",
									"        \"macros\": [],\r",
									"        \"add_inherited_contact_group\": false,\r",
									"        \"add_inherited_contact\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Host1Name}}\",\r\n    \"alias\": \"{{Host1Alias}}\",\r\n    \"address\": \"999.99.99.99\",\r\n    \"monitoring_server_id\": 1,\r\n    \"normal_check_interval\": 3,\r\n    \"categories\": [ {{HostCategory1Id}}, {{HostCategory2Id}} ],\r\n    \"templates\": [ {{HostTemplate1Id}} ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Service1Name\", \"service_001\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Service1Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host\r",
									"    pm.collectionVariables.set(\"Service1Id\", responseJson.id);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
									"        \"host_id\": pm.collectionVariables.get(\"Host1Id\"),\r",
									"        \"comment\": null,\r",
									"        \"service_template_id\": pm.collectionVariables.get(\"ServiceTemplate1Id\"),\r",
									"        \"check_command_id\": null,\r",
									"        \"check_command_args\": [],\r",
									"        \"check_timeperiod_id\": null,\r",
									"        \"max_check_attempts\": 1,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"active_check_enabled\": 2,\r",
									"        \"passive_check_enabled\": 2,\r",
									"        \"volatility_enabled\": 2,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"is_contact_additive_inheritance\": false,\r",
									"        \"is_contact_group_additive_inheritance\": false,\r",
									"        \"notification_interval\": null,\r",
									"        \"notification_timeperiod_id\": null,\r",
									"        \"notification_type\": null,\r",
									"        \"first_notification_delay\": null,\r",
									"        \"recovery_notification_delay\": null,\r",
									"        \"acknowledgement_timeout\": null,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"freshness_threshold\": null,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"event_handler_command_args\": [],\r",
									"        \"graph_template_id\": null,\r",
									"        \"note\": null,\r",
									"        \"note_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_alternative\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"severity_id\": null,\r",
									"        \"is_activated\": true,\r",
									"        \"macros\": [],\r",
									"        \"categories\": [\r",
									"            {\r",
									"                \"id\": pm.collectionVariables.get(\"ServiceCategory1Id\"),\r",
									"                \"name\": pm.collectionVariables.get(\"ServiceCategory1Name\"),\r",
									"            },\r",
									"            {\r",
									"                \"id\": pm.collectionVariables.get(\"ServiceCategory3Id\"),\r",
									"                \"name\": pm.collectionVariables.get(\"ServiceCategory3Name\"),\r",
									"            }\r",
									"        ],\r",
									"        \"groups\": []\r",
									"    });\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Service1Name}}\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"service_template_id\": {{ServiceTemplate1Id}},\r\n    \"service_categories\": [ {{ServiceCategory1Id}},  {{ServiceCategory3Id}}],\r\n    \"max_check_attempts\": 1\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Export the configuration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The configuration has successfully been reloaded.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/generate-and-reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"generate-and-reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the host categories retrieved by admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"expectedHttpStatus\", 200);\r",
									"pm.collectionVariables.set(\"maxNumberOfTries\", 10);\r",
									"pm.collectionVariables.set(\"sleepBetweenTries\", 2000);\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"if (!pm.collectionVariables.get(\"collection_tries\")) {\r",
									"    pm.collectionVariables.set(\"collection_tries\", 1);\r",
									"}\r",
									"\r",
									"if ((pm.collectionVariables.get(\"collection_tries\") < pm.collectionVariables.get(\"maxNumberOfTries\") && responseJson.result.length !== 2) || (pm.response.code !== pm.collectionVariables.get(\"expectedHttpStatus\"))) {\r",
									"    var tries = parseInt(pm.collectionVariables.get(\"collection_tries\"));\r",
									"    pm.collectionVariables.set(\"collection_tries\", tries + 1);\r",
									"    setTimeout(function() {}, pm.collectionVariables.get(\"sleepBetweenTries\"));\r",
									"    postman.setNextRequest(\"Check the host categories retrieved by admin (successful)\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"collection_tries\");\r",
									"\r",
									"    pm.test(\"Host categories have been successfully retrieved\", function () {\r",
									"        pm.response.to.have.status(pm.collectionVariables.get(\"expectedHttpStatus\"));\r",
									"\r",
									"        pm.expect(responseJson.result.length).to.eql(2);\r",
									"\r",
									"        pm.expect(responseJson.result[0]).to.include({\r",
									"            \"id\": pm.collectionVariables.get(\"HostCategory1Id\"),\r",
									"            \"name\": pm.collectionVariables.get(\"HostCategory1Name\")\r",
									"        });\r",
									"\r",
									"        pm.expect(responseJson.result[1]).to.include({\r",
									"            \"id\": pm.collectionVariables.get(\"HostCategory2Id\"),\r",
									"            \"name\": pm.collectionVariables.get(\"HostCategory2Name\")\r",
									"        });\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts/categories?sort_by={\"level\":\"ASC\"}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts",
								"categories"
							],
							"query": [
								{
									"key": "sort_by",
									"value": "{\"level\":\"ASC\"}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the service categories retrieved by admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"expectedHttpStatus\", 200);\r",
									"pm.collectionVariables.set(\"maxNumberOfTries\", 10);\r",
									"pm.collectionVariables.set(\"sleepBetweenTries\", 2000);\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"if (!pm.collectionVariables.get(\"collection_tries\")) {\r",
									"    pm.collectionVariables.set(\"collection_tries\", 1);\r",
									"}\r",
									"\r",
									"if ((pm.collectionVariables.get(\"collection_tries\") < pm.collectionVariables.get(\"maxNumberOfTries\") && responseJson.result.length !== 2) || (pm.response.code !== pm.collectionVariables.get(\"expectedHttpStatus\"))) {\r",
									"    var tries = parseInt(pm.collectionVariables.get(\"collection_tries\"));\r",
									"    pm.collectionVariables.set(\"collection_tries\", tries + 1);\r",
									"    setTimeout(function() {}, pm.collectionVariables.get(\"sleepBetweenTries\"));\r",
									"    postman.setNextRequest(\"Check the service categories retrieved by admin (successful)\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"collection_tries\");\r",
									"\r",
									"    pm.test(\"Service categories have been successfully retrieved\", function () {\r",
									"        pm.response.to.have.status(pm.collectionVariables.get(\"expectedHttpStatus\"));\r",
									"\r",
									"        pm.expect(responseJson.result.length).to.eql(2);\r",
									"\r",
									"        pm.expect(responseJson.result[0]).to.include({\r",
									"            \"id\": pm.collectionVariables.get(\"ServiceCategory1Id\"),\r",
									"            \"name\": pm.collectionVariables.get(\"ServiceCategory1Name\")\r",
									"        });\r",
									"\r",
									"        pm.expect(responseJson.result[1]).to.include({\r",
									"            \"id\": pm.collectionVariables.get(\"ServiceCategory3Id\"),\r",
									"            \"name\": pm.collectionVariables.get(\"ServiceCategory3Name\")\r",
									"        });\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/services/categories?sort_by={\"level\":\"ASC\"}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"services",
								"categories"
							],
							"query": [
								{
									"key": "sort_by",
									"value": "{\"level\":\"ASC\"}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "0102 - Creation user-non-admin",
			"item": [
				{
					"name": "Add user-non-admin (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_non_admin\", \"user-non-admin\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_non_admin}};{{api_login_user_non_admin}};{{api_login_user_non_admin}}@localhost;Centreon!123;0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_non_admin}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_non_admin}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group ACL-non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ACL-non-admin;ACL-non-admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to ACL-non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ACL-non-admin;{{api_login_user_non_admin}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu RS (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RS;RS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RW right to RS (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Read/Write rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n\"values\": \"RS;1;Monitoring\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RS to ACL-non-admin(successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ACL-non-admin;RS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link All Resources to ACL-non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ACL-non-admin;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload ACL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL has been reloaded.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"reload\",\r\n  \"object\": \"ACL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "0103 - Real Time Category by user-non-admin with access to resources",
			"item": [
				{
					"name": "Login with user-non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get(\"api_login_user_non_admin\"));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_non_admin}}\",\r\n      \"password\": \"Centreon!123\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the host categories retrieved by user non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"if (!pm.collectionVariables.get(\"collection_tries\")) {\r",
									"    pm.collectionVariables.set(\"collection_tries\", 1);\r",
									"}\r",
									"\r",
									"if ((pm.collectionVariables.get(\"collection_tries\") < pm.collectionVariables.get(\"maxNumberOfTries\") && responseJson.result.length !== 2) || (pm.response.code !== pm.collectionVariables.get(\"expectedHttpStatus\"))) {\r",
									"    var tries = parseInt(pm.collectionVariables.get(\"collection_tries\"));\r",
									"    pm.collectionVariables.set(\"collection_tries\", tries + 1);\r",
									"    setTimeout(function() {}, pm.collectionVariables.get(\"sleepBetweenTries\"));\r",
									"    postman.setNextRequest(\"Check the host categories retrieved by user non-admin (successful)\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"collection_tries\");\r",
									"\r",
									"    pm.test(\"Host categories have been successfully retrieved\", function () {\r",
									"        pm.response.to.have.status(pm.collectionVariables.get(\"expectedHttpStatus\"));\r",
									"\r",
									"        pm.expect(responseJson.result.length).to.eql(2);\r",
									"\r",
									"        pm.expect(responseJson.result[0]).to.include({\r",
									"            \"id\": pm.collectionVariables.get(\"HostCategory1Id\"),\r",
									"            \"name\": pm.collectionVariables.get(\"HostCategory1Name\")\r",
									"        });\r",
									"\r",
									"        pm.expect(responseJson.result[1]).to.include({\r",
									"            \"id\": pm.collectionVariables.get(\"HostCategory2Id\"),\r",
									"            \"name\": pm.collectionVariables.get(\"HostCategory2Name\")\r",
									"        });\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts/categories?sort_by={\"level\":\"ASC\"}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts",
								"categories"
							],
							"query": [
								{
									"key": "sort_by",
									"value": "{\"level\":\"ASC\"}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the service categories retrieved by user non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"if (!pm.collectionVariables.get(\"collection_tries\")) {\r",
									"    pm.collectionVariables.set(\"collection_tries\", 1);\r",
									"}\r",
									"\r",
									"if ((pm.collectionVariables.get(\"collection_tries\") < pm.collectionVariables.get(\"maxNumberOfTries\") && responseJson.result.length !== 2) || (pm.response.code !== pm.collectionVariables.get(\"expectedHttpStatus\"))) {\r",
									"    var tries = parseInt(pm.collectionVariables.get(\"collection_tries\"));\r",
									"    pm.collectionVariables.set(\"collection_tries\", tries + 1);\r",
									"    setTimeout(function() {}, pm.collectionVariables.get(\"sleepBetweenTries\"));\r",
									"    postman.setNextRequest(\"Check the service categories retrieved by user non-admin (successful)\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"collection_tries\");\r",
									"\r",
									"    pm.test(\"Service categories have been successfully retrieved\", function () {\r",
									"        pm.response.to.have.status(pm.collectionVariables.get(\"expectedHttpStatus\"));\r",
									"\r",
									"        pm.expect(responseJson.result.length).to.eql(2);\r",
									"\r",
									"        pm.expect(responseJson.result[0]).to.include({\r",
									"            \"id\": pm.collectionVariables.get(\"ServiceCategory1Id\"),\r",
									"            \"name\": pm.collectionVariables.get(\"ServiceCategory1Name\")\r",
									"        });\r",
									"\r",
									"        pm.expect(responseJson.result[1]).to.include({\r",
									"            \"id\": pm.collectionVariables.get(\"ServiceCategory3Id\"),\r",
									"            \"name\": pm.collectionVariables.get(\"ServiceCategory3Name\")\r",
									"        });\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/services/categories?sort_by={\"level\":\"ASC\"}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"services",
								"categories"
							],
							"query": [
								{
									"key": "sort_by",
									"value": "{\"level\":\"ASC\"}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from non-admin-user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "0104 - Real Time Category by user-non-admin with filter on categories",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a host category filter (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host category filter has been successfully added to the ACL Resources.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addfilter_hostcategory\",\r\n  \"object\": \"ACLRESOURCE\",\r\n  \"values\": \"All Resources;{{HostCategory2Name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a service category filter (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service category filter has been successfully added to the ACL Resources.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addfilter_servicecategory\",\r\n  \"object\": \"ACLRESOURCE\",\r\n  \"values\": \"All Resources;{{ServiceCategory3Name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload ACL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL has been reloaded.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"reload\",\r\n  \"object\": \"ACL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with user-non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get(\"api_login_user_non_admin\"));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_non_admin}}\",\r\n      \"password\": \"Centreon!123\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the host categories retrieved by user non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"console.log(responseJson);\r",
									"\r",
									"if (!pm.collectionVariables.get(\"collection_tries\")) {\r",
									"    pm.collectionVariables.set(\"collection_tries\", 1);\r",
									"}\r",
									"\r",
									"if ((pm.collectionVariables.get(\"collection_tries\") < pm.collectionVariables.get(\"maxNumberOfTries\") && responseJson.result.length !== 1) || (pm.response.code !== pm.collectionVariables.get(\"expectedHttpStatus\"))) {\r",
									"    var tries = parseInt(pm.collectionVariables.get(\"collection_tries\"));\r",
									"    pm.collectionVariables.set(\"collection_tries\", tries + 1);\r",
									"    setTimeout(function() {}, pm.collectionVariables.get(\"sleepBetweenTries\"));\r",
									"    postman.setNextRequest(\"Check the host categories retrieved by user non-admin (successful)\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"collection_tries\");\r",
									"\r",
									"    pm.test(\"Host categories have been successfully retrieved\", function () {\r",
									"        pm.response.to.have.status(pm.collectionVariables.get(\"expectedHttpStatus\"));\r",
									"\r",
									"        pm.expect(responseJson.result.length).to.eql(1);\r",
									"\r",
									"        pm.expect(responseJson.result[0]).to.include({\r",
									"            \"id\": pm.collectionVariables.get(\"HostCategory2Id\"),\r",
									"            \"name\": pm.collectionVariables.get(\"HostCategory2Name\")\r",
									"        });\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the service categories retrieved by user non-admin (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"if (!pm.collectionVariables.get(\"collection_tries\")) {\r",
									"    pm.collectionVariables.set(\"collection_tries\", 1);\r",
									"}\r",
									"\r",
									"if ((pm.collectionVariables.get(\"collection_tries\") < pm.collectionVariables.get(\"maxNumberOfTries\") && responseJson.result.length !== 1) || (pm.response.code !== pm.collectionVariables.get(\"expectedHttpStatus\"))) {\r",
									"    var tries = parseInt(pm.collectionVariables.get(\"collection_tries\"));\r",
									"    pm.collectionVariables.set(\"collection_tries\", tries + 1);\r",
									"    setTimeout(function() {}, pm.collectionVariables.get(\"sleepBetweenTries\"));\r",
									"    postman.setNextRequest(\"Check the service categories retrieved by user non-admin (successful)\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"collection_tries\");\r",
									"\r",
									"    pm.test(\"Service categories have been successfully retrieved\", function () {\r",
									"        pm.response.to.have.status(pm.collectionVariables.get(\"expectedHttpStatus\"));\r",
									"\r",
									"        pm.expect(responseJson.result.length).to.eql(1);\r",
									"\r",
									"        pm.expect(responseJson.result[0]).to.include({\r",
									"            \"id\": pm.collectionVariables.get(\"ServiceCategory3Id\"),\r",
									"            \"name\": pm.collectionVariables.get(\"ServiceCategory3Name\")\r",
									"        });\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/services/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"services",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from non-admin-user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}