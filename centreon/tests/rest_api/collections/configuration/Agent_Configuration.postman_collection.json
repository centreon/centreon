{
	"info": {
		"_postman_id": "f40c9c17-d91f-4a0b-a88a-03217badd3ee",
		"name": "Agent_Configuration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16182525",
		"_collection_link": "https://centreon-api-testing.postman.co/workspace/develop-OSS~7c78046c-a719-4dae-bbf9-70e6e2c5b9bd/collection/16182525-9536ebf6-3b65-4b2e-9647-82afa65dda83?action=share&source=collection_link&creator=16182525"
	},
	"item": [
		{
			"name": "By Admin",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a CMA token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The token has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"pm.collectionVariables.set(\"Token-1-name\", responseJson.name);\r",
									"pm.collectionVariables.set(\"Token-1-creator-id\", responseJson.creator.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"CMA-token-name\",\r\n    \"type\": \"cma\",\r\n    \"expiration_date\": \"9999-12-02T00:00:00+01:00\",\r\n    \"user_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a fake poller-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The poller has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"INSTANCE\",\r\n  \"values\": \"Poller-1;10.30.2.55;22;ZMQ;5556\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a fake poller-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The poller has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"INSTANCE\",\r\n  \"values\": \"Poller-2;10.30.2.66;22;ZMQ;5556\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a fake poller-3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The poller has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"INSTANCE\",\r\n  \"values\": \"Poller-3;10.30.2.77;22;ZMQ;5556\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a engine conf for Poller-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The engine configuration for the poller has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ENGINECFG\",\r\n  \"values\": \"Centreon Engine cfg for poller-1;Poller-1;Just a small comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a engine conf for Poller-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The engine configuration for the poller has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ENGINECFG\",\r\n  \"values\": \"Centreon Engine cfg for poller-2;Poller-2;Just a small comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a engine conf for Poller-3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The engine configuration for the poller has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ENGINECFG\",\r\n  \"values\": \"Centreon Engine cfg for poller-3;Poller-3;Just a small comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve poller IDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The poller has been successfully retrieved.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"\r",
									"    for(let i=0; i < responseJson.result.length; i++){\r",
									"        if(responseJson.result[i].name === \"Central\"){\r",
									"            pm.collectionVariables.set(\"Central_Id\", responseJson.result[i].id);\r",
									"        }\r",
									"        if(responseJson.result[i].name === \"Poller-1\"){\r",
									"            pm.collectionVariables.set(\"poller1_Id\", responseJson.result[i].id);\r",
									"        }\r",
									"        if(responseJson.result[i].name === \"Poller-2\"){\r",
									"            pm.collectionVariables.set(\"poller2_Id\", responseJson.result[i].id);\r",
									"        }\r",
									"        if(responseJson.result[i].name === \"Poller-3\"){\r",
									"            pm.collectionVariables.set(\"poller3_Id\", responseJson.result[i].id);\r",
									"        }\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"INSTANCE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new host",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Host1Name\", \"host_001\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Host1Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host \r",
									"    pm.collectionVariables.set(\"Host1Id\", responseJson.id);\r",
									"\r",
									"    pm.expect(responseJson).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Host1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host1Name\"),\r",
									"        \"alias\": null,\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"monitoring_server_id\": 1,\r",
									"        \"snmp_version\": null,\r",
									"        \"timezone_id\": null,\r",
									"        \"severity_id\": null,\r",
									"        \"check_command_id\": null,\r",
									"        \"check_timeperiod_id\": null,\r",
									"        \"note_url\": null,\r",
									"        \"note\": null,\r",
									"        \"action_url\": null,\r",
									"        \"max_check_attempts\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"active_check_enabled\": 2,\r",
									"        \"passive_check_enabled\": 2,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"notification_options\": null,\r",
									"        \"notification_interval\": null,\r",
									"        \"notification_timeperiod_id\": null,\r",
									"        \"add_inherited_contact_group\": false,\r",
									"        \"add_inherited_contact\": false,\r",
									"        \"first_notification_delay\": null,\r",
									"        \"recovery_notification_delay\": null,\r",
									"        \"acknowledgement_timeout\": null,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"freshness_threshold\": null,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_alternative\": null,\r",
									"        \"comment\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.check_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.templates).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.groups).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.macros).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.categories).to.be.an('Array').that.is.empty;\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the host creation response\", function () {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            id: { type: \"integer\" },\r",
									"            name: { type: \"string\" },\r",
									"            alias: { type: [\"string\", \"null\"] },\r",
									"            address: { type: \"string\" },\r",
									"            monitoring_server_id: { type: \"integer\" },\r",
									"            snmp_version: { type: [\"string\", \"null\"] },\r",
									"            timezone_id: { type: [\"integer\", \"null\"] },\r",
									"            severity_id: { type: [\"integer\", \"null\"] },\r",
									"            check_command_id: { type: [\"integer\", \"null\"] },\r",
									"            check_timeperiod_id: { type: [\"integer\", \"null\"] },\r",
									"            note_url: { type: [\"string\", \"null\"] },\r",
									"            note: { type: [\"string\", \"null\"] },\r",
									"            action_url: { type: [\"string\", \"null\"] },\r",
									"            max_check_attempts: { type: [\"integer\", \"null\"] },\r",
									"            normal_check_interval: { type: [\"integer\", \"null\"] },\r",
									"            retry_check_interval: { type: [\"integer\", \"null\"] },\r",
									"            active_check_enabled: { type: \"integer\" },\r",
									"            passive_check_enabled: { type: \"integer\" },\r",
									"            notification_enabled: { type: \"integer\" },\r",
									"            notification_options: { type: [\"integer\", \"null\"] },\r",
									"            notification_interval: { type: [\"integer\", \"null\"] },\r",
									"            notification_timeperiod_id: { type: [\"integer\", \"null\"] },\r",
									"            add_inherited_contact_group: { type: \"boolean\" },\r",
									"            add_inherited_contact: { type: \"boolean\" },\r",
									"            first_notification_delay: { type: [\"integer\", \"null\"] },\r",
									"            recovery_notification_delay: { type: [\"integer\", \"null\"] },\r",
									"            acknowledgement_timeout: { type: [\"integer\", \"null\"] },\r",
									"            freshness_checked: { type: \"integer\" },\r",
									"            freshness_threshold: { type: [\"integer\", \"null\"] },\r",
									"            flap_detection_enabled: { type: \"integer\" },\r",
									"            low_flap_threshold: { type: [\"integer\", \"null\"] },\r",
									"            high_flap_threshold: { type: [\"integer\", \"null\"] },\r",
									"            event_handler_enabled: { type: \"integer\" },\r",
									"            event_handler_command_id: { type: [\"integer\", \"null\"] },\r",
									"            icon_id: { type: [\"integer\", \"null\"] },\r",
									"            icon_alternative: { type: [\"string\", \"null\"] },\r",
									"            comment: { type: [\"string\", \"null\"] },\r",
									"            geo_coords: { type: [\"string\", \"null\"] },\r",
									"            is_activated: { type: \"boolean\" },\r",
									"            check_command_args: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"string\"\r",
									"                }\r",
									"            },\r",
									"            event_handler_command_args: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"string\"\r",
									"                }\r",
									"            },\r",
									"            categories: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            templates: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            groups: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            macros: {\r",
									"                type: \"array\",\r",
									"                items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        required: [\"id\", \"monitoring_server_id\", \"name\", \"address\", \"alias\", \"snmp_version\", \"geo_coords\", \"note_url\", \"note\", \"action_url\", \"icon_alternative\", \"comment\", \"timezone_id\", \"severity_id\", \"check_command_id\", \"check_timeperiod_id\", \"notification_timeperiod_id\", \"event_handler_command_id\", \"icon_id\", \"max_check_attempts\", \"normal_check_interval\", \"retry_check_interval\", \"notification_options\", \"notification_interval\", \"first_notification_delay\", \"recovery_notification_delay\", \"acknowledgement_timeout\", \"freshness_threshold\", \"low_flap_threshold\", \"high_flap_threshold\", \"freshness_checked\", \"active_check_enabled\", \"passive_check_enabled\", \"notification_enabled\", \"flap_detection_enabled\", \"event_handler_enabled\", \"check_command_args\", \"event_handler_command_args\", \"categories\", \"groups\", \"templates\", \"macros\", \"add_inherited_contact_group\", \"add_inherited_contact\", \"is_activated\"]\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"{{Host1Name}}\",\r\n\"address\": \"127.0.0.1\",\r\n\"monitoring_server_id\": 1\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a telegraf configuration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"AC1Name\", \"telegraf-001\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has been successfully created, with name '\" + pm.collectionVariables.get(\"AC1Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new AC \r",
									"    pm.collectionVariables.set(\"AC1Id\", responseJson.id);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC1Name\"),\r",
									"        \"type\": \"telegraf\",\r",
									"        \"configuration\": {\r",
									"            \"otel_public_certificate\": \"/etc/pki/my-otel-certificate-name.crt\",\r",
									"            \"otel_ca_certificate\": null,\r",
									"            \"otel_private_key\": \"/etc/pki/my-otel-private-key-name.key\",\r",
									"            \"conf_server_port\": 1443,\r",
									"            \"conf_certificate\": \"/etc/pki/my-certificate-name.crt\",\r",
									"            \"conf_private_key\": \"/etc/pki/my-private-key-name.key\"\r",
									"        },\r",
									"        \"connection_mode\": \"secure\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"Central_Id\")),\r",
									"                \"name\": \"Central\"\r",
									"            },\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller1_Id\")),\r",
									"                \"name\": \"Poller-1\"\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": { \"type\": \"integer\" },\r",
									"            \"name\": { \"type\": \"string\" },\r",
									"            \"type\": { \"type\": \"string\", \"enum\": [\"telegraf\", \"centreon-agent\"] },\r",
									"            \"configuration\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"otel_public_certificate\": { \"type\": \"string\" },\r",
									"                    \"otel_ca_certificate\": { \"type\": [\"string\", \"null\"] },\r",
									"                    \"otel_private_key\": { \"type\": \"string\" },\r",
									"                    \"conf_server_port\": { \"type\": \"integer\" },\r",
									"                    \"conf_certificate\": { \"type\": \"string\" },\r",
									"                    \"conf_private_key\": { \"type\": \"string\" }\r",
									"                },\r",
									"                \"required\": [\"otel_public_certificate\", \"otel_ca_certificate\", \"otel_private_key\", \"conf_server_port\", \"conf_certificate\", \"conf_private_key\"]\r",
									"            },\r",
									"            \"connection_mode\": { \"type\": \"string\" },\r",
									"            \"pollers\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\"]\r",
									"                }\r",
									"            },\r",
									"        },\r",
									"        \"required\": [\"id\", \"name\", \"type\", \"configuration\", \"connection_mode\", \"pollers\"]\r",
									"    };\r",
									"    \r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AC1Name}}\",\r\n    \"poller_ids\": [{{Central_Id}}, {{poller1_Id}}],\r\n    \"type\": \"telegraf\",\r\n    \"connection_mode\": \"secure\",\r\n    \"configuration\": {\r\n        \"otel_public_certificate\": \"my-otel-certificate-name.crt\",\r\n        \"otel_ca_certificate\": null,\r\n        \"otel_private_key\": \"my-otel-private-key-name.key\",\r\n        \"conf_server_port\": 1443,\r\n        \"conf_certificate\": \"my-certificate-name.crt\",\r\n        \"conf_private_key\": \"my-private-key-name.key\"\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "List agent configurations #1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has been successfully retrieved'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(1);\r",
									"\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC1Name\"),\r",
									"        \"type\": \"telegraf\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"Central_Id\")),\r",
									"                \"name\": \"Central\",\r",
									"                \"is_central\": true\r",
									"            },\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller1_Id\")),\r",
									"                \"name\": \"Poller-1\",\r",
									"                \"is_central\": false\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"result\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"type\": { \"type\": \"string\", \"enum\": [\"telegraf\", \"centreon-agent\"] },\r",
									"                        \"pollers\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\r",
									"                                    \"id\": { \"type\": \"integer\" },\r",
									"                                    \"name\": { \"type\": \"string\" }\r",
									"                                },\r",
									"                                \"required\": [\"id\", \"name\"]\r",
									"                            }\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\", \"type\", \"pollers\"]\r",
									"                }\r",
									"            },\r",
									"            \"meta\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"page\": { \"type\": \"integer\" },\r",
									"                    \"limit\": { \"type\": \"integer\" },\r",
									"                    \"search\": { \"type\": \"object\" },\r",
									"                    \"sort_by\": { \"type\": \"object\" },\r",
									"                    \"total\": { \"type\": \"integer\" }\r",
									"                },\r",
									"                \"required\": [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"result\", \"meta\"]\r",
									"    }\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove a poller from AC",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The poller has been successfully removed from the AC.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations/{{AC1Id}}/pollers/{{poller1_Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations",
								"{{AC1Id}}",
								"pollers",
								"{{poller1_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List agent configurations #1,5",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has been successfully retrieved'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(1);\r",
									"\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC1Name\"),\r",
									"        \"type\": \"telegraf\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"Central_Id\")),\r",
									"                \"name\": \"Central\",\r",
									"                \"is_central\": true\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"result\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"type\": { \"type\": \"string\", \"enum\": [\"telegraf\", \"centreon-agent\"] },\r",
									"                        \"pollers\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\r",
									"                                    \"id\": { \"type\": \"integer\" },\r",
									"                                    \"name\": { \"type\": \"string\" },\r",
									"                                    \"is_central\": { \"type\": \"boolean\" }\r",
									"                                },\r",
									"                                \"required\": [\"id\", \"name\"]\r",
									"                            }\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\", \"type\", \"pollers\"]\r",
									"                }\r",
									"            },\r",
									"            \"meta\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"page\": { \"type\": \"integer\" },\r",
									"                    \"limit\": { \"type\": \"integer\" },\r",
									"                    \"search\": { \"type\": \"object\" },\r",
									"                    \"sort_by\": { \"type\": \"object\" },\r",
									"                    \"total\": { \"type\": \"integer\" }\r",
									"                },\r",
									"                \"required\": [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"result\", \"meta\"]\r",
									"    }\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a centreon-agent configuration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"AC2Name\", \"centreon-agent-001\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has been successfully created, with name '\" + pm.collectionVariables.get(\"AC2Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new AC \r",
									"    pm.collectionVariables.set(\"AC2Id\", responseJson.id);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC2Name\"),\r",
									"        \"type\": \"centreon-agent\",\r",
									"        \"connection_mode\": \"secure\",\r",
									"        \"configuration\": {\r",
									"            \"is_reverse\": true,\r",
									"            \"otel_public_certificate\": \"/etc/pki/my-otel-certificate-name-ac2.crt\",\r",
									"            \"otel_ca_certificate\": null,\r",
									"            \"otel_private_key\": \"/etc/pki/my-otel-private-key-name-ac2.key\",\r",
									"            \"tokens\": [],\r",
									"            \"hosts\": [\r",
									"                {\r",
									"                    \"address\": \"127.0.0.1\",\r",
									"                    \"port\": 4317,\r",
									"                    \"id\": pm.collectionVariables.get(\"Host1Id\"),\r",
									"                    \"poller_ca_certificate\": null,\r",
									"                    \"poller_ca_name\": null,\r",
									"                    \"name\": pm.collectionVariables.get(\"Host1Name\"),\r",
									"                    \"token\": {\"name\": pm.collectionVariables.get(\"Token-1-name\"), \"creator_id\": pm.collectionVariables.get(\"Token-1-creator-id\")},\r",
									"                }\r",
									"            ]\r",
									"        },\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller1_Id\")),\r",
									"                \"name\": \"Poller-1\"\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": { \"type\": \"integer\" },\r",
									"            \"name\": { \"type\": \"string\" },\r",
									"            \"type\": { \"type\": \"string\", \"enum\": [\"telegraf\", \"centreon-agent\"] },\r",
									"            \"configuration\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"is_reverse\": { \"type\": \"boolean\" },\r",
									"                    \"otel_public_certificate\": { \"type\": \"string\" },\r",
									"                    \"otel_ca_certificate\": { \"type\": [\"string\", \"null\"] },\r",
									"                    \"otel_private_key\": { \"type\": \"string\" },\r",
									"                    \"tokens\": { \r",
									"                        \"type\": \"array\",\r",
									"                        \"properties\": {\r",
									"                            \"name\": { \"type\" : \"string\" },\r",
									"                            \"creator_id\": { \"type\": \"string\" }\r",
									"                        }\r",
									"                    },\r",
									"                    \"hosts\": {\r",
									"                        \"type\": \"array\",\r",
									"                        \"items\": {\r",
									"                            \"type\": \"object\",\r",
									"                            \"properties\": {\r",
									"                                \"address\": { \"type\": \"string\" },\r",
									"                                \"port\": { \"type\": \"integer\" },\r",
									"                                \"id\": { \"type\": \"integer\" },\r",
									"                                \"poller_ca_certificate\": { \"type\": [\"string\", \"null\"] },\r",
									"                                \"poller_ca_name\": { \"type\": [\"string\", \"null\"] },\r",
									"                                \"name\": { \"type\": \"string\" },\r",
									"                                \"token\": { \"type\": [\"object\", \"null\"] }\r",
									"                            },\r",
									"                            \"required\": [\"address\", \"port\", \"id\", \"poller_ca_certificate\", \"poller_ca_name\", \"name\"]\r",
									"                        },\r",
									"                    },\r",
									"                },\r",
									"                \"required\": [\"is_reverse\", \"otel_public_certificate\", \"otel_ca_certificate\", \"otel_private_key\", \"hosts\"]\r",
									"            },\r",
									"            \"connection_mode\": { \"type\": \"string\" },\r",
									"            \"pollers\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\"]\r",
									"                }\r",
									"            },\r",
									"        },\r",
									"        \"required\": [\"id\", \"name\", \"type\", \"configuration\", \"pollers\"]\r",
									"    };\r",
									"    \r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AC2Name}}\",\r\n    \"poller_ids\": [ {{poller1_Id}} ],\r\n    \"type\": \"centreon-agent\",\r\n    \"connection_mode\": \"secure\",\r\n    \"configuration\": {\r\n        \"is_reverse\": true,\r\n        \"otel_public_certificate\": \"my-otel-certificate-name-ac2.crt\",\r\n        \"otel_ca_certificate\": null,\r\n        \"otel_private_key\": \"my-otel-private-key-name-ac2.key\",\r\n        \"tokens\": [],\r\n        \"hosts\": [{\r\n            \"address\": \"127.0.0.1\",\r\n            \"port\": 4317,\r\n            \"id\": {{Host1Id}},\r\n            \"poller_ca_certificate\": null,\r\n            \"poller_ca_name\": null,\r\n            \"token\": {\"name\": \"{{Token-1-name}}\", \"creator_id\": {{Token-1-creator-id}} }\r\n        }]\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove a poller from AC (error)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The poller has not been removed from the AC.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"    \r",
									"    pm.expect(responseJson.message).to.eql(\"Poller ID #\" + pm.collectionVariables.get(\"poller1_Id\") + \" is the only one linked to poller/agent configuration ID #\"+ pm.collectionVariables.get(\"AC2Id\"))\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations/{{AC2Id}}/pollers/{{poller1_Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations",
								"{{AC2Id}}",
								"pollers",
								"{{poller1_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List agent configurations #2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has been successfully retrieved'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(2);\r",
									"\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC1Name\"),\r",
									"        \"type\": \"telegraf\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"Central_Id\")),\r",
									"                \"name\": \"Central\",\r",
									"                \"is_central\": true\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC2Name\"),\r",
									"        \"type\": \"centreon-agent\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller1_Id\")),\r",
									"                \"name\": \"Poller-1\",\r",
									"                \"is_central\": false\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"result\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"type\": { \"type\": \"string\", \"enum\": [\"telegraf\", \"centreon-agent\"] },\r",
									"                        \"pollers\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\r",
									"                                    \"id\": { \"type\": \"integer\" },\r",
									"                                    \"name\": { \"type\": \"string\" }\r",
									"                                },\r",
									"                                \"required\": [\"id\", \"name\"]\r",
									"                            }\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\", \"type\", \"pollers\"]\r",
									"                }\r",
									"            },\r",
									"            \"meta\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"page\": { \"type\": \"integer\" },\r",
									"                    \"limit\": { \"type\": \"integer\" },\r",
									"                    \"search\": { \"type\": \"object\" },\r",
									"                    \"sort_by\": { \"type\": \"object\" },\r",
									"                    \"total\": { \"type\": \"integer\" }\r",
									"                },\r",
									"                \"required\": [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"result\", \"meta\"]\r",
									"    }\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a telegraf configuration without name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has not been created, because the name is mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[name] The property name is required\\n\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"poller_ids\": [{{poller2_Id}}],\r\n    \"type\": \"telegraf\",\r\n    \"connection_mode\": \"secure\",\r\n    \"configuration\": {\r\n        \"otel_public_certificate\": \"my-otel-certificate-name.crt\",\r\n        \"otel_ca_certificate\": null,\r\n        \"otel_private_key\": \"my-otel-private-key-name.key\",\r\n        \"conf_server_port\": 1443,\r\n        \"conf_certificate\": \"my-certificate-name.crt\",\r\n        \"conf_private_key\": \"my-private-key-name.key\"\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a telegraf configuration with empty name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has not been created, because the name cannot be empty.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[NewAgentConfiguration::name] The string is empty, but non empty string was expected\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\",\r\n    \"poller_ids\": [{{poller2_Id}}],\r\n    \"type\": \"telegraf\",\r\n    \"connection_mode\": \"secure\",\r\n    \"configuration\": {\r\n        \"otel_public_certificate\": \"my-otel-certificate-name.crt\",\r\n        \"otel_ca_certificate\": null,\r\n        \"otel_private_key\": \"my-otel-private-key-name.key\",\r\n        \"conf_server_port\": 1443,\r\n        \"conf_certificate\": \"my-certificate-name.crt\",\r\n        \"conf_private_key\": \"my-private-key-name.key\"\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a telegraf configuration without poller",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has not been created, because the poller_ids is mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[poller_ids] The property poller_ids is required\\n\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"bad-ac\",\r\n    \"type\": \"telegraf\",\r\n    \"connection_mode\": \"secure\",\r\n    \"configuration\": {\r\n        \"otel_public_certificate\": \"my-otel-certificate-name.crt\",\r\n        \"otel_ca_certificate\": null,\r\n        \"otel_private_key\": \"my-otel-private-key-name.key\",\r\n        \"conf_server_port\": 1443,\r\n        \"conf_certificate\": \"my-certificate-name.crt\",\r\n        \"conf_private_key\": \"my-private-key-name.key\"\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a telegraf configuration without type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has not been created, because the type is mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[type] The property type is required\\n\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"bad-ac\",\r\n    \"poller_ids\": [{{poller2_Id}}],\r\n    \"connection_mode\": \"secure\",\r\n    \"configuration\": {\r\n        \"otel_public_certificate\": \"my-otel-certificate-name.crt\",\r\n        \"otel_ca_certificate\": null,\r\n        \"otel_private_key\": \"my-otel-private-key-name.key\",\r\n        \"conf_server_port\": 1443,\r\n        \"conf_certificate\": \"my-certificate-name.crt\",\r\n        \"conf_private_key\": \"my-private-key-name.key\"\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a telegraf configuration with wrong type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has not been created, because the type is not one of the authorized type.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[type] Does not have a value in the enumeration [\\\"telegraf\\\",\\\"centreon-agent\\\"]\\n\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"bad-ac\",\r\n    \"poller_ids\": [{{poller2_Id}}],\r\n    \"type\": \"vmware_v6\",\r\n    \"connection_mode\": \"secure\",\r\n    \"configuration\": {\r\n        \"otel_public_certificate\": \"my-otel-certificate-name.crt\",\r\n        \"otel_ca_certificate\": null,\r\n        \"otel_private_key\": \"my-otel-private-key-name.key\",\r\n        \"conf_server_port\": 1443,\r\n        \"conf_certificate\": \"my-certificate-name.crt\",\r\n        \"conf_private_key\": \"my-private-key-name.key\"\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a telegraf configuration without configuration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has not been created, because the type is not one of the authorized type.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[type] Does not have a value in the enumeration [\\\"telegraf\\\",\\\"centreon-agent\\\"]\\n\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"bad-ac\",\r\n    \"poller_ids\": [{{poller2_Id}}],\r\n    \"type\": \"vmware_v6\",\r\n    \"connection_mode\": \"secure\",\r\n    \"configuration\": {\r\n        \"otel_public_certificate\": \"my-otel-certificate-name.crt\",\r\n        \"otel_ca_certificate\": null,\r\n        \"otel_private_key\": \"my-otel-private-key-name.key\",\r\n        \"conf_server_port\": 1443,\r\n        \"conf_certificate\": \"my-certificate-name.crt\",\r\n        \"conf_private_key\": \"my-private-key-name.key\"\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a telegraf configuration without parameters in configuration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has not been created, because the configuration parameters are mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[configuration.otel_public_certificate] The property otel_public_certificate is required\\n[configuration.otel_ca_certificate] The property otel_ca_certificate is required\\n[configuration.otel_private_key] The property otel_private_key is required\\n[configuration.conf_server_port] The property conf_server_port is required\\n[configuration.conf_certificate] The property conf_certificate is required\\n[configuration.conf_private_key] The property conf_private_key is required\\n\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"bad-ac\",\r\n    \"poller_ids\": [{{poller2_Id}}],\r\n    \"type\": \"telegraf\",\r\n    \"connection_mode\": \"secure\",\r\n    \"configuration\": {}\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a telegraf configuration with wrong values",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has not been created, because the values are not correct.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[type] Boolean value found, but a string is required\\n[type] Does not have a value in the enumeration [\\\"telegraf\\\",\\\"centreon-agent\\\"]\\n[name] Integer value found, but a string is required\\n[poller_ids[0]] Boolean value found, but an integer is required\\n\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": 1,\r\n    \"poller_ids\": [true],\r\n    \"type\": false,\r\n    \"connection_mode\": \"secure\",\r\n    \"configuration\": {\r\n        \"otel_public_certificate\": 3,\r\n        \"otel_ca_certificate\": 0,\r\n        \"otel_private_key\": false,\r\n        \"conf_server_port\": \"1443\",\r\n        \"conf_certificate\": true,\r\n        \"conf_private_key\": 123\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a telegraf configuration with wrong configuration values",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has not been created, because the configuration values are not correct.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[configuration.otel_public_certificate] Integer value found, but a null or a string is required\\n[configuration.otel_ca_certificate] Integer value found, but a string or a null is required\\n[configuration.otel_private_key] Boolean value found, but a null or a string is required\\n[configuration.conf_server_port] String value found, but an integer is required\\n[configuration.conf_certificate] Boolean value found, but a null or a string is required\\n[configuration.conf_private_key] Integer value found, but a null or a string is required\\n\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"bac-ac\",\r\n    \"poller_ids\": [{{poller2_Id}}],\r\n    \"type\": \"telegraf\",\r\n  \"connection_mode\": \"secure\",\r\n  \"configuration\": {\r\n        \"otel_public_certificate\": 3,\r\n        \"otel_ca_certificate\": 0,\r\n        \"otel_private_key\": false,\r\n        \"conf_server_port\": \"1443\",\r\n        \"conf_certificate\": true,\r\n        \"conf_private_key\": 123\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a centreon-agent configuration with an already used poller",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has not been created, because the poller is already used.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"A poller/agent configuration is already associated with poller ID(s) '\" + pm.collectionVariables.get(\"poller1_Id\") + \"'\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"bad-ac\",\r\n    \"poller_ids\": [ {{poller1_Id}} ],\r\n    \"type\": \"centreon-agent\",\r\n    \"connection_mode\": \"secure\",\r\n    \"configuration\": {\r\n        \"is_reverse\": true,\r\n        \"otel_public_certificate\": \"my-otel-certificate-name-ac2.crt\",\r\n        \"otel_ca_certificate\": null,\r\n        \"otel_private_key\": \"my-otel-private-key-name-ac2.key\",\r\n        \"tokens\": [],\r\n        \"hosts\": [{\r\n            \"address\": \"127.0.0.1\",\r\n            \"port\": 4317,\r\n            \"id\": {{Host1Id}},            \"poller_ca_certificate\": null,\r\n            \"poller_ca_name\": null,\r\n            \"token\": null\r\n        }]\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a centreon-agent configuration with special characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"AC3Name\", \"centréon-àgent-002!\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has been successfully created, with name '\" + pm.collectionVariables.get(\"AC3Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new AC \r",
									"    pm.collectionVariables.set(\"AC3Id\", responseJson.id);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC3Name\"),\r",
									"        \"type\": \"centreon-agent\",\r",
									"        \"configuration\": {\r",
									"            \"is_reverse\": true,\r",
									"            \"otel_public_certificate\": \"/etc/pki/my-otél-certificate-name-ac2!.crt\",\r",
									"            \"otel_ca_certificate\": null,\r",
									"            \"otel_private_key\": \"/etc/pki/my-otél_private-key-name-ac2.key\",\r",
									"            \"tokens\": [],\r",
									"            \"hosts\": [\r",
									"                {\r",
									"                    \"address\": \"127.0.0.1\",\r",
									"                    \"port\": 4317,\r",
									"                    \"id\": pm.collectionVariables.get(\"Host1Id\"),\r",
									"                    \"poller_ca_certificate\": \"/etc/pki/ca-filé.crt\",\r",
									"                    \"poller_ca_name\": null,\r",
									"                    \"name\": pm.collectionVariables.get(\"Host1Name\"),\r",
									"                    \"token\": {\"name\": pm.collectionVariables.get(\"Token-1-name\"), \"creator_id\": pm.collectionVariables.get(\"Token-1-creator-id\")},\r",
									"                },\r",
									"                {\r",
									"                    \"address\": \"127.0.0.1\",\r",
									"                    \"port\": 4317,\r",
									"                    \"id\": pm.collectionVariables.get(\"Host1Id\"),\r",
									"                    \"poller_ca_certificate\": null,\r",
									"                    \"poller_ca_name\": null,\r",
									"                    \"name\": pm.collectionVariables.get(\"Host1Name\"),\r",
									"                    \"token\": {\"name\": pm.collectionVariables.get(\"Token-1-name\"), \"creator_id\": pm.collectionVariables.get(\"Token-1-creator-id\")},\r",
									"                }\r",
									"            ]\r",
									"        },\r",
									"        \"connection_mode\": \"secure\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller2_Id\")),\r",
									"                \"name\": \"Poller-2\"\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": { \"type\": \"integer\" },\r",
									"            \"name\": { \"type\": \"string\" },\r",
									"            \"type\": { \"type\": \"string\", \"enum\": [\"telegraf\", \"centreon-agent\"] },\r",
									"            \"connection_mode\": { \"type\": \"string\" },\r",
									"            \"configuration\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"is_reverse\": { \"type\": \"boolean\" },\r",
									"                    \"otel_public_certificate\": { \"type\": \"string\" },\r",
									"                    \"otel_ca_certificate\": { \"type\": [\"string\", \"null\"] },\r",
									"                    \"otel_private_key\": { \"type\": \"string\" },\r",
									"                    \"tokens\": {\r",
									"                        \"type\":\"array\",\r",
									"                        \"properties\": {\r",
									"                            \"name\": { \"type\" : \"string\" },\r",
									"                            \"creator_id\": { \"type\": \"string\" }\r",
									"                        }\r",
									"                    },\r",
									"                    \"hosts\": {\r",
									"                        \"type\": \"array\",\r",
									"                        \"items\": {\r",
									"                            \"type\": \"object\",\r",
									"                            \"properties\": {\r",
									"                                \"address\": { \"type\": \"string\" },\r",
									"                                \"port\": { \"type\": \"integer\" },\r",
									"                                \"id\": { \"type\": \"integer\" },\r",
									"                                \"poller_ca_certificate\": { \"type\": [\"string\", \"null\"] },\r",
									"                                \"poller_ca_name\": { \"type\": [\"string\", \"null\"] },\r",
									"                                \"name\": { \"type\": \"string\" },\r",
									"                                \"token\": { \"type\": [\"object\", \"null\"] }\r",
									"                            },\r",
									"                            \"required\": [\"address\", \"port\", \"id\", \"poller_ca_certificate\", \"poller_ca_name\", \"name\"]\r",
									"                        },\r",
									"                    },\r",
									"                },\r",
									"                \"required\": [\"is_reverse\", \"otel_public_certificate\", \"otel_ca_certificate\", \"otel_private_key\", \"hosts\"]\r",
									"            },\r",
									"            \"pollers\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\"]\r",
									"                }\r",
									"            },\r",
									"        },\r",
									"        \"required\": [\"id\", \"name\", \"type\", \"configuration\", \"pollers\"]\r",
									"    };\r",
									"    \r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AC3Name}}\",\r\n    \"poller_ids\": [ {{poller2_Id}} ],\r\n    \"type\": \"centreon-agent\",\r\n    \"connection_mode\": \"secure\",\r\n    \"configuration\": {\r\n        \"is_reverse\": true,\r\n        \"otel_public_certificate\": \"my-otél-certificate-name-ac2!.crt\",\r\n        \"otel_ca_certificate\": null,\r\n        \"otel_private_key\": \"my-otél_private-key-name-ac2.key\",\r\n        \"tokens\": [],\r\n        \"hosts\": [{\r\n            \"address\": \"127.0.0.1\",\r\n            \"port\": 4317,\r\n            \"id\": {{Host1Id}},\r\n            \"poller_ca_certificate\": \"ca-filé.crt\",\r\n            \"poller_ca_name\": null,\r\n            \"token\": {\"name\":  \"{{Token-1-name}}\", \"creator_id\": {{Token-1-creator-id}} }\r\n        },\r\n        {\r\n            \"address\": \"127.0.0.1\",\r\n            \"port\": 4317,\r\n            \"id\": {{Host1Id}},\r\n            \"poller_ca_certificate\": null,\r\n            \"poller_ca_name\": null,\r\n            \"token\": {\"name\":  \"{{Token-1-name}}\", \"creator_id\": {{Token-1-creator-id}} }\r\n        }]\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change the type of the agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has not been updated because the type cannot be changed.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"Changing the type of an existing poller/agent configuration is not allowed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AC2Name}}\",\r\n    \"poller_ids\": [{{poller3_Id}}],\r\n    \"type\": \"telegraf\",\r\n   \"connection_mode\": \"secure\",\r\n    \"configuration\": {\r\n        \"otel_public_certificate\": \"my-otel-certificate-name-123.crt\",\r\n        \"otel_ca_certificate\": \"ca-file-123.crt\",\r\n        \"otel_private_key\": \"my-otel-private-key-name-123.key\",\r\n        \"conf_server_port\": 1444,\r\n        \"conf_certificate\": \"my-certificate-name-123.crt\",\r\n        \"conf_private_key\": \"my-private-key-name-123.key\"\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations/{{AC2Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations",
								"{{AC2Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List agent configurations #3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has been successfully retrieved'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"name\": pm.collectionVariables.get(\"AC1Name\"),\r",
									"        \"id\": pm.collectionVariables.get(\"AC1Id\"),\r",
									"        \"type\": \"telegraf\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"Central_Id\")),\r",
									"                \"name\": \"Central\",\r",
									"                \"is_central\": true\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"name\": pm.collectionVariables.get(\"AC2Name\"),\r",
									"        \"id\": pm.collectionVariables.get(\"AC2Id\"),\r",
									"        \"type\": \"centreon-agent\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller1_Id\")),\r",
									"                \"name\": \"Poller-1\",\r",
									"                \"is_central\": false\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.eql({\r",
									"        \"name\": pm.collectionVariables.get(\"AC3Name\"),\r",
									"        \"id\": pm.collectionVariables.get(\"AC3Id\"),\r",
									"        \"type\": \"centreon-agent\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller2_Id\")),\r",
									"                \"name\": \"Poller-2\",\r",
									"                \"is_central\": false\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"result\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"type\": { \"type\": \"string\", \"enum\": [\"telegraf\", \"centreon-agent\"] },\r",
									"                        \"pollers\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\r",
									"                                    \"id\": { \"type\": \"integer\" },\r",
									"                                    \"name\": { \"type\": \"string\" },\r",
									"                                    \"is_central\": { \"type\": \"boolean\" }\r",
									"                                },\r",
									"                                \"required\": [\"id\", \"name\"]\r",
									"                            }\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\", \"type\", \"pollers\"]\r",
									"                }\r",
									"            },\r",
									"            \"meta\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"page\": { \"type\": \"integer\" },\r",
									"                    \"limit\": { \"type\": \"integer\" },\r",
									"                    \"search\": { \"type\": \"object\" },\r",
									"                    \"sort_by\": { \"type\": \"object\" },\r",
									"                    \"total\": { \"type\": \"integer\" }\r",
									"                },\r",
									"                \"required\": [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"result\", \"meta\"]\r",
									"    }\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a telegraf configuration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"AC1Name\", \"telegraf-001-updated\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The AC has been successfully updated, with name '\" + pm.collectionVariables.get(\"AC1Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AC1Name}}\",\r\n    \"poller_ids\": [{{poller3_Id}}],\r\n    \"type\": \"telegraf\",\r\n    \"connection_mode\": \"secure\",\r\n   \"configuration\": {\r\n        \"otel_public_certificate\": \"my-otel-certificate-name-123.crt\",\r\n        \"otel_ca_certificate\": \"ca-file-123.crt\",\r\n        \"otel_private_key\": \"my-otel-private-key-name-123.key\",\r\n        \"conf_server_port\": 1444,\r\n        \"conf_certificate\": \"my-certificate-name-123.crt\",\r\n        \"conf_private_key\": \"my-private-key-name-123.key\"\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations/{{AC1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations",
								"{{AC1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List agent configurations #4",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has been successfully retrieved'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC1Name\"),\r",
									"        \"type\": \"telegraf\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller3_Id\")),\r",
									"                \"name\": \"Poller-3\",\r",
									"                \"is_central\": false\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC2Name\"),\r",
									"        \"type\": \"centreon-agent\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller1_Id\")),\r",
									"                \"name\": \"Poller-1\",\r",
									"                \"is_central\": false\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC3Name\"),\r",
									"        \"type\": \"centreon-agent\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller2_Id\")),\r",
									"                \"name\": \"Poller-2\",\r",
									"                \"is_central\": false\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"result\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"type\": { \"type\": \"string\", \"enum\": [\"telegraf\", \"centreon-agent\"] },\r",
									"                        \"pollers\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\r",
									"                                    \"id\": { \"type\": \"integer\" },\r",
									"                                    \"name\": { \"type\": \"string\" },\r",
									"                                    \"is_central\": { \"type\": \"boolean\" }\r",
									"                                },\r",
									"                                \"required\": [\"id\", \"name\"]\r",
									"                            }\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\", \"type\", \"pollers\"]\r",
									"                }\r",
									"            },\r",
									"            \"meta\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"page\": { \"type\": \"integer\" },\r",
									"                    \"limit\": { \"type\": \"integer\" },\r",
									"                    \"search\": { \"type\": \"object\" },\r",
									"                    \"sort_by\": { \"type\": \"object\" },\r",
									"                    \"total\": { \"type\": \"integer\" }\r",
									"                },\r",
									"                \"required\": [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"result\", \"meta\"]\r",
									"    }\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "List first telegraf configurations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has been successfully retrieved'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC1Name\"),\r",
									"        \"type\": \"telegraf\",\r",
									"        \"configuration\": {\r",
									"            \"otel_public_certificate\": \"/etc/pki/my-otel-certificate-name-123.crt\",\r",
									"            \"otel_ca_certificate\": \"/etc/pki/ca-file-123.crt\",\r",
									"            \"otel_private_key\": \"/etc/pki/my-otel-private-key-name-123.key\",\r",
									"            \"conf_server_port\": 1444,\r",
									"            \"conf_certificate\": \"/etc/pki/my-certificate-name-123.crt\",\r",
									"            \"conf_private_key\": \"/etc/pki/my-private-key-name-123.key\"\r",
									"        },\r",
									"        \"connection_mode\": \"secure\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller3_Id\")),\r",
									"                \"name\": \"Poller-3\"\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": { \"type\": \"integer\" },\r",
									"            \"name\": { \"type\": \"string\" },\r",
									"            \"type\": { \"type\": \"string\", \"enum\": [\"telegraf\", \"centreon-agent\"] },\r",
									"            \"configuration\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"otel_public_certificate\": { \"type\": \"string\" },\r",
									"                    \"otel_ca_certificate\": { \"type\": [\"string\", \"null\"] },\r",
									"                    \"otel_private_key\": { \"type\": \"string\" },\r",
									"                    \"conf_server_port\": { \"type\": \"integer\" },\r",
									"                    \"conf_certificate\": { \"type\": \"string\" },\r",
									"                    \"conf_private_key\": { \"type\": \"string\" }\r",
									"                },\r",
									"                \"required\": [\"otel_public_certificate\", \"otel_ca_certificate\", \"otel_private_key\", \"conf_server_port\", \"conf_certificate\", \"conf_private_key\"]\r",
									"            },\r",
									"            \"connection_mode\": { \"type\": \"string\" },\r",
									"            \"pollers\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\"]\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"id\", \"name\", \"type\", \"configuration\", \"pollers\"]\r",
									"    }\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations/{{AC1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations",
								"{{AC1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete agent configurations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The AC has been successfully deleted, with name '\" + pm.collectionVariables.get(\"AC2Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"\r",
									"    pm.collectionVariables.unset(\"AC2Id\");\r",
									"    pm.collectionVariables.unset(\"AC2Name\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations/{{AC2Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations",
								"{{AC2Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List agent configurations #5",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has been successfully retrieved'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(2);\r",
									"\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC1Name\"),\r",
									"        \"type\": \"telegraf\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller3_Id\")),\r",
									"                \"name\": \"Poller-3\",\r",
									"                \"is_central\": false\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC3Name\"),\r",
									"        \"type\": \"centreon-agent\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller2_Id\")),\r",
									"                \"name\": \"Poller-2\",\r",
									"                \"is_central\": false\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"result\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"type\": { \"type\": \"string\", \"enum\": [\"telegraf\", \"centreon-agent\"] },\r",
									"                        \"pollers\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\r",
									"                                    \"id\": { \"type\": \"integer\" },\r",
									"                                    \"name\": { \"type\": \"string\" }\r",
									"                                },\r",
									"                                \"required\": [\"id\", \"name\"]\r",
									"                            }\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\", \"type\", \"pollers\"]\r",
									"                }\r",
									"            },\r",
									"            \"meta\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"page\": { \"type\": \"integer\" },\r",
									"                    \"limit\": { \"type\": \"integer\" },\r",
									"                    \"search\": { \"type\": \"object\" },\r",
									"                    \"sort_by\": { \"type\": \"object\" },\r",
									"                    \"total\": { \"type\": \"integer\" }\r",
									"                },\r",
									"                \"required\": [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"result\", \"meta\"]\r",
									"    }\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Creation non-admin user",
			"item": [
				{
					"name": "Add user_with_RW_rights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user\", \"user-non-admin\");\r",
									"pm.collectionVariables.set(\"api_password_user\", \"Centreon!123\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user}};{{api_login_user}};{{api_login_user}}@localhost;{{api_password_user}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;RW_ALL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;{{api_login_user}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu RW",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RW to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "By User non-admin without Topology rights",
			"item": [
				{
					"name": "Login with non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user}}\",\r\n      \"password\": \"{{api_password_user}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a telegraf configuration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has not been created.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    \r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to access poller/agent configurations\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AC1Name}}\",\r\n    \"poller_ids\": [{{Central_Id}}, {{poller1_Id}}],\r\n    \"type\": \"telegraf\",\r\n    \"connection_mode\": \"secure\",\r\n   \"configuration\": {\r\n        \"otel_public_certificate\": \"my-otel-certificate-name.crt\",\r\n        \"otel_ca_certificate\": null,\r\n        \"otel_private_key\": \"my-otel-private-key-name.key\",\r\n        \"conf_server_port\": 1443,\r\n        \"conf_certificate\": \"my-certificate-name.crt\",\r\n        \"conf_private_key\": \"my-private-key-name.key\"\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "List agent configurations #6",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has not been listed.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    \r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to access poller/agent configurations\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a telegraf configuration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"AC1Name\", \"telegraf-001-updated\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has not been created.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    \r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to access poller/agent configurations\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AC1Name}}\",\r\n    \"poller_ids\": [{{poller3_Id}}],\r\n    \"type\": \"telegraf\",\r\n   \"connection_mode\": \"secure\",\r\n    \"configuration\": {\r\n        \"otel_public_certificate\": \"my-otel-certificate-name-123.crt\",\r\n        \"otel_ca_certificate\": \"ca-file-123.crt\",\r\n        \"otel_private_key\": \"my-otel-private-key-name-123.key\",\r\n        \"conf_server_port\": 1444,\r\n        \"conf_certificate\": \"my-certificate-name-123.crt\",\r\n        \"conf_private_key\": \"my-private-key-name-123.key\"\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations/{{AC1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations",
								"{{AC1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete agent configurations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has not been created.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    \r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to access poller/agent configurations\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations/{{AC1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations",
								"{{AC1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "By User non-admin with Topology rights",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RW right",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Read/Write rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;1;Configuration\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant token right",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Authentication tokens rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;1;Administration;Authentication Tokens\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user}}\",\r\n      \"password\": \"{{api_password_user}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a CMA token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The token has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"pm.collectionVariables.set(\"Token-2-name\", responseJson.name);\r",
									"pm.collectionVariables.set(\"Token-2-creator-id\", responseJson.creator.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"CMA-token-name-2\",\r\n    \"type\": \"cma\",\r\n    \"expiration_date\": \"9999-12-02T00:00:00+01:00\",\r\n    \"user_id\": {{currentUserID}} \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a centreon-agent configuration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"AC4Name\", \"centreon-agent-003\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has been successfully created, with name '\" + pm.collectionVariables.get(\"AC4Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new AC \r",
									"    pm.collectionVariables.set(\"AC4Id\", responseJson.id);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC4Name\"),\r",
									"        \"type\": \"centreon-agent\",\r",
									"        \"configuration\": {\r",
									"            \"is_reverse\": true,\r",
									"            \"otel_public_certificate\": \"/etc/pki/my-otel-certificate-name-ac4.crt\",\r",
									"            \"otel_ca_certificate\": \"/etc/pki/hello.crt\",\r",
									"            \"otel_private_key\": \"/etc/pki/my-otel-private-key-name-ac4.key\",\r",
									"            \"tokens\": [],\r",
									"            \"hosts\": [{\r",
									"                \"address\": \"localhost\",\r",
									"                \"port\": 443,\r",
									"                \"id\": pm.collectionVariables.get(\"Host1Id\"),\r",
									"                \"poller_ca_certificate\": \"/etc/pki/hi.crt\",\r",
									"                \"poller_ca_name\": \"halo\",\r",
									"                \"name\": pm.collectionVariables.get(\"Host1Name\"),\r",
									"                \"token\": {\"name\": pm.collectionVariables.get(\"Token-2-name\"), \"creator_id\": pm.collectionVariables.get(\"Token-2-creator-id\")}\r",
									"            }]\r",
									"        },\r",
									"        \"connection_mode\": \"secure\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"Central_Id\")),\r",
									"                \"name\": \"Central\"\r",
									"            },\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller1_Id\")),\r",
									"                \"name\": \"Poller-1\"\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": { \"type\": \"integer\" },\r",
									"            \"name\": { \"type\": \"string\" },\r",
									"            \"type\": { \"type\": \"string\", \"enum\": [\"telegraf\", \"centreon-agent\"] },\r",
									"            \"configuration\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"is_reverse\": { \"type\": \"boolean\" },\r",
									"                    \"otel_public_certificate\": { \"type\": \"string\" },\r",
									"                    \"otel_ca_certificate\": { \"type\": [\"string\", \"null\"] },\r",
									"                    \"otel_private_key\": { \"type\": \"string\" },\r",
									"                    \"tokens\": { \r",
									"                        \"type\": \"array\",\r",
									"                        \"properties\": {\r",
									"                            \"name\": { \"type\" : \"string\" },\r",
									"                            \"creator_id\": { \"type\": \"string\" }\r",
									"                        }\r",
									"                    },\r",
									"                    \"hosts\": {\r",
									"                        \"type\": \"array\",\r",
									"                        \"items\": {\r",
									"                            \"type\": \"object\",\r",
									"                            \"properties\": {\r",
									"                                \"address\": { \"type\": \"string\" },\r",
									"                                \"port\": { \"type\": \"integer\" },\r",
									"                                \"id\": { \"type\": \"integer\" },\r",
									"                                \"poller_ca_certificate\": { \"type\": [\"string\", \"null\"] },\r",
									"                                \"poller_ca_name\": { \"type\": [\"string\", \"null\"] },\r",
									"                                \"name\": { \"type\": \"string\" },\r",
									"                                \"token\": { \"type\": [\"object\", \"null\"] }\r",
									"                            },\r",
									"                            \"required\": [\"address\", \"port\", \"id\", \"poller_ca_certificate\", \"poller_ca_name\", \"name\"]\r",
									"                        },\r",
									"                    },\r",
									"                },\r",
									"                \"required\": [\"is_reverse\", \"otel_public_certificate\", \"otel_ca_certificate\", \"otel_private_key\", \"hosts\"]\r",
									"            },\r",
									"            \"connection_mode\": { \"type\": \"string\" },\r",
									"            \"pollers\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\"]\r",
									"                }\r",
									"            },\r",
									"        },\r",
									"        \"required\": [\"id\", \"name\", \"type\", \"configuration\", \"pollers\"]\r",
									"    };\r",
									"    \r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AC4Name}}\",\r\n    \"poller_ids\": [ {{Central_Id}}, {{poller1_Id}} ],\r\n    \"type\": \"centreon-agent\",\r\n    \"connection_mode\": \"secure\",\r\n    \"configuration\": {\r\n        \"is_reverse\": true,\r\n        \"otel_public_certificate\": \"my-otel-certificate-name-ac4.crt\",\r\n        \"otel_ca_certificate\": \"hello.crt\",\r\n        \"otel_private_key\": \"my-otel-private-key-name-ac4.key\",\r\n        \"tokens\": [],\r\n        \"hosts\": [{\r\n            \"address\": \"localhost\",\r\n            \"port\": 443,\r\n            \"id\": {{Host1Id}},\r\n            \"poller_ca_certificate\": \"hi.crt\",\r\n            \"poller_ca_name\": \"halo\",\r\n            \"token\": {\"name\":  \"{{Token-2-name}}\", \"creator_id\": {{Token-2-creator-id}} }\r\n        }]\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "List agent configurations #7",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has been successfully retrieved'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC1Name\"),\r",
									"        \"type\": \"telegraf\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller3_Id\")),\r",
									"                \"name\": \"Poller-3\",\r",
									"                \"is_central\": false\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC3Name\"),\r",
									"        \"type\": \"centreon-agent\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller2_Id\")),\r",
									"                \"name\": \"Poller-2\",\r",
									"                \"is_central\": false\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC4Name\"),\r",
									"        \"type\": \"centreon-agent\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"Central_Id\")),\r",
									"                \"name\": \"Central\",\r",
									"                \"is_central\": true\r",
									"            },\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller1_Id\")),\r",
									"                \"name\": \"Poller-1\",\r",
									"                \"is_central\": false\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"result\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"type\": { \"type\": \"string\", \"enum\": [\"telegraf\", \"centreon-agent\"] },\r",
									"                        \"pollers\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\r",
									"                                    \"id\": { \"type\": \"integer\" },\r",
									"                                    \"name\": { \"type\": \"string\" },\r",
									"                                    \"is_central\": { \"type\": \"boolean\" }\r",
									"                                },\r",
									"                                \"required\": [\"id\", \"name\"]\r",
									"                            }\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\", \"type\", \"pollers\"]\r",
									"                }\r",
									"            },\r",
									"            \"meta\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"page\": { \"type\": \"integer\" },\r",
									"                    \"limit\": { \"type\": \"integer\" },\r",
									"                    \"search\": { \"type\": \"object\" },\r",
									"                    \"sort_by\": { \"type\": \"object\" },\r",
									"                    \"total\": { \"type\": \"integer\" }\r",
									"                },\r",
									"                \"required\": [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"result\", \"meta\"]\r",
									"    }\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove a poller from AC",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The poller has been successfully removed from the AC.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations/{{AC4Id}}/pollers/{{Central_Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations",
								"{{AC4Id}}",
								"pollers",
								"{{Central_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List agent configurations #8",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has been successfully retrieved'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC1Name\"),\r",
									"        \"type\": \"telegraf\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller3_Id\")),\r",
									"                \"name\": \"Poller-3\",\r",
									"                \"is_central\": false\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC3Name\"),\r",
									"        \"type\": \"centreon-agent\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller2_Id\")),\r",
									"                \"name\": \"Poller-2\",\r",
									"                \"is_central\": false\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC4Name\"),\r",
									"        \"type\": \"centreon-agent\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller1_Id\")),\r",
									"                \"name\": \"Poller-1\",\r",
									"                \"is_central\": false\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"result\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"type\": { \"type\": \"string\", \"enum\": [\"telegraf\", \"centreon-agent\"] },\r",
									"                        \"pollers\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\r",
									"                                    \"id\": { \"type\": \"integer\" },\r",
									"                                    \"name\": { \"type\": \"string\" },\r",
									"                                    \"is_central\": { \"type\": \"boolean\" }\r",
									"                                },\r",
									"                                \"required\": [\"id\", \"name\"]\r",
									"                            }\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\", \"type\", \"pollers\"]\r",
									"                }\r",
									"            },\r",
									"            \"meta\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"page\": { \"type\": \"integer\" },\r",
									"                    \"limit\": { \"type\": \"integer\" },\r",
									"                    \"search\": { \"type\": \"object\" },\r",
									"                    \"sort_by\": { \"type\": \"object\" },\r",
									"                    \"total\": { \"type\": \"integer\" }\r",
									"                },\r",
									"                \"required\": [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"result\", \"meta\"]\r",
									"    }\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a centreon-agent configuration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"AC3Name\", \"centreon-agent-002-updated\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The AC has been successfully updated, with name '\" + pm.collectionVariables.get(\"AC3Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AC4Name}}\",\r\n    \"poller_ids\": [ {{Central_Id}}, {{poller1_Id}} ],\r\n    \"type\": \"centreon-agent\",\r\n    \"connection_mode\": \"secure\",\r\n    \"configuration\": {\r\n        \"is_reverse\": true,\r\n        \"otel_public_certificate\": \"my-otel-certificate-name-ac4.crt\",\r\n        \"otel_ca_certificate\": \"hello.crt\",\r\n        \"otel_private_key\": \"my-otel-private-key-name-ac4.key\",\r\n        \"tokens\": [],\r\n        \"hosts\": [{\r\n            \"address\": \"localhost\",\r\n            \"port\": 443,\r\n            \"id\": {{Host1Id}},\r\n            \"poller_ca_certificate\": \"hi.crt\",\r\n            \"poller_ca_name\": \"halo\",\r\n            \"token\": {\"name\":  \"{{Token-2-name}}\", \"creator_id\": {{Token-2-creator-id}} }\r\n        }]\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations/{{AC4Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations",
								"{{AC4Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete agent configurations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The AC has been successfully deleted, with name '\" + pm.collectionVariables.get(\"AC2Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"\r",
									"    pm.collectionVariables.unset(\"AC3Id\");\r",
									"    pm.collectionVariables.unset(\"AC3Name\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations/{{AC3Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations",
								"{{AC3Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List agent configurations #9",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has been successfully retrieved'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(2);\r",
									"\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC1Name\"),\r",
									"        \"type\": \"telegraf\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller3_Id\")),\r",
									"                \"name\": \"Poller-3\",\r",
									"                \"is_central\": false\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC4Name\"),\r",
									"        \"type\": \"centreon-agent\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"Central_Id\")),\r",
									"                \"name\": \"Central\",\r",
									"                \"is_central\": true\r",
									"            },\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller1_Id\")),\r",
									"                \"name\": \"Poller-1\",\r",
									"                \"is_central\": false\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"result\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"type\": { \"type\": \"string\", \"enum\": [\"telegraf\", \"centreon-agent\"] },\r",
									"                        \"pollers\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\r",
									"                                    \"id\": { \"type\": \"integer\" },\r",
									"                                    \"name\": { \"type\": \"string\" },\r",
									"                                    \"is_central\": { \"type\": \"boolean\" }\r",
									"                                },\r",
									"                                \"required\": [\"id\", \"name\"]\r",
									"                            }\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\", \"type\", \"pollers\"]\r",
									"                }\r",
									"            },\r",
									"            \"meta\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"page\": { \"type\": \"integer\" },\r",
									"                    \"limit\": { \"type\": \"integer\" },\r",
									"                    \"search\": { \"type\": \"object\" },\r",
									"                    \"sort_by\": { \"type\": \"object\" },\r",
									"                    \"total\": { \"type\": \"integer\" }\r",
									"                },\r",
									"                \"required\": [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"result\", \"meta\"]\r",
									"    }\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "By User non-admin with filters on Pollers",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a filter on a poller",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The fake poller filter has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addfilter_instance\",\r\n  \"object\": \"ACLRESOURCE\",\r\n  \"values\": \"All Resources;Poller-2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a filter on a poller",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The fake poller filter has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addfilter_instance\",\r\n  \"object\": \"ACLRESOURCE\",\r\n  \"values\": \"All Resources;Central\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user}}\",\r\n      \"password\": \"{{api_password_user}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a telegraf configuration on a poller filtered",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"AC5Name\", \"centreon-agent-004\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has not been created, because the user does not see the poller.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"The pollerIds does not exist with ID(s) '\" + pm.collectionVariables.get(\"poller1_Id\") + \"'\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AC5Name}}\",\r\n    \"poller_ids\": [ {{poller1_Id}} ],\r\n    \"type\": \"telegraf\",\r\n    \"connection_mode\": \"secure\",\r\n    \"configuration\": {\r\n        \"otel_public_certificate\": \"my-otel-certificate-name-sss.crt\",\r\n        \"otel_ca_certificate\": null,\r\n        \"otel_private_key\": \"my-otel-private-key-name-sss.key\",\r\n        \"conf_server_port\": 1443,\r\n        \"conf_certificate\": \"my-certificate-name-sss.crt\",\r\n        \"conf_private_key\": \"my-private-key-name-sss.key\"\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a telegraf configuration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"AC5Name\", \"centreon-agent-004\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has been successfully created, with name '\" + pm.collectionVariables.get(\"AC5Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new AC \r",
									"    pm.collectionVariables.set(\"AC5Id\", responseJson.id);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC5Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC5Name\"),\r",
									"        \"type\": \"telegraf\",\r",
									"        \"configuration\": {\r",
									"            \"otel_public_certificate\": \"/etc/pki/my-otel-certificate-name-sss.crt\",\r",
									"            \"otel_ca_certificate\": null,\r",
									"            \"otel_private_key\": \"/etc/pki/my-otel-private-key-name-sss.key\",\r",
									"            \"conf_server_port\": 1443,\r",
									"            \"conf_certificate\": \"/etc/pki/my-certificate-name-sss.crt\",\r",
									"            \"conf_private_key\": \"/etc/pki/my-private-key-name-sss.key\"\r",
									"        },\r",
									"        \"connection_mode\": \"secure\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller2_Id\")),\r",
									"                \"name\": \"Poller-2\"\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": { \"type\": \"integer\" },\r",
									"            \"name\": { \"type\": \"string\" },\r",
									"            \"type\": { \"type\": \"string\", \"enum\": [\"telegraf\", \"centreon-agent\"] },\r",
									"            \"configuration\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"otel_public_certificate\": { \"type\": \"string\" },\r",
									"                    \"otel_ca_certificate\": { \"type\": [\"string\", \"null\"] },\r",
									"                    \"otel_private_key\": { \"type\": \"string\" },\r",
									"                    \"conf_server_port\": { \"type\": \"integer\" },\r",
									"                    \"conf_certificate\": { \"type\": \"string\" },\r",
									"                    \"conf_private_key\": { \"type\": \"string\" }\r",
									"                },\r",
									"                \"required\": [\"otel_public_certificate\", \"otel_ca_certificate\", \"otel_private_key\", \"conf_server_port\", \"conf_certificate\", \"conf_private_key\"]\r",
									"            },\r",
									"            \"connection_mode\": { \"type\": \"string\" },\r",
									"            \"pollers\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\"]\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"id\", \"name\", \"type\", \"configuration\", \"pollers\"]\r",
									"    }\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AC5Name}}\",\r\n    \"poller_ids\": [ {{poller2_Id}} ],\r\n    \"type\": \"telegraf\",\r\n    \"connection_mode\": \"secure\",\r\n    \"configuration\": {\r\n        \"otel_public_certificate\": \"my-otel-certificate-name-sss.crt\",\r\n        \"otel_ca_certificate\": null,\r\n        \"otel_private_key\": \"my-otel-private-key-name-sss.key\",\r\n        \"conf_server_port\": 1443,\r\n        \"conf_certificate\": \"my-certificate-name-sss.crt\",\r\n        \"conf_private_key\": \"my-private-key-name-sss.key\"\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "List agent configurations #10",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has been successfully retrieved'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(1);\r",
									"\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC5Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC5Name\"),\r",
									"        \"type\": \"telegraf\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller2_Id\")),\r",
									"                \"name\": \"Poller-2\",\r",
									"                \"is_central\": false\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"result\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"type\": { \"type\": \"string\", \"enum\": [\"telegraf\", \"centreon-agent\"] },\r",
									"                        \"pollers\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\r",
									"                                    \"id\": { \"type\": \"integer\" },\r",
									"                                    \"name\": { \"type\": \"string\" },\r",
									"                                    \"is_central\": { \"type\": \"boolean\" }\r",
									"                                },\r",
									"                                \"required\": [\"id\", \"name\"]\r",
									"                            }\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\", \"type\", \"pollers\"]\r",
									"                }\r",
									"            },\r",
									"            \"meta\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"page\": { \"type\": \"integer\" },\r",
									"                    \"limit\": { \"type\": \"integer\" },\r",
									"                    \"search\": { \"type\": \"object\" },\r",
									"                    \"sort_by\": { \"type\": \"object\" },\r",
									"                    \"total\": { \"type\": \"integer\" }\r",
									"                },\r",
									"                \"required\": [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"result\", \"meta\"]\r",
									"    }\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a centreon-agent configuration with a poller filtered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has not been update, because the user does not see the poller.\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"Poller/agent Configuration not found\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"nop\",\r\n    \"poller_ids\": [ {{poller2_Id}} ],\r\n    \"type\": \"centreon-agent\",\r\n    \"connection_mode\": \"secure\",\r\n    \"configuration\": {\r\n        \"is_reverse\": true,\r\n        \"otel_public_certificate\": \"my-otel-certificate-name-ac2.crt\",\r\n        \"otel_ca_certificate\": null,\r\n        \"otel_private_key\": \"my-otel-private-key-name-ac2.key\",\r\n        \"tokens\": [],\r\n        \"hosts\": [{\r\n            \"address\": \"127.0.0.1\",\r\n            \"port\": 4317,\r\n            \"id\": {{Host1Id}},\r\n            \"poller_ca_certificate\": null,\r\n            \"poller_ca_name\": null,\r\n            \"token\": {\"name\":  \"{{Token-2-name}}\", \"creator_id\": {{Token-2-creator-id}} }\r\n        }]\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations/{{AC4Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations",
								"{{AC4Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a telegraf configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The AC has been successfully updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AC5Name}}\",\r\n    \"poller_ids\": [{{poller2_Id}}],\r\n    \"type\": \"telegraf\",\r\n    \"connection_mode\": \"secure\",\r\n    \"configuration\": {\r\n        \"otel_public_certificate\": \"my-otel-certificate-name.crt\",\r\n        \"otel_ca_certificate\": null,\r\n        \"otel_private_key\": \"my-otel-private-key-name.key\",\r\n        \"conf_server_port\": 1443,\r\n        \"conf_certificate\": \"my-certificate-name.crt\",\r\n        \"conf_private_key\": \"my-private-key-name.key\"\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations/{{AC5Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations",
								"{{AC5Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List agent configurations #11",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has been successfully retrieved'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(1);\r",
									"\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC5Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC5Name\"),\r",
									"        \"type\": \"telegraf\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller2_Id\")),\r",
									"                \"name\": \"Poller-2\",\r",
									"                \"is_central\": false\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"result\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"type\": { \"type\": \"string\", \"enum\": [\"telegraf\", \"centreon-agent\"] },\r",
									"                        \"pollers\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\r",
									"                                    \"id\": { \"type\": \"integer\" },\r",
									"                                    \"name\": { \"type\": \"string\" },\r",
									"                                    \"is_central\": { \"type\": \"boolean\" }\r",
									"                                },\r",
									"                                \"required\": [\"id\", \"name\"]\r",
									"                            }\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\", \"type\", \"pollers\"]\r",
									"                }\r",
									"            },\r",
									"            \"meta\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"page\": { \"type\": \"integer\" },\r",
									"                    \"limit\": { \"type\": \"integer\" },\r",
									"                    \"search\": { \"type\": \"object\" },\r",
									"                    \"sort_by\": { \"type\": \"object\" },\r",
									"                    \"total\": { \"type\": \"integer\" }\r",
									"                },\r",
									"                \"required\": [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"result\", \"meta\"]\r",
									"    }\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove a poller from AC with a poller filtered",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The poller has not been removed.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    \r",
									"    pm.expect(responseJson.message).to.eql(\"You don't have sufficient permissions for this action\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations/{{AC1Id}}/pollers/{{poller3_Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations",
								"{{AC1Id}}",
								"pollers",
								"{{poller3_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List agent configurations #12",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has been successfully retrieved'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(1);\r",
									"\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"AC5Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"AC5Name\"),\r",
									"        \"type\": \"telegraf\",\r",
									"        \"pollers\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"poller2_Id\")),\r",
									"                \"name\": \"Poller-2\",\r",
									"                \"is_central\": false\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"result\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"type\": { \"type\": \"string\", \"enum\": [\"telegraf\", \"centreon-agent\"] },\r",
									"                        \"pollers\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\r",
									"                                    \"id\": { \"type\": \"integer\" },\r",
									"                                    \"name\": { \"type\": \"string\" },\r",
									"                                    \"is_central\": { \"type\": \"boolean\" }\r",
									"                                },\r",
									"                                \"required\": [\"id\", \"name\"]\r",
									"                            }\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\", \"type\", \"pollers\"]\r",
									"                }\r",
									"            },\r",
									"            \"meta\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"page\": { \"type\": \"integer\" },\r",
									"                    \"limit\": { \"type\": \"integer\" },\r",
									"                    \"search\": { \"type\": \"object\" },\r",
									"                    \"sort_by\": { \"type\": \"object\" },\r",
									"                    \"total\": { \"type\": \"integer\" }\r",
									"                },\r",
									"                \"required\": [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"result\", \"meta\"]\r",
									"    }\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete agent configurations with a poller filtered",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has not been deleted.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You don't have sufficient permissions for this action\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations/{{AC1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations",
								"{{AC1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete agent configurations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The AC has been successfully deleted, with name '\" + pm.collectionVariables.get(\"AC5Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"\r",
									"    pm.collectionVariables.unset(\"AC5Id\");\r",
									"    pm.collectionVariables.unset(\"AC5Name\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations/{{AC5Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations",
								"{{AC5Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List agent configurations #13",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The AC has been successfully retrieved'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the Agent configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"result\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"type\": { \"type\": \"string\", \"enum\": [\"telegraf\", \"centreon-agent\"] },\r",
									"                        \"pollers\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\r",
									"                                    \"id\": { \"type\": \"integer\" },\r",
									"                                    \"name\": { \"type\": \"string\" }\r",
									"                                },\r",
									"                                \"required\": [\"id\", \"name\"]\r",
									"                            }\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\", \"type\", \"pollers\"]\r",
									"                }\r",
									"            },\r",
									"            \"meta\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"page\": { \"type\": \"integer\" },\r",
									"                    \"limit\": { \"type\": \"integer\" },\r",
									"                    \"search\": { \"type\": \"object\" },\r",
									"                    \"sort_by\": { \"type\": \"object\" },\r",
									"                    \"total\": { \"type\": \"integer\" }\r",
									"                },\r",
									"                \"required\": [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"result\", \"meta\"]\r",
									"    }\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/agent-configurations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"agent-configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Token-1-name",
			"value": ""
		},
		{
			"key": "Token-1-creator-id",
			"value": ""
		},
		{
			"key": "Central_Id",
			"value": ""
		},
		{
			"key": "poller1_Id",
			"value": ""
		},
		{
			"key": "poller2_Id",
			"value": ""
		},
		{
			"key": "poller3_Id",
			"value": ""
		},
		{
			"key": "AC1Name",
			"value": ""
		},
		{
			"key": "AC1Id",
			"value": ""
		},
		{
			"key": "host1_Id",
			"value": ""
		},
		{
			"key": "host2_Id",
			"value": ""
		},
		{
			"key": "host1_id",
			"value": ""
		},
		{
			"key": "host2_id",
			"value": ""
		},
		{
			"key": "api_login_user",
			"value": ""
		},
		{
			"key": "api_password_user",
			"value": ""
		},
		{
			"key": "AC4Name",
			"value": ""
		},
		{
			"key": "AC4Id",
			"value": ""
		}
	]
}
