{
	"info": {
		"_postman_id": "73b4e6a2-894d-4aab-bd8a-d771a51d9514",
		"name": "Export_Conf_Monitoring_Servers",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16182525"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "List monitoring servers configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The monitoring servers are successully listed.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(1);\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": 1,\r",
									"        \"name\": \"Central\",\r",
									"        \"is_localhost\": true,\r",
									"        \"is_default\": true,\r",
									"        \"last_restart\": null,\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"is_activate\": true,\r",
									"        \"engine_start_command\": \"service centengine start\",\r",
									"        \"engine_stop_command\": \"service centengine stop\",\r",
									"        \"engine_restart_command\": \"service centengine restart\",\r",
									"        \"engine_reload_command\": \"service centengine reload\",\r",
									"        \"nagios_bin\": \"/usr/sbin/centengine\",\r",
									"        \"nagiostats_bin\": \"/usr/sbin/centenginestats\",\r",
									"        \"broker_reload_command\": \"service cbd reload\",\r",
									"        \"centreonbroker_cfg_path\": \"/etc/centreon-broker\",\r",
									"        \"centreonbroker_module_path\": \"/usr/share/centreon/lib/centreon-broker\",\r",
									"        \"centreonconnector_path\": \"/usr/lib64/centreon-connector\",\r",
									"        \"ssh_port\": 22,\r",
									"        \"init_script_centreontrapd\": \"centreontrapd\",\r",
									"        \"snmp_trapd_path_conf\": \"/etc/snmp/centreon_traps/\",\r",
									"        \"centreonbroker_logs_path\": null,\r",
									"        \"remote_id\": null,\r",
									"        \"remote_server_use_as_proxy\": true,\r",
									"        \"is_updated\": false\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the monitoring server configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"result\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"is_localhost\": { \"type\": \"boolean\" },\r",
									"                        \"is_default\": { \"type\": \"boolean\" },\r",
									"                        \"last_restart\": { \"type\": [ \"string\", \"null\" ] },\r",
									"                        \"address\": { \"type\": \"string\" },\r",
									"                        \"is_activate\": { \"type\": \"boolean\" },\r",
									"                        \"engine_start_command\": { \"type\": \"string\" },\r",
									"                        \"engine_stop_command\": { \"type\": \"string\" },\r",
									"                        \"engine_restart_command\": { \"type\": \"string\" },\r",
									"                        \"engine_reload_command\": { \"type\": \"string\" },\r",
									"                        \"nagios_bin\": { \"type\": \"string\" },\r",
									"                        \"nagiostats_bin\": { \"type\": \"string\" },\r",
									"                        \"broker_reload_command\": { \"type\": \"string\" },\r",
									"                        \"centreonbroker_cfg_path\": { \"type\": \"string\" },\r",
									"                        \"centreonbroker_module_path\": { \"type\": \"string\" },\r",
									"                        \"centreonconnector_path\": { \"type\": \"string\" },\r",
									"                        \"ssh_port\": { \"type\": \"integer\" },\r",
									"                        \"init_script_centreontrapd\": { \"type\": \"string\" },\r",
									"                        \"snmp_trapd_path_conf\": { \"type\": \"string\" },\r",
									"                        \"centreonbroker_logs_path\": { \"type\": [ \"string\", \"null\" ] },\r",
									"                        \"remote_id\": { \"type\": [ \"integer\", \"null\" ] },\r",
									"                        \"remote_server_use_as_proxy\": { \"type\": \"boolean\" },\r",
									"                        \"is_updated\": { \"type\": \"boolean\" }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\", \"is_localhost\", \"is_default\", \"last_restart\", \"address\", \"is_activate\", \"engine_start_command\", \"engine_stop_command\", \"engine_restart_command\", \"engine_reload_command\", \"nagios_bin\", \"nagiostats_bin\", \"centreonbroker_cfg_path\", \"centreonbroker_module_path\", \"centreonconnector_path\", \"ssh_port\", \"init_script_centreontrapd\", \"snmp_trapd_path_conf\", \"centreonbroker_logs_path\", \"remote_id\", \"remote_server_use_as_proxy\", \"is_updated\"]\r",
									"                }\r",
									"            },\r",
									"            \"meta\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"page\": { \"type\": \"integer\" },\r",
									"                    \"limit\": { \"type\": \"integer\" },\r",
									"                    \"search\": { \"type\": \"object\" },\r",
									"                    \"sort_by\": { \"type\": \"object\" },\r",
									"                    \"total\": { \"type\": \"integer\" }\r",
									"                },\r",
									"                \"required\": [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"result\", \"meta\"]\r",
									"    }\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate monitoring servers configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The monitoring servers configuration are successully generated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/1/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"1",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate and reload monitoring servers configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The monitoring servers configuration are successully generated and reloaded.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/1/generate-and-reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"1",
								"generate-and-reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload monitoring servers configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The monitoring servers configuration are successully reloaded.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/1/reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"1",
								"reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate all monitoring servers configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The monitoring servers configuration are successully generated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload all monitoring servers configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The monitoring servers configuration are successully reloaded.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate and reload all monitoring servers configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The monitoring servers configuration are successully generated and reloaded.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"reload"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User non-admin without topology and action",
			"item": [
				{
					"name": "Add user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"user-test;user-test;user-test@localhost;Centreon!123;0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"user-test;reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"user-test;reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new access rights has been successfully granted.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ALL;user-test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with user-test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(\"user-test\");\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"user-test\",\r\n      \"password\": \"Centreon!123\"\r\n    }\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "List monitoring servers configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The monitoring servers are not listed.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to access this resource\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the monitoring server configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate monitoring servers configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The monitoring servers configuration are not  generated.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"Insufficient rights (required: ROLE_GENERATE_CONFIGURATION)\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the monitoring server configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/1/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"1",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate and reload monitoring servers configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The monitoring servers configuration are not generated and reloaded.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"Insufficient rights (required: ROLE_GENERATE_CONFIGURATION)\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the monitoring server configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/1/generate-and-reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"1",
								"generate-and-reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload monitoring servers configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The monitoring servers configuration are not reloaded.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"Insufficient rights (required: ROLE_GENERATE_CONFIGURATION)\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the monitoring server configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/1/reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"1",
								"reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate all monitoring servers configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The monitoring servers configuration are not generated.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"Insufficient rights (required: ROLE_GENERATE_CONFIGURATION)\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the monitoring server configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload all monitoring servers configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The monitoring servers configuration are not reloaded.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"Insufficient rights (required: ROLE_GENERATE_CONFIGURATION)\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the monitoring server configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate and reload all monitoring servers configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The monitoring servers configuration are not generated and reloaded.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"Insufficient rights (required: ROLE_GENERATE_CONFIGURATION)\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the monitoring server configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user non-admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "User non-admin with topology and without action",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu RW",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RW right",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Read/Write rights has been successfully.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;1;Configuration\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RW to ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ALL;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with user-test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(\"user-test\");\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"user-test\",\r\n      \"password\": \"Centreon!123\"\r\n    }\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "List monitoring servers configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The monitoring servers are successully listed.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(1);\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": 1,\r",
									"        \"name\": \"Central\",\r",
									"        \"is_localhost\": true,\r",
									"        \"is_default\": true,\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"is_activate\": true,\r",
									"        \"engine_start_command\": \"service centengine start\",\r",
									"        \"engine_stop_command\": \"service centengine stop\",\r",
									"        \"engine_restart_command\": \"service centengine restart\",\r",
									"        \"engine_reload_command\": \"service centengine reload\",\r",
									"        \"nagios_bin\": \"/usr/sbin/centengine\",\r",
									"        \"nagiostats_bin\": \"/usr/sbin/centenginestats\",\r",
									"        \"broker_reload_command\": \"service cbd reload\",\r",
									"        \"centreonbroker_cfg_path\": \"/etc/centreon-broker\",\r",
									"        \"centreonbroker_module_path\": \"/usr/share/centreon/lib/centreon-broker\",\r",
									"        \"centreonconnector_path\": \"/usr/lib64/centreon-connector\",\r",
									"        \"ssh_port\": 22,\r",
									"        \"init_script_centreontrapd\": \"centreontrapd\",\r",
									"        \"snmp_trapd_path_conf\": \"/etc/snmp/centreon_traps/\",\r",
									"        \"centreonbroker_logs_path\": null,\r",
									"        \"remote_id\": null,\r",
									"        \"remote_server_use_as_proxy\": true,\r",
									"        \"is_updated\": false\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].last_restart).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the monitoring server configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"result\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"is_localhost\": { \"type\": \"boolean\" },\r",
									"                        \"is_default\": { \"type\": \"boolean\" },\r",
									"                        \"last_restart\": { \"type\": [ \"string\", \"null\" ] },\r",
									"                        \"address\": { \"type\": \"string\" },\r",
									"                        \"is_activate\": { \"type\": \"boolean\" },\r",
									"                        \"engine_start_command\": { \"type\": \"string\" },\r",
									"                        \"engine_stop_command\": { \"type\": \"string\" },\r",
									"                        \"engine_restart_command\": { \"type\": \"string\" },\r",
									"                        \"engine_reload_command\": { \"type\": \"string\" },\r",
									"                        \"nagios_bin\": { \"type\": \"string\" },\r",
									"                        \"nagiostats_bin\": { \"type\": \"string\" },\r",
									"                        \"broker_reload_command\": { \"type\": \"string\" },\r",
									"                        \"centreonbroker_cfg_path\": { \"type\": \"string\" },\r",
									"                        \"centreonbroker_module_path\": { \"type\": \"string\" },\r",
									"                        \"centreonconnector_path\": { \"type\": \"string\" },\r",
									"                        \"ssh_port\": { \"type\": \"integer\" },\r",
									"                        \"init_script_centreontrapd\": { \"type\": \"string\" },\r",
									"                        \"snmp_trapd_path_conf\": { \"type\": \"string\" },\r",
									"                        \"centreonbroker_logs_path\": { \"type\": [ \"string\", \"null\" ] },\r",
									"                        \"remote_id\": { \"type\": [ \"integer\", \"null\" ] },\r",
									"                        \"remote_server_use_as_proxy\": { \"type\": \"boolean\" },\r",
									"                        \"is_updated\": { \"type\": \"boolean\" }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\", \"is_localhost\", \"is_default\", \"last_restart\", \"address\", \"is_activate\", \"engine_start_command\", \"engine_stop_command\", \"engine_restart_command\", \"engine_reload_command\", \"nagios_bin\", \"nagiostats_bin\", \"centreonbroker_cfg_path\", \"centreonbroker_module_path\", \"centreonconnector_path\", \"ssh_port\", \"init_script_centreontrapd\", \"snmp_trapd_path_conf\", \"centreonbroker_logs_path\", \"remote_id\", \"remote_server_use_as_proxy\", \"is_updated\"]\r",
									"                }\r",
									"            },\r",
									"            \"meta\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"page\": { \"type\": \"integer\" },\r",
									"                    \"limit\": { \"type\": \"integer\" },\r",
									"                    \"search\": { \"type\": \"object\" },\r",
									"                    \"sort_by\": { \"type\": \"object\" },\r",
									"                    \"total\": { \"type\": \"integer\" }\r",
									"                },\r",
									"                \"required\": [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"result\", \"meta\"]\r",
									"    }\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate monitoring servers configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The monitoring servers configuration are not  generated.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"Insufficient rights (required: ROLE_GENERATE_CONFIGURATION)\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the monitoring server configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/1/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"1",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate and reload monitoring servers configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The monitoring servers configuration are not generated and reloaded.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"Insufficient rights (required: ROLE_GENERATE_CONFIGURATION)\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the monitoring server configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/1/generate-and-reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"1",
								"generate-and-reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload monitoring servers configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The monitoring servers configuration are not reloaded.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"Insufficient rights (required: ROLE_GENERATE_CONFIGURATION)\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the monitoring server configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/1/reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"1",
								"reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate all monitoring servers configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The monitoring servers configuration are not generated.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"Insufficient rights (required: ROLE_GENERATE_CONFIGURATION)\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the monitoring server configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload all monitoring servers configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The monitoring servers configuration are not reloaded.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"Insufficient rights (required: ROLE_GENERATE_CONFIGURATION)\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the monitoring server configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate and reload all monitoring servers configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The monitoring servers configuration are not generated and reloaded.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"Insufficient rights (required: ROLE_GENERATE_CONFIGURATION)\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the monitoring server configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user non-admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "User non-admin with topology and action",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Action",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL action has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLACTION\",\r\n  \"values\": \"Actions;Actions\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant action rights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The rights has been successfully granted.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grant\",\r\n  \"object\": \"ACLACTION\",\r\n  \"values\": \"Actions;generate_cfg|generate_trap\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Actions to ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addaction\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ALL;Actions\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with user-test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(\"user-test\");\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"user-test\",\r\n      \"password\": \"Centreon!123\"\r\n    }\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "List monitoring servers configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The monitoring servers are successully listed.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(1);\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": 1,\r",
									"        \"name\": \"Central\",\r",
									"        \"is_localhost\": true,\r",
									"        \"is_default\": true,\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"is_activate\": true,\r",
									"        \"engine_start_command\": \"service centengine start\",\r",
									"        \"engine_stop_command\": \"service centengine stop\",\r",
									"        \"engine_restart_command\": \"service centengine restart\",\r",
									"        \"engine_reload_command\": \"service centengine reload\",\r",
									"        \"nagios_bin\": \"/usr/sbin/centengine\",\r",
									"        \"nagiostats_bin\": \"/usr/sbin/centenginestats\",\r",
									"        \"broker_reload_command\": \"service cbd reload\",\r",
									"        \"centreonbroker_cfg_path\": \"/etc/centreon-broker\",\r",
									"        \"centreonbroker_module_path\": \"/usr/share/centreon/lib/centreon-broker\",\r",
									"        \"centreonconnector_path\": \"/usr/lib64/centreon-connector\",\r",
									"        \"ssh_port\": 22,\r",
									"        \"init_script_centreontrapd\": \"centreontrapd\",\r",
									"        \"snmp_trapd_path_conf\": \"/etc/snmp/centreon_traps/\",\r",
									"        \"centreonbroker_logs_path\": null,\r",
									"        \"remote_id\": null,\r",
									"        \"remote_server_use_as_proxy\": true,\r",
									"        \"is_updated\": false\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].last_restart).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the monitoring server configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"result\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"is_localhost\": { \"type\": \"boolean\" },\r",
									"                        \"is_default\": { \"type\": \"boolean\" },\r",
									"                        \"last_restart\": { \"type\": [ \"string\", \"null\" ] },\r",
									"                        \"address\": { \"type\": \"string\" },\r",
									"                        \"is_activate\": { \"type\": \"boolean\" },\r",
									"                        \"engine_start_command\": { \"type\": \"string\" },\r",
									"                        \"engine_stop_command\": { \"type\": \"string\" },\r",
									"                        \"engine_restart_command\": { \"type\": \"string\" },\r",
									"                        \"engine_reload_command\": { \"type\": \"string\" },\r",
									"                        \"nagios_bin\": { \"type\": \"string\" },\r",
									"                        \"nagiostats_bin\": { \"type\": \"string\" },\r",
									"                        \"broker_reload_command\": { \"type\": \"string\" },\r",
									"                        \"centreonbroker_cfg_path\": { \"type\": \"string\" },\r",
									"                        \"centreonbroker_module_path\": { \"type\": \"string\" },\r",
									"                        \"centreonconnector_path\": { \"type\": \"string\" },\r",
									"                        \"ssh_port\": { \"type\": \"integer\" },\r",
									"                        \"init_script_centreontrapd\": { \"type\": \"string\" },\r",
									"                        \"snmp_trapd_path_conf\": { \"type\": \"string\" },\r",
									"                        \"centreonbroker_logs_path\": { \"type\": [ \"string\", \"null\" ] },\r",
									"                        \"remote_id\": { \"type\": [ \"integer\", \"null\" ] },\r",
									"                        \"remote_server_use_as_proxy\": { \"type\": \"boolean\" },\r",
									"                        \"is_updated\": { \"type\": \"boolean\" }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\", \"is_localhost\", \"is_default\", \"last_restart\", \"address\", \"is_activate\", \"engine_start_command\", \"engine_stop_command\", \"engine_restart_command\", \"engine_reload_command\", \"nagios_bin\", \"nagiostats_bin\", \"centreonbroker_cfg_path\", \"centreonbroker_module_path\", \"centreonconnector_path\", \"ssh_port\", \"init_script_centreontrapd\", \"snmp_trapd_path_conf\", \"centreonbroker_logs_path\", \"remote_id\", \"remote_server_use_as_proxy\", \"is_updated\"]\r",
									"                }\r",
									"            },\r",
									"            \"meta\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"page\": { \"type\": \"integer\" },\r",
									"                    \"limit\": { \"type\": \"integer\" },\r",
									"                    \"search\": { \"type\": \"object\" },\r",
									"                    \"sort_by\": { \"type\": \"object\" },\r",
									"                    \"total\": { \"type\": \"integer\" }\r",
									"                },\r",
									"                \"required\": [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"result\", \"meta\"]\r",
									"    }\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate monitoring servers configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The monitoring servers configuration are successully generated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/1/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"1",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate and reload monitoring servers configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The monitoring servers configuration are successully generated and reloaded.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/1/generate-and-reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"1",
								"generate-and-reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload monitoring servers configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The monitoring servers configuration are successully reloaded.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/1/reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"1",
								"reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate all monitoring servers configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The monitoring servers configuration are successully generated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload all monitoring servers configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The monitoring servers configuration are successully reloaded.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate and reload all monitoring servers configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The monitoring servers configuration are successully generated and reloaded.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user non-admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "User with a filter on pollers",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a poller",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The poller has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"INSTANCE\",\r\n  \"values\": \"Poller test;10.30.2.55;22;ZMQ;5556\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a poller filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The poller filter has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addfilter_instance\",\r\n  \"object\": \"ACLRESOURCE\",\r\n  \"values\": \"All Resources;Central\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with user-test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(\"user-test\");\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"user-test\",\r\n      \"password\": \"Centreon!123\"\r\n    }\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "List monitoring servers configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The monitoring servers are successully listed.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(1);\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": 1,\r",
									"        \"name\": \"Central\",\r",
									"        \"is_localhost\": true,\r",
									"        \"is_default\": true,\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"is_activate\": true,\r",
									"        \"engine_start_command\": \"service centengine start\",\r",
									"        \"engine_stop_command\": \"service centengine stop\",\r",
									"        \"engine_restart_command\": \"service centengine restart\",\r",
									"        \"engine_reload_command\": \"service centengine reload\",\r",
									"        \"nagios_bin\": \"/usr/sbin/centengine\",\r",
									"        \"nagiostats_bin\": \"/usr/sbin/centenginestats\",\r",
									"        \"broker_reload_command\": \"service cbd reload\",\r",
									"        \"centreonbroker_cfg_path\": \"/etc/centreon-broker\",\r",
									"        \"centreonbroker_module_path\": \"/usr/share/centreon/lib/centreon-broker\",\r",
									"        \"centreonconnector_path\": \"/usr/lib64/centreon-connector\",\r",
									"        \"ssh_port\": 22,\r",
									"        \"init_script_centreontrapd\": \"centreontrapd\",\r",
									"        \"snmp_trapd_path_conf\": \"/etc/snmp/centreon_traps/\",\r",
									"        \"centreonbroker_logs_path\": null,\r",
									"        \"remote_id\": null,\r",
									"        \"remote_server_use_as_proxy\": true,\r",
									"        \"is_updated\": false\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation for the monitoring server configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"result\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"is_localhost\": { \"type\": \"boolean\" },\r",
									"                        \"is_default\": { \"type\": \"boolean\" },\r",
									"                        \"last_restart\": { \"type\": [ \"string\", \"null\" ] },\r",
									"                        \"address\": { \"type\": \"string\" },\r",
									"                        \"is_activate\": { \"type\": \"boolean\" },\r",
									"                        \"engine_start_command\": { \"type\": \"string\" },\r",
									"                        \"engine_stop_command\": { \"type\": \"string\" },\r",
									"                        \"engine_restart_command\": { \"type\": \"string\" },\r",
									"                        \"engine_reload_command\": { \"type\": \"string\" },\r",
									"                        \"nagios_bin\": { \"type\": \"string\" },\r",
									"                        \"nagiostats_bin\": { \"type\": \"string\" },\r",
									"                        \"broker_reload_command\": { \"type\": \"string\" },\r",
									"                        \"centreonbroker_cfg_path\": { \"type\": \"string\" },\r",
									"                        \"centreonbroker_module_path\": { \"type\": \"string\" },\r",
									"                        \"centreonconnector_path\": { \"type\": \"string\" },\r",
									"                        \"ssh_port\": { \"type\": \"integer\" },\r",
									"                        \"init_script_centreontrapd\": { \"type\": \"string\" },\r",
									"                        \"snmp_trapd_path_conf\": { \"type\": \"string\" },\r",
									"                        \"centreonbroker_logs_path\": { \"type\": [ \"string\", \"null\" ] },\r",
									"                        \"remote_id\": { \"type\": [ \"integer\", \"null\" ] },\r",
									"                        \"remote_server_use_as_proxy\": { \"type\": \"boolean\" },\r",
									"                        \"is_updated\": { \"type\": \"boolean\" }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\", \"is_localhost\", \"is_default\", \"last_restart\", \"address\", \"is_activate\", \"engine_start_command\", \"engine_stop_command\", \"engine_restart_command\", \"engine_reload_command\", \"nagios_bin\", \"nagiostats_bin\", \"centreonbroker_cfg_path\", \"centreonbroker_module_path\", \"centreonconnector_path\", \"ssh_port\", \"init_script_centreontrapd\", \"snmp_trapd_path_conf\", \"centreonbroker_logs_path\", \"remote_id\", \"remote_server_use_as_proxy\", \"is_updated\"]\r",
									"                }\r",
									"            },\r",
									"            \"meta\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"page\": { \"type\": \"integer\" },\r",
									"                    \"limit\": { \"type\": \"integer\" },\r",
									"                    \"search\": { \"type\": \"object\" },\r",
									"                    \"sort_by\": { \"type\": \"object\" },\r",
									"                    \"total\": { \"type\": \"integer\" }\r",
									"                },\r",
									"                \"required\": [\"page\", \"limit\", \"search\", \"sort_by\", \"total\"]\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"result\", \"meta\"]\r",
									"    }\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate monitoring servers configuration (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The monitoring servers configuration are not  generated.\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"Monitoring server not found (#2)\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the monitoring server configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/2/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"2",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload monitoring servers configuration (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The monitoring servers configuration are not reloaded.\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"Monitoring server not found (#2)\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the monitoring server configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/2/reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"2",
								"reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate and reload monitoring servers configuration (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The monitoring servers configuration are not generated and reloaded.\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"Monitoring server not found (#2)\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation test for the monitoring server configuration response\", function () {\r",
									"    const schema = {\r",
									"        \"type\": 'object',\r",
									"        \"properties\": {\r",
									"            \"code\": { \"type\": 'integer' },\r",
									"            \"message\": { \"type\": 'string' }\r",
									"        },\r",
									"        \"required\": ['code', 'message']\r",
									"    };\r",
									"\r",
									"    pm.expect(responseJson).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/2/generate-and-reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"2",
								"generate-and-reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate monitoring servers configuration (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The monitoring servers configuration are successully reloaded.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/1/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"1",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload monitoring servers configuration (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The monitoring servers configuration are successully reloaded.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/1/reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"1",
								"reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate and reload monitoring servers configuration (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The monitoring servers configuration are successully generated and reloaded.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/1/generate-and-reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"1",
								"generate-and-reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate all monitoring servers configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The monitoring servers configuration are successully reloaded.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload all monitoring servers configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The monitoring servers configuration are successully reloaded.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate and reload all monitoring servers configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The monitoring servers configuration are successully generated and reloaded.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/monitoring-servers/reload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"monitoring-servers",
								"reload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user non-admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}