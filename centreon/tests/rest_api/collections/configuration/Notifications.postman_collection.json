{
	"info": {
		"_postman_id": "70afadf4-2394-42c8-bc83-092dde17f688",
		"name": "Notifications",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16182525",
		"_collection_link": "https://centreon-api-testing.postman.co/workspace/Migration-of-%22behat%22-tests~e335ae07-f9ab-4b8d-bc6c-19b9f0078df4/collection/16182525-70afadf4-2394-42c8-bc83-092dde17f688?action=share&source=collection_link&creator=16182525"
	},
	"item": [
		{
			"name": "00 - user_with_RW_rights",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user_with_RW_rights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_RW\", \"user_with_RW_rights\");\r",
									"pm.collectionVariables.set(\"api_password_user_RW\", \"Centreon!123\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "4a2f1632-e902-4e6b-bc74-090bc91ebb0f"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};{{api_login_user_RW}};{{api_login_user_RW}}@localhost;{{api_password_user_RW}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "1c2425f7-ed58-4058-bb02-c12e8852a70b"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "6c7bdaf2-9b85-4c09-b45a-fdc6beecae8a"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "163c2eeb-5852-4aeb-bd1d-9e472112a2b3"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;RW_ALL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "d266feb5-b44e-48a7-b4d3-c1b85602fce0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;{{api_login_user_RW}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "7c281e7c-efc1-4630-9626-e3c692033edc"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu RW",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "57380425-6728-4491-8197-589e6c30a676"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RW right",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Read/Write rights has been successfully.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "c28482ad-d36b-44b9-af3d-710433603e94"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;1;Configuration\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RW to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "4967f0a8-49b0-49f5-87fd-dc7d7e639531"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "00 - user_with_RW_rights_filters",
			"item": [
				{
					"name": "Add user_with_RW_rights_filters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_RW_filters\", \"user_with_RW_rights_filters\");\r",
									"pm.collectionVariables.set(\"api_password_user_RW_filters\", \"Centreon!123\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "883c5a62-ad5b-4afd-9ddb-8d6e9049c014"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW_filters}};{{api_login_user_RW_filters}};{{api_login_user_RW_filters}}@localhost;{{api_password_user_RW_filters}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "1deb1537-60a1-475f-af97-563c1abe1010"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW_filters}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "05132bc8-6a7e-40d9-a97f-9fea0512e365"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW_filters}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RW_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "5707fd5c-f128-4b2b-af4e-9274ca23aee3"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_limited;RW_limited\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RW_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "25791b2b-10f3-4cd0-af85-89565083beff"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_limited;{{api_login_user_RW_filters}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Resources limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "b7540b73-7ee5-45ff-9a2d-7e7a2b980f25"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLRESOURCE\",\r\n  \"values\": \"limited;limited\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RW_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "509b6849-320c-4d80-94f6-9afb5144f642"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_limited;limited\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RW to RW_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "80b72885-9c37-4ac2-88a3-b480876dbdfd"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_limited;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "00 - user_nothing",
			"item": [
				{
					"name": "Add user_nothing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_Nothing\", \"user_nothing\");\r",
									"pm.collectionVariables.set(\"api_password_user_Nothing\", \"Centreon!123\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "ed704b9e-cc2f-4bc7-9e45-214bb975e8f3"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};{{api_login_user_Nothing}};{{api_login_user_Nothing}}@localhost;{{api_password_user_Nothing}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "48582feb-4e65-455b-8fd6-a5e35e7601e0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "07df7e43-7edf-4f09-8b35-81d58062ecb1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "bba039b3-a01e-4eb7-aa83-72207b197978"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "0bff908e-737f-464e-a6bd-bd05a36c47dc"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;{{api_login_user_Nothing}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "ca7aff05-8227-4e29-836f-1bb377d57955"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "a04c4f74-558e-4ab6-87d4-c0aafb19f505"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Nothing to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "127dfdec-8e3c-4485-8d38-004ce588c2c4"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "0101 - By admin",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user1\", \"user1\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "354cfddc-09db-4c70-8f8c-2cf78fcaed08"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user1}};{{api_login_user1}};{{api_login_user1}}@localhost;Centreon!123;0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user2\", \"user2\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "386999e3-c1f1-4b13-b6cb-876740909fb9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user2}};{{api_login_user2}};{{api_login_user2}}@localhost;Centreon!123;0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve user-non-admin ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user ID has been successfully retrieved.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"  for(let i=0; i < responseJson.result.length; i++){\r",
									"    if(responseJson.result[i].alias === pm.collectionVariables.get('api_login_user1')){\r",
									"        pm.collectionVariables.set(\"user1_Id\", responseJson.result[i].id);\r",
									"    }\r",
									"    if(responseJson.result[i].alias === pm.collectionVariables.get('api_login_user2')){\r",
									"        pm.collectionVariables.set(\"user2_Id\", responseJson.result[i].id);\r",
									"    }\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "a09bc14d-e8b1-4f87-9d11-55809ac0dfa3"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"CONTACT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a Contact Group 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Contact Group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "e42dbaa7-f16f-46d4-aad4-0a68351932d8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CG\",\r\n  \"values\": \"contact_group_1;contact_group_1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a Contact Group 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Contact Group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "883fbebf-babd-4a56-b027-3243d438ab63"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CG\",\r\n  \"values\": \"contact_group_2;contact_group_2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set contact in contact group 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Contact Group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "8bf8f5e9-6039-42b8-90f7-d66fe0462d56"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"CG\",\r\n  \"values\": \"contact_group_1;{{api_login_user1}}|{{api_login_user2}}|{{api_login_user_RW}}|{{api_login_user_RW_filters}}|{{api_login_user_Nothing}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set contact in contact group 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Contact Group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "f226fc55-e78e-471a-bf2e-6d54660985cf"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"CG\",\r\n  \"values\": \"contact_group_2;{{api_login_user1}}|{{api_login_user2}}|{{api_login_user_RW}}|{{api_login_user_RW_filters}}|{{api_login_user_Nothing}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve contact_group ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The id of the contact group has been successfully retrieved.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"  for(let i=0; i < responseJson.result.length; i++){\r",
									"    if(responseJson.result[i].name === \"contact_group_1\"){\r",
									"        pm.collectionVariables.set(\"Contact_Group_1_Id\", parseInt(responseJson.result[i].id));\r",
									"    }\r",
									"    if(responseJson.result[i].name === \"contact_group_2\"){\r",
									"        pm.collectionVariables.set(\"Contact_Group_2_Id\", parseInt(responseJson.result[i].id));\r",
									"    }\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"uuid": "149b7432-e4de-47b6-9fa8-697842f77e92"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"CG\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a first host group",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostGroup1Name\", \"Test_H_Group_1\");\r",
									"pm.collectionVariables.set(\"HostGroup1Alias\", \"I should be successful !\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host group has been successfully created, with name '\" + pm.collectionVariables.get(\"HostGroup1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostGroup1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host group\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"HostGroup1Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup1Alias\"),\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"Hello world ! 1\",\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{HostGroup1Name}}\",\r\n    \"alias\": \"{{HostGroup1Alias}}\",\r\n    \"comment\": \"Hello world ! 1\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a second host group",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostGroup2Name\", \"Test_H_Group_2\");\r",
									"pm.collectionVariables.set(\"HostGroup2Alias\", \"I should be successful !\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host group has been successfully created, with name '\" + pm.collectionVariables.get(\"HostGroup2Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostGroup2Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host group\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"HostGroup2Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup2Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup2Alias\"),\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"Hello world ! 1\",\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{HostGroup2Name}}\",\r\n    \"alias\": \"{{HostGroup2Alias}}\",\r\n    \"comment\": \"Hello world ! 1\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a first service group",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"ServiceGroup1Name\", \"Test_S_Group_1\");\r",
									"pm.collectionVariables.set(\"ServiceGroup1Alias\", \"I should be successful !\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service group has been successfully created, with name '\" + pm.collectionVariables.get(\"ServiceGroup1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceGroup1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service group\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"ServiceGroup1Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"ServiceGroup1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"ServiceGroup1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"ServiceGroup1Alias\"),\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"Hello world ! 1\",\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{ServiceGroup1Name}}\",\r\n    \"alias\": \"{{ServiceGroup1Alias}}\",\r\n    \"comment\": \"Hello world ! 1\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a second service group",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"ServiceGroup2Name\", \"Test_S_Group_2\");\r",
									"pm.collectionVariables.set(\"ServiceGroup2Alias\", \"Oh a second group created !\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service group has been successfully created, with name '\" + pm.collectionVariables.get(\"ServiceGroup2Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceGroup2Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service group\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"ServiceGroup2Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"ServiceGroup2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"ServiceGroup2Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"ServiceGroup2Alias\"),\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\":\"{{ServiceGroup2Name}}\",\r\n\"alias\":\"{{ServiceGroup2Alias}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a first notification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Notification1Name\", \"notif_1\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"console.log(response);\r",
									"pm.test(\"The notification has been successfully created, with name '\" + pm.collectionVariables.get(\"Notification1Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    pm.collectionVariables.set(\"Notification1Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification1Id\")),\r",
									"        \"name\": pm.collectionVariables.get(\"Notification1Name\"),\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        },\r",
									"        \"users\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"user1_Id\")),\r",
									"                \"name\": pm.collectionVariables.get(\"api_login_user1\")\r",
									"            },\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"user2_Id\")),\r",
									"                \"name\": pm.collectionVariables.get(\"api_login_user2\")\r",
									"            }\r",
									"        ],\r",
									"        \"contactgroups\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"Contact_Group_1_Id\")),\r",
									"                \"name\": \"contact_group_1\"\r",
									"            },\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"Contact_Group_2_Id\")),\r",
									"                \"name\": \"contact_group_2\"\r",
									"            }\r",
									"        ],\r",
									"        \"resources\": [\r",
									"            {\r",
									"                \"type\": \"hostgroup\",\r",
									"                \"events\": 5,\r",
									"                \"ids\": [\r",
									"                    {\r",
									"                        \"id\": parseInt(pm.collectionVariables.get(\"HostGroup1Id\")),\r",
									"                        \"name\": pm.collectionVariables.get(\"HostGroup1Name\")\r",
									"                    },\r",
									"                    {\r",
									"                        \"id\": parseInt(pm.collectionVariables.get(\"HostGroup2Id\")),\r",
									"                        \"name\": pm.collectionVariables.get(\"HostGroup2Name\")\r",
									"                    }\r",
									"                ],\r",
									"                \"extra\": {\r",
									"                    \"event_services\": 2\r",
									"                }\r",
									"            },\r",
									"            {\r",
									"                \"type\": \"servicegroup\",\r",
									"                \"events\": 5,\r",
									"                \"ids\": [\r",
									"                    {\r",
									"                        \"id\": parseInt(pm.collectionVariables.get(\"ServiceGroup1Id\")),\r",
									"                        \"name\": pm.collectionVariables.get(\"ServiceGroup1Name\")\r",
									"                    },\r",
									"                    {\r",
									"                        \"id\": parseInt(pm.collectionVariables.get(\"ServiceGroup2Id\")),\r",
									"                        \"name\": pm.collectionVariables.get(\"ServiceGroup2Name\")\r",
									"                    }\r",
									"                ]\r",
									"            }\r",
									"        ],\r",
									"        \"messages\": [\r",
									"            {\r",
									"                \"channel\": \"Email\",\r",
									"                \"subject\": \"Hello world !\",\r",
									"                \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r",
									"                \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notification</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r",
									"            }\r",
									"        ],\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Notification1Name}}\",\r\n    \"timeperiod_id\": 1,\r\n    \"resources\": [\r\n    {\r\n        \"type\": \"hostgroup\",\r\n        \"events\": 5,\r\n        \"ids\": [ {{HostGroup1Id}}, {{HostGroup2Id}} ],\r\n        \"extra\": {\r\n        \"event_services\": 2\r\n        }\r\n    },\r\n    {\r\n        \"type\": \"servicegroup\",\r\n        \"events\": 5,\r\n        \"ids\": [ {{ServiceGroup1Id}}, {{ServiceGroup2Id}} ]\r\n    }\r\n    ],\r\n    \"messages\": [\r\n    {\r\n        \"channel\": \"Email\",\r\n        \"subject\": \"Hello world !\",\r\n        \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r\n        \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notification</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r\n    }\r\n    ],\r\n    \"users\": [ {{user1_Id}}, {{user2_Id}} ],\r\n    \"contactgroups\": [ {{Contact_Group_1_Id}}, {{Contact_Group_2_Id}} ],\r\n    \"is_activated\": true\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "List notification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All notification are retrieved.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(1);\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification1Id\")),\r",
									"        \"is_activated\": true,\r",
									"        \"name\": pm.collectionVariables.get(\"Notification1Name\"),\r",
									"        \"user_count\": 4,\r",
									"        \"channels\": [\r",
									"            \"Email\"\r",
									"        ],\r",
									"        \"resources\": [\r",
									"            {\r",
									"                \"type\": \"hostgroup\",\r",
									"                \"count\": 2\r",
									"            },\r",
									"            {\r",
									"                \"type\": \"servicegroup\",\r",
									"                \"count\": 2\r",
									"            }\r",
									"        ],\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a second notification with mandatory properties",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Notification2Name\", \"notif_2\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The notification has been successfully created, with name '\" + pm.collectionVariables.get(\"Notification2Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service group\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"Notification2Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification2Id\")),\r",
									"        \"name\": pm.collectionVariables.get(\"Notification2Name\"),\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        },\r",
									"        \"users\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"user2_Id\")),\r",
									"                \"name\": pm.collectionVariables.get(\"api_login_user2\")\r",
									"            }\r",
									"        ],\r",
									"        \"contactgroups\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"Contact_Group_1_Id\")),\r",
									"                \"name\": \"contact_group_1\"\r",
									"            }\r",
									"        ],\r",
									"        \"resources\": [\r",
									"            {\r",
									"                \"type\": \"hostgroup\",\r",
									"                \"events\": 2,\r",
									"                \"ids\": [\r",
									"                    {\r",
									"                        \"id\": parseInt(pm.collectionVariables.get(\"HostGroup2Id\")),\r",
									"                        \"name\": pm.collectionVariables.get(\"HostGroup2Name\")\r",
									"                    }\r",
									"                ],\r",
									"                \"extra\": {\r",
									"                    \"event_services\": 5\r",
									"                }\r",
									"            },\r",
									"            {\r",
									"                \"type\": \"servicegroup\",\r",
									"                \"events\": 1,\r",
									"                \"ids\": [\r",
									"                    {\r",
									"                        \"id\": parseInt(pm.collectionVariables.get(\"ServiceGroup1Id\")),\r",
									"                        \"name\": pm.collectionVariables.get(\"ServiceGroup1Name\")\r",
									"                    }\r",
									"                ]\r",
									"            }\r",
									"        ],\r",
									"        \"messages\": [\r",
									"            {\r",
									"                \"channel\": \"Sms\",\r",
									"                \"subject\": \"Hi buddy !\",\r",
									"                \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r",
									"                \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notification</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r",
									"            }\r",
									"        ],\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Notification2Name}}\",\r\n    \"timeperiod_id\": 1,\r\n    \"resources\": [\r\n    {\r\n        \"type\": \"hostgroup\",\r\n        \"events\": 2,\r\n        \"ids\": [ {{HostGroup2Id}} ],\r\n        \"extra\": {\r\n        \"event_services\": 5\r\n        }\r\n    },\r\n    {\r\n        \"type\": \"servicegroup\",\r\n        \"events\": 1,\r\n        \"ids\": [ {{ServiceGroup1Id}} ]\r\n    }\r\n    ],\r\n    \"messages\": [\r\n    {\r\n        \"channel\": \"Sms\",\r\n        \"subject\": \"Hi buddy !\",\r\n        \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r\n        \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notification</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r\n    }\r\n    ],\r\n    \"users\": [ {{user2_Id}} ],\r\n    \"contactgroups\": [ {{Contact_Group_1_Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "List notifications",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All notification are retrieved.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(2);\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification1Id\")),\r",
									"        \"is_activated\": true,\r",
									"        \"name\": pm.collectionVariables.get(\"Notification1Name\"),\r",
									"        \"user_count\": 4,\r",
									"        \"channels\": [\r",
									"            \"Email\"\r",
									"        ],\r",
									"        \"resources\": [\r",
									"            {\r",
									"                \"type\": \"hostgroup\",\r",
									"                \"count\": 2\r",
									"            },\r",
									"            {\r",
									"                \"type\": \"servicegroup\",\r",
									"                \"count\": 2\r",
									"            }\r",
									"        ],\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        }\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification2Id\")),\r",
									"        \"is_activated\": true,\r",
									"        \"name\": pm.collectionVariables.get(\"Notification2Name\"),\r",
									"        \"user_count\": 2,\r",
									"        \"channels\": [\r",
									"            \"Sms\"\r",
									"        ],\r",
									"        \"resources\": [\r",
									"            {\r",
									"                \"type\": \"hostgroup\",\r",
									"                \"count\": 1\r",
									"            },\r",
									"            {\r",
									"                \"type\": \"servicegroup\",\r",
									"                \"count\": 1\r",
									"            }\r",
									"        ],\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a third notification with special characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Notification3Name\", \"nötîf_3-é!\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The notification has been successfully created, with name '\" + pm.collectionVariables.get(\"Notification3Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service group\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"Notification3Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification3Id\")),\r",
									"        \"name\": pm.collectionVariables.get(\"Notification3Name\"),\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        },\r",
									"        \"users\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"user2_Id\")),\r",
									"                \"name\": pm.collectionVariables.get(\"api_login_user2\")\r",
									"            }\r",
									"        ],\r",
									"        \"contactgroups\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"Contact_Group_1_Id\")),\r",
									"                \"name\": \"contact_group_1\"\r",
									"            }\r",
									"        ],\r",
									"        \"resources\": [\r",
									"            {\r",
									"                \"type\": \"hostgroup\",\r",
									"                \"events\": 2,\r",
									"                \"ids\": [\r",
									"                    {\r",
									"                        \"id\": parseInt(pm.collectionVariables.get(\"HostGroup2Id\")),\r",
									"                        \"name\": pm.collectionVariables.get(\"HostGroup2Name\")\r",
									"                    }\r",
									"                ],\r",
									"                \"extra\": {\r",
									"                    \"event_services\": 5\r",
									"                }\r",
									"            },\r",
									"            {\r",
									"                \"type\": \"servicegroup\",\r",
									"                \"events\": 1,\r",
									"                \"ids\": [\r",
									"                    {\r",
									"                        \"id\": parseInt(pm.collectionVariables.get(\"ServiceGroup1Id\")),\r",
									"                        \"name\": pm.collectionVariables.get(\"ServiceGroup1Name\")\r",
									"                    }\r",
									"                ]\r",
									"            }\r",
									"        ],\r",
									"        \"messages\": [\r",
									"            {\r",
									"                \"channel\": \"Slack\",\r",
									"                \"subject\": \"Coucou é tôï/ !\",\r",
									"                \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r",
									"                \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon <3 notification</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">! Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Résource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r",
									"            }\r",
									"        ],\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Notification3Name}}\",\r\n    \"timeperiod_id\": 1,\r\n    \"resources\": [\r\n    {\r\n        \"type\": \"hostgroup\",\r\n        \"events\": 2,\r\n        \"ids\": [ {{HostGroup2Id}} ],\r\n        \"extra\": {\r\n        \"event_services\": 5\r\n        }\r\n    },\r\n    {\r\n        \"type\": \"servicegroup\",\r\n        \"events\": 1,\r\n        \"ids\": [ {{ServiceGroup1Id}} ]\r\n    }\r\n    ],\r\n    \"messages\": [\r\n    {\r\n        \"channel\": \"Slack\",\r\n        \"subject\": \"Coucou é tôï/ !\",\r\n        \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r\n        \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon <3 notification</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">! Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Résource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r\n    }\r\n    ],\r\n    \"users\": [ {{user2_Id}} ],\r\n    \"contactgroups\": [ {{Contact_Group_1_Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "List notifications",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All notification are retrieved.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification1Id\")),\r",
									"        \"is_activated\": true,\r",
									"        \"name\": pm.collectionVariables.get(\"Notification1Name\"),\r",
									"        \"user_count\": 4,\r",
									"        \"channels\": [\r",
									"            \"Email\"\r",
									"        ],\r",
									"        \"resources\": [\r",
									"            {\r",
									"                \"type\": \"hostgroup\",\r",
									"                \"count\": 2\r",
									"            },\r",
									"            {\r",
									"                \"type\": \"servicegroup\",\r",
									"                \"count\": 2\r",
									"            }\r",
									"        ],\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        }\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification2Id\")),\r",
									"        \"is_activated\": true,\r",
									"        \"name\": pm.collectionVariables.get(\"Notification2Name\"),\r",
									"        \"user_count\": 2,\r",
									"        \"channels\": [\r",
									"            \"Sms\"\r",
									"        ],\r",
									"        \"resources\": [\r",
									"            {\r",
									"                \"type\": \"hostgroup\",\r",
									"                \"count\": 1\r",
									"            },\r",
									"            {\r",
									"                \"type\": \"servicegroup\",\r",
									"                \"count\": 1\r",
									"            }\r",
									"        ],\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        }\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification3Id\")),\r",
									"        \"is_activated\": true,\r",
									"        \"name\": pm.collectionVariables.get(\"Notification3Name\"),\r",
									"        \"user_count\": 2,\r",
									"        \"channels\": [\r",
									"            \"Slack\"\r",
									"        ],\r",
									"        \"resources\": [\r",
									"            {\r",
									"                \"type\": \"hostgroup\",\r",
									"                \"count\": 1\r",
									"            },\r",
									"            {\r",
									"                \"type\": \"servicegroup\",\r",
									"                \"count\": 1\r",
									"            }\r",
									"        ],\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a notification without name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"pm.test(\"The notification has not been created, because the name is mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(response.message).to.eql(\"[name] The property name is required\\n\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeperiod_id\": 1,\r\n    \"resources\": [\r\n    {\r\n        \"type\": \"hostgroup\",\r\n        \"events\": 2,\r\n        \"ids\": [ {{HostGroup2Id}} ],\r\n        \"extra\": {\r\n        \"event_services\": 5\r\n        }\r\n    },\r\n    {\r\n        \"type\": \"servicegroup\",\r\n        \"events\": 1,\r\n        \"ids\": [ {{ServiceGroup1Id}} ]\r\n    }\r\n    ],\r\n    \"messages\": [\r\n    {\r\n        \"channel\": \"Sms\",\r\n        \"subject\": \"Hi buddy !\",\r\n        \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r\n        \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notification</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r\n    }\r\n    ],\r\n    \"users\": [ {{user2_Id}} ],\r\n    \"contactgroups\": [ {{Contact_Group_1_Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a notification with empty name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"pm.test(\"The notification has not been created, because the name is empty.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(response.message).to.eql(\"[NewNotification::name] The string is empty, but non empty string was expected\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\",\r\n    \"timeperiod_id\": 1,\r\n    \"resources\": [\r\n    {\r\n        \"type\": \"hostgroup\",\r\n        \"events\": 2,\r\n        \"ids\": [ {{HostGroup2Id}} ],\r\n        \"extra\": {\r\n        \"event_services\": 5\r\n        }\r\n    },\r\n    {\r\n        \"type\": \"servicegroup\",\r\n        \"events\": 1,\r\n        \"ids\": [ {{ServiceGroup1Id}} ]\r\n    }\r\n    ],\r\n    \"messages\": [\r\n    {\r\n        \"channel\": \"Sms\",\r\n        \"subject\": \"Hi buddy !\",\r\n        \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r\n        \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notification</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r\n    }\r\n    ],\r\n    \"users\": [ {{user2_Id}} ],\r\n    \"contactgroups\": [ {{Contact_Group_1_Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a notification without timeperiod",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"pm.test(\"The notification has not been created, because the timeperiod_id is mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(response.message).to.eql(\"[timeperiod_id] The property timeperiod_id is required\\n\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"1\",\r\n    \"resources\": [\r\n    {\r\n        \"type\": \"hostgroup\",\r\n        \"events\": 2,\r\n        \"ids\": [ {{HostGroup2Id}} ],\r\n        \"extra\": {\r\n        \"event_services\": 5\r\n        }\r\n    },\r\n    {\r\n        \"type\": \"servicegroup\",\r\n        \"events\": 1,\r\n        \"ids\": [ {{ServiceGroup1Id}} ]\r\n    }\r\n    ],\r\n    \"messages\": [\r\n    {\r\n        \"channel\": \"Sms\",\r\n        \"subject\": \"Hi buddy !\",\r\n        \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r\n        \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notification</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r\n    }\r\n    ],\r\n    \"users\": [ {{user2_Id}} ],\r\n    \"contactgroups\": [ {{Contact_Group_1_Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a notification without users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"pm.test(\"The notification has not been created, because the users is mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(response.message).to.eql(\"[users] The property users is required\\n\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"1\",\r\n    \"timeperiod_id\": 1,\r\n    \"resources\": [\r\n    {\r\n        \"type\": \"hostgroup\",\r\n        \"events\": 2,\r\n        \"ids\": [ {{HostGroup2Id}} ],\r\n        \"extra\": {\r\n        \"event_services\": 5\r\n        }\r\n    },\r\n    {\r\n        \"type\": \"servicegroup\",\r\n        \"events\": 1,\r\n        \"ids\": [ {{ServiceGroup1Id}} ]\r\n    }\r\n    ],\r\n    \"messages\": [\r\n    {\r\n        \"channel\": \"Sms\",\r\n        \"subject\": \"Hi buddy !\",\r\n        \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r\n        \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notification</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r\n    }\r\n    ],\r\n    \"contactgroups\": [ {{Contact_Group_1_Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a notification without contact groups",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"pm.test(\"The notification has not been created, because the contactgroups is mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(response.message).to.eql(\"[contactgroups] The property contactgroups is required\\n\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"1\",\r\n    \"timeperiod_id\": 1,\r\n    \"resources\": [\r\n    {\r\n        \"type\": \"hostgroup\",\r\n        \"events\": 2,\r\n        \"ids\": [ {{HostGroup2Id}} ],\r\n        \"extra\": {\r\n        \"event_services\": 5\r\n        }\r\n    },\r\n    {\r\n        \"type\": \"servicegroup\",\r\n        \"events\": 1,\r\n        \"ids\": [ {{ServiceGroup1Id}} ]\r\n    }\r\n    ],\r\n    \"messages\": [\r\n    {\r\n        \"channel\": \"Sms\",\r\n        \"subject\": \"Hi buddy !\",\r\n        \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r\n        \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notification</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r\n    }\r\n    ],\r\n    \"users\": [ {{user2_Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a notification without message",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"pm.test(\"The notification has not been created, because the messages is mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(response.message).to.eql(\"[messages] The property messages is required\\n\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"1\",\r\n    \"timeperiod_id\": 1,\r\n    \"resources\": [\r\n    {\r\n        \"type\": \"hostgroup\",\r\n        \"events\": 2,\r\n        \"ids\": [ {{HostGroup2Id}} ],\r\n        \"extra\": {\r\n        \"event_services\": 5\r\n        }\r\n    },\r\n    {\r\n        \"type\": \"servicegroup\",\r\n        \"events\": 1,\r\n        \"ids\": [ {{ServiceGroup1Id}} ]\r\n    }\r\n    ],\r\n    \"users\": [ {{user2_Id}} ],\r\n    \"contactgroups\": [ {{Contact_Group_1_Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a notification without resources",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"pm.test(\"The notification has not been created, because the resources is mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(response.message).to.eql(\"[resources] The property resources is required\\n\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"1\",\r\n    \"timeperiod_id\": 1,\r\n    \"messages\": [\r\n    {\r\n        \"channel\": \"Sms\",\r\n        \"subject\": \"Hi buddy !\",\r\n        \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r\n        \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notification</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r\n    }\r\n    ],\r\n    \"users\": [ {{user2_Id}} ],\r\n    \"contactgroups\": [ {{Contact_Group_1_Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a notification with channel of wrong type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"pm.test(\"The notification has not been created, because the the channel value is not correct.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(response.message).to.eql(\"\\\"Smzzzzzs\\\" is not a valid backing value for enum \\\"Core\\\\Notification\\\\Domain\\\\Model\\\\NotificationChannel\\\"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Test_wrong\",\r\n    \"timeperiod_id\": 1,\r\n    \"resources\": [\r\n    {\r\n        \"type\": \"hostgroup\",\r\n        \"events\": 2,\r\n        \"ids\": [ {{HostGroup2Id}} ],\r\n        \"extra\": {\r\n        \"event_services\": 5\r\n        }\r\n    },\r\n    {\r\n        \"type\": \"servicegroup\",\r\n        \"events\": 1,\r\n        \"ids\": [ {{ServiceGroup1Id}} ]\r\n    }\r\n    ],\r\n    \"messages\": [\r\n    {\r\n        \"channel\": \"Smzzzzzs\",\r\n        \"subject\": \"Hi buddy !\",\r\n        \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r\n        \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notification</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r\n    }\r\n    ],\r\n    \"users\": [ {{user2_Id}} ],\r\n    \"contactgroups\": [ {{Contact_Group_1_Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a notification with name of wrong type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"pm.test(\"The notification has not been created, because the the name value is not correct.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(response.message).to.eql(\"[name] Integer value found, but a string is required\\n\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": 2,\r\n    \"timeperiod_id\": 1,\r\n    \"resources\": [\r\n    {\r\n        \"type\": \"hostgroup\",\r\n        \"events\": 2,\r\n        \"ids\": [ {{HostGroup2Id}} ],\r\n        \"extra\": {\r\n        \"event_services\": 5\r\n        }\r\n    },\r\n    {\r\n        \"type\": \"servicegroup\",\r\n        \"events\": 1,\r\n        \"ids\": [ {{ServiceGroup1Id}} ]\r\n    }\r\n    ],\r\n    \"messages\": [\r\n    {\r\n        \"channel\": \"Sms\",\r\n        \"subject\": \"Hi buddy !\",\r\n        \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r\n        \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notification</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r\n    }\r\n    ],\r\n    \"users\": [ {{user2_Id}} ],\r\n    \"contactgroups\": [ {{Contact_Group_1_Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a notification with timeperiod of wrong type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"pm.test(\"The notification has not been created, because the timeperiod_id value is not correct.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(response.message).to.eql(\"[timeperiod_id] Boolean value found, but an integer is required\\n\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"2\",\r\n    \"timeperiod_id\": true,\r\n    \"resources\": [\r\n    {\r\n        \"type\": \"hostgroup\",\r\n        \"events\": 2,\r\n        \"ids\": [ {{HostGroup2Id}} ],\r\n        \"extra\": {\r\n        \"event_services\": 5\r\n        }\r\n    },\r\n    {\r\n        \"type\": \"servicegroup\",\r\n        \"events\": 1,\r\n        \"ids\": [ {{ServiceGroup1Id}} ]\r\n    }\r\n    ],\r\n    \"messages\": [\r\n    {\r\n        \"channel\": \"Sms\",\r\n        \"subject\": \"Hi buddy !\",\r\n        \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r\n        \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notification</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r\n    }\r\n    ],\r\n    \"users\": [ {{user2_Id}} ],\r\n    \"contactgroups\": [ {{Contact_Group_1_Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a notification with resources of wrong type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"pm.test(\"The notification has not been created, because the resources value is not correct.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(response.message).to.eql(\"Invalid resource type\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"2\",\r\n    \"timeperiod_id\": 1,\r\n    \"resources\": [\r\n    {\r\n        \"type\": \"1\",\r\n        \"events\": 2,\r\n        \"ids\": [ {{HostGroup2Id}} ],\r\n        \"extra\": {\r\n        \"event_services\": 5\r\n        }\r\n    },\r\n    {\r\n        \"type\": \"servicegroup\",\r\n        \"events\": 1,\r\n        \"ids\": [ {{ServiceGroup1Id}} ]\r\n    }\r\n    ],\r\n    \"messages\": [\r\n    {\r\n        \"channel\": \"Sms\",\r\n        \"subject\": \"Hi buddy !\",\r\n        \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r\n        \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notification</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r\n    }\r\n    ],\r\n    \"users\": [ {{user2_Id}} ],\r\n    \"contactgroups\": [ {{Contact_Group_1_Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "List notification 1 rule",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The notification rule is retrieved.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.notification_id).to.eql(parseInt(pm.collectionVariables.get(\"Notification1Id\")));\r",
									"    pm.expect(responseJson.channels).to.eql({\r",
									"        \"email\": {\r",
									"            \"subject\": \"Hello world !\",\r",
									"            \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notification</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\",\r",
									"            \"contacts\": [\r",
									"                {\r",
									"                    \"email_address\": \"user1@localhost\",\r",
									"                    \"full_name\": \"user1\"\r",
									"                },\r",
									"                {\r",
									"                    \"email_address\": \"user2@localhost\",\r",
									"                    \"full_name\": \"user2\"\r",
									"                },\r",
									"                {\r",
									"                    \"email_address\": pm.collectionVariables.get('api_login_user_Nothing') + \"@localhost\",\r",
									"                    \"full_name\": pm.collectionVariables.get('api_login_user_Nothing')\r",
									"                },\r",
									"                {\r",
									"                    \"email_address\": pm.collectionVariables.get('api_login_user_RW') + \"@localhost\",\r",
									"                    \"full_name\": pm.collectionVariables.get('api_login_user_RW')\r",
									"                },\r",
									"                {\r",
									"                    \"email_address\": pm.collectionVariables.get('api_login_user_RW_filters') + \"@localhost\",\r",
									"                    \"full_name\":pm.collectionVariables.get('api_login_user_RW_filters')\r",
									"                }\r",
									"            ]\r",
									"        },\r",
									"        \"slack\": null,\r",
									"        \"sms\": null\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications/{{Notification1Id}}/rules",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications",
								"{{Notification1Id}}",
								"rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "List one notification details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The notification details are retrieved.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification1Id\")),\r",
									"        \"name\": pm.collectionVariables.get(\"Notification1Name\"),\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        },\r",
									"        \"is_activated\": true,\r",
									"        \"messages\": [\r",
									"            {\r",
									"                \"channel\": \"Email\",\r",
									"                \"subject\": \"Hello world !\",\r",
									"                \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r",
									"                \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notification</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r",
									"            }\r",
									"        ],\r",
									"        \"users\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"user1_Id\")),\r",
									"                \"name\": pm.collectionVariables.get(\"api_login_user1\")\r",
									"            },\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"user2_Id\")),\r",
									"                \"name\": pm.collectionVariables.get(\"api_login_user2\")\r",
									"            }\r",
									"        ],\r",
									"        \"contactgroups\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"Contact_Group_1_Id\")),\r",
									"                \"name\": \"contact_group_1\"\r",
									"            },\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"Contact_Group_2_Id\")),\r",
									"                \"name\": \"contact_group_2\"\r",
									"            }\r",
									"        ],\r",
									"        \"resources\": [\r",
									"            {\r",
									"                \"type\": \"hostgroup\",\r",
									"                \"events\": 5,\r",
									"                \"ids\": [\r",
									"                    {\r",
									"                        \"id\": parseInt(pm.collectionVariables.get(\"HostGroup1Id\")),\r",
									"                        \"name\": pm.collectionVariables.get(\"HostGroup1Name\")\r",
									"                    },\r",
									"                    {\r",
									"                        \"id\": parseInt(pm.collectionVariables.get(\"HostGroup2Id\")),\r",
									"                        \"name\": pm.collectionVariables.get(\"HostGroup2Name\")\r",
									"                    }\r",
									"                ],\r",
									"                \"extra\": {\r",
									"                    \"event_services\": 2\r",
									"                }\r",
									"            },\r",
									"            {\r",
									"                \"type\": \"servicegroup\",\r",
									"                \"events\": 5,\r",
									"                \"ids\": [\r",
									"                    {\r",
									"                        \"id\": parseInt(pm.collectionVariables.get(\"ServiceGroup1Id\")),\r",
									"                        \"name\": pm.collectionVariables.get(\"ServiceGroup1Name\")\r",
									"                    },\r",
									"                    {\r",
									"                        \"id\": parseInt(pm.collectionVariables.get(\"ServiceGroup2Id\")),\r",
									"                        \"name\": pm.collectionVariables.get(\"ServiceGroup2Name\")\r",
									"                    }\r",
									"                ]\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications/{{Notification1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications",
								"{{Notification1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a notification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The notification has been successfully updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_activated\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications/{{Notification3Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications",
								"{{Notification3Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a notification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The notification has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);   \r",
									"    pm.collectionVariables.unset(\"Notification2Id\");\r",
									"    pm.collectionVariables.unset(\"Notification2Name\");\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Notification1Name}}\",\r\n    \"timeperiod_id\": 1,\r\n    \"resources\": [\r\n    {\r\n        \"type\": \"hostgroup\",\r\n        \"events\": 5,\r\n        \"ids\": [ {{HostGroup1Id}}, {{HostGroup2Id}} ],\r\n        \"extra\": {\r\n        \"event_services\": 2\r\n        }\r\n    },\r\n    {\r\n        \"type\": \"servicegroup\",\r\n        \"events\": 5,\r\n        \"ids\": [ {{ServiceGroup1Id}}, {{ServiceGroup2Id}} ]\r\n    }\r\n    ],\r\n    \"messages\": [\r\n    {\r\n        \"channel\": \"Email\",\r\n        \"subject\": \"Hello world !\",\r\n        \"message\": \"just a small message\",\r\n        \"formatted_message\": \"a formatted message\"\r\n    }\r\n    ],\r\n    \"users\": [ {{user1_Id}}, {{user2_Id}} ],\r\n    \"contactgroups\": [ {{Contact_Group_1_Id}}, {{Contact_Group_2_Id}} ],\r\n    \"is_activated\": true\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications/{{Notification2Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications",
								"{{Notification2Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List notifications",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All notification are retrieved.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(2);\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification1Id\")),\r",
									"        \"is_activated\": true,\r",
									"        \"name\": pm.collectionVariables.get(\"Notification1Name\"),\r",
									"        \"user_count\": 4,\r",
									"        \"channels\": [\r",
									"            \"Email\"\r",
									"        ],\r",
									"        \"resources\": [\r",
									"            {\r",
									"                \"type\": \"hostgroup\",\r",
									"                \"count\": 2\r",
									"            },\r",
									"            {\r",
									"                \"type\": \"servicegroup\",\r",
									"                \"count\": 2\r",
									"            }\r",
									"        ],\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        }\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification3Id\")),\r",
									"        \"is_activated\": false,\r",
									"        \"name\": pm.collectionVariables.get(\"Notification3Name\"),\r",
									"        \"user_count\": 2,\r",
									"        \"channels\": [\r",
									"            \"Slack\"\r",
									"        ],\r",
									"        \"resources\": [\r",
									"            {\r",
									"                \"type\": \"hostgroup\",\r",
									"                \"count\": 1\r",
									"            },\r",
									"            {\r",
									"                \"type\": \"servicegroup\",\r",
									"                \"count\": 1\r",
									"            }\r",
									"        ],\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload ACL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL has been reloaded.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text",
								"uuid": "b25064e0-0f01-455d-8141-2f58a23c68e9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"reload\",\r\n  \"object\": \"ACL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)",
									"uuid": "75014d0a-1970-428c-90cb-37faf7740e03"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server",
									"uuid": "81d170a9-c81e-4896-9e19-1ab6a3af8b16"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server",
									"uuid": "06571fe3-eed7-4e14-8b57-ee5412bd65e9"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API",
									"uuid": "c04fea43-f614-4028-9882-fb57fb658e9e"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "0102 - Notification by user R/W",
			"item": [
				{
					"name": "Login with user R/W",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW}}\",\r\n      \"password\": \"{{api_password_user_RW}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a fourth notification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Notification4Name\", \"notif_4\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The notification has been successfully created, with name '\" + pm.collectionVariables.get(\"Notification4Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service group\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"Notification4Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification4Id\")),\r",
									"        \"name\": pm.collectionVariables.get(\"Notification4Name\"),\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        },\r",
									"        \"users\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"user1_Id\")),\r",
									"                \"name\": pm.collectionVariables.get(\"api_login_user1\")\r",
									"            },\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"user2_Id\")),\r",
									"                \"name\": pm.collectionVariables.get(\"api_login_user2\")\r",
									"            }\r",
									"        ],\r",
									"        \"contactgroups\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"Contact_Group_1_Id\")),\r",
									"                \"name\": \"contact_group_1\"\r",
									"            }\r",
									"        ],\r",
									"        \"resources\": [\r",
									"            {\r",
									"                \"type\": \"hostgroup\",\r",
									"                \"events\": 1,\r",
									"                \"ids\": [\r",
									"                    {\r",
									"                        \"id\": parseInt(pm.collectionVariables.get(\"HostGroup1Id\")),\r",
									"                        \"name\": pm.collectionVariables.get(\"HostGroup1Name\")\r",
									"                    }\r",
									"                ],\r",
									"                \"extra\": {\r",
									"                    \"event_services\": 4\r",
									"                }\r",
									"            },\r",
									"            {\r",
									"                \"type\": \"servicegroup\",\r",
									"                \"events\": 4,\r",
									"                \"ids\": [\r",
									"                    {\r",
									"                        \"id\": parseInt(pm.collectionVariables.get(\"ServiceGroup1Id\")),\r",
									"                        \"name\": pm.collectionVariables.get(\"ServiceGroup1Name\")\r",
									"                    },\r",
									"                    {\r",
									"                        \"id\": parseInt(pm.collectionVariables.get(\"ServiceGroup2Id\")),\r",
									"                        \"name\": pm.collectionVariables.get(\"ServiceGroup2Name\")\r",
									"                    }\r",
									"                ]\r",
									"            }\r",
									"        ],\r",
									"        \"messages\": [\r",
									"            {\r",
									"                \"channel\": \"Email\",\r",
									"                \"subject\": \"Hello world !\",\r",
									"                \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r",
									"                \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notif</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r",
									"            }\r",
									"        ],\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Notification4Name}}\",\r\n    \"timeperiod_id\": 1,\r\n    \"resources\": [\r\n    {\r\n        \"type\": \"hostgroup\",\r\n        \"events\": 1,\r\n        \"ids\": [ {{HostGroup1Id}} ],\r\n        \"extra\": {\r\n        \"event_services\": 4\r\n        }\r\n    },\r\n    {\r\n        \"type\": \"servicegroup\",\r\n        \"events\": 4,\r\n        \"ids\": [ {{ServiceGroup1Id}}, {{ServiceGroup2Id}} ]\r\n    }\r\n    ],\r\n    \"messages\": [\r\n    {\r\n        \"channel\": \"Email\",\r\n        \"subject\": \"Hello world !\",\r\n        \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r\n        \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notif</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r\n    }\r\n    ],\r\n    \"users\": [ {{user1_Id}}, {{user2_Id}} ],\r\n    \"contactgroups\": [ {{Contact_Group_1_Id}} ],\r\n    \"is_activated\": true\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "List notifications",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All notification are retrieved.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification1Id\")),\r",
									"        \"is_activated\": true,\r",
									"        \"name\": pm.collectionVariables.get(\"Notification1Name\"),\r",
									"        \"user_count\": 4,\r",
									"        \"channels\": [\r",
									"            \"Email\"\r",
									"        ],\r",
									"        \"resources\": [\r",
									"            {\r",
									"                \"type\": \"hostgroup\",\r",
									"                \"count\": 2\r",
									"            },\r",
									"            {\r",
									"                \"type\": \"servicegroup\",\r",
									"                \"count\": 2\r",
									"            }\r",
									"        ],\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        }\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification3Id\")),\r",
									"        \"is_activated\": false,\r",
									"        \"name\": pm.collectionVariables.get(\"Notification3Name\"),\r",
									"        \"user_count\": 2,\r",
									"        \"channels\": [\r",
									"            \"Slack\"\r",
									"        ],\r",
									"        \"resources\": [\r",
									"            {\r",
									"                \"type\": \"hostgroup\",\r",
									"                \"count\": 1\r",
									"            },\r",
									"            {\r",
									"                \"type\": \"servicegroup\",\r",
									"                \"count\": 1\r",
									"            }\r",
									"        ],\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        }\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification4Id\")),\r",
									"        \"is_activated\": true,\r",
									"        \"name\": pm.collectionVariables.get(\"Notification4Name\"),\r",
									"        \"user_count\": 3,\r",
									"        \"channels\": [\r",
									"            \"Email\"\r",
									"        ],\r",
									"        \"resources\": [\r",
									"            {\r",
									"                \"type\": \"hostgroup\",\r",
									"                \"count\": 1\r",
									"            },\r",
									"            {\r",
									"                \"type\": \"servicegroup\",\r",
									"                \"count\": 2\r",
									"            }\r",
									"        ],\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "List notification 1 rule",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The notification rule is retrieved.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.notification_id).to.eql(parseInt(pm.collectionVariables.get(\"Notification4Id\")));\r",
									"    pm.expect(responseJson.channels).to.eql({\r",
									"        \"email\": {\r",
									"            \"subject\": \"Hello world !\",\r",
									"            \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notif</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\",\r",
									"            \"contacts\": [\r",
									"                {\r",
									"                    \"email_address\": \"user1@localhost\",\r",
									"                    \"full_name\": \"user1\"\r",
									"                },\r",
									"                {\r",
									"                    \"email_address\": \"user2@localhost\",\r",
									"                    \"full_name\": \"user2\"\r",
									"                },\r",
									"                {\r",
									"                    \"email_address\": pm.collectionVariables.get('api_login_user_Nothing') + \"@localhost\",\r",
									"                    \"full_name\": pm.collectionVariables.get('api_login_user_Nothing')\r",
									"                },\r",
									"                {\r",
									"                    \"email_address\": pm.collectionVariables.get('api_login_user_RW') + \"@localhost\",\r",
									"                    \"full_name\": pm.collectionVariables.get('api_login_user_RW')\r",
									"                },\r",
									"                {\r",
									"                    \"email_address\": pm.collectionVariables.get('api_login_user_RW_filters') + \"@localhost\",\r",
									"                    \"full_name\":pm.collectionVariables.get('api_login_user_RW_filters')\r",
									"                }\r",
									"            ]\r",
									"        },\r",
									"        \"slack\": null,\r",
									"        \"sms\": null\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications/{{Notification4Id}}/rules",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications",
								"{{Notification4Id}}",
								"rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "List one notification details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The notification details are retrieved.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification4Id\")),\r",
									"        \"name\": pm.collectionVariables.get(\"Notification4Name\"),\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        },\r",
									"        \"is_activated\": true,\r",
									"        \"messages\": [\r",
									"            {\r",
									"                \"channel\": \"Email\",\r",
									"                \"subject\": \"Hello world !\",\r",
									"                \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r",
									"                \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notif</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r",
									"            }\r",
									"        ],\r",
									"        \"users\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"user1_Id\")),\r",
									"                \"name\": pm.collectionVariables.get(\"api_login_user1\")\r",
									"            },\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"user2_Id\")),\r",
									"                \"name\": pm.collectionVariables.get(\"api_login_user2\")\r",
									"            }\r",
									"        ],\r",
									"        \"contactgroups\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"Contact_Group_1_Id\")),\r",
									"                \"name\": \"contact_group_1\"\r",
									"            }\r",
									"        ],\r",
									"        \"resources\": [\r",
									"            {\r",
									"                \"type\": \"hostgroup\",\r",
									"                \"events\": 1,\r",
									"                \"ids\": [\r",
									"                    {\r",
									"                        \"id\": parseInt(pm.collectionVariables.get(\"HostGroup1Id\")),\r",
									"                        \"name\": pm.collectionVariables.get(\"HostGroup1Name\")\r",
									"                    }\r",
									"                ],\r",
									"                \"extra\": {\r",
									"                    \"event_services\": 4\r",
									"                }\r",
									"            },\r",
									"            {\r",
									"                \"type\": \"servicegroup\",\r",
									"                \"events\": 4,\r",
									"                \"ids\": [\r",
									"                    {\r",
									"                        \"id\": parseInt(pm.collectionVariables.get(\"ServiceGroup1Id\")),\r",
									"                        \"name\": pm.collectionVariables.get(\"ServiceGroup1Name\")\r",
									"                    },\r",
									"                    {\r",
									"                        \"id\": parseInt(pm.collectionVariables.get(\"ServiceGroup2Id\")),\r",
									"                        \"name\": pm.collectionVariables.get(\"ServiceGroup2Name\")\r",
									"                    }\r",
									"                ]\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications/{{Notification4Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications",
								"{{Notification4Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a notification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The notification has been successfully updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_activated\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications/{{Notification4Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications",
								"{{Notification4Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a notification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The notification has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);   \r",
									"    pm.collectionVariables.unset(\"Notification3Id\");\r",
									"    pm.collectionVariables.unset(\"Notification3Name\");\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Notification1Name}}\",\r\n    \"timeperiod_id\": 1,\r\n    \"resources\": [\r\n    {\r\n        \"type\": \"hostgroup\",\r\n        \"events\": 5,\r\n        \"ids\": [ {{HostGroup1Id}}, {{HostGroup2Id}} ],\r\n        \"extra\": {\r\n        \"event_services\": 2\r\n        }\r\n    },\r\n    {\r\n        \"type\": \"servicegroup\",\r\n        \"events\": 5,\r\n        \"ids\": [ {{ServiceGroup1Id}}, {{ServiceGroup2Id}} ]\r\n    }\r\n    ],\r\n    \"messages\": [\r\n    {\r\n        \"channel\": \"Email\",\r\n        \"subject\": \"Hello world !\",\r\n        \"message\": \"just a small message\",\r\n        \"formatted_message\": \"a formatted message\"\r\n    }\r\n    ],\r\n    \"users\": [ {{user1_Id}}, {{user2_Id}} ],\r\n    \"contactgroups\": [ {{Contact_Group_1_Id}}, {{Contact_Group_2_Id}} ],\r\n    \"is_activated\": true\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications/{{Notification3Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications",
								"{{Notification3Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List notifications",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All notification are retrieved.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(2);\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification1Id\")),\r",
									"        \"is_activated\": true,\r",
									"        \"name\": pm.collectionVariables.get(\"Notification1Name\"),\r",
									"        \"user_count\": 4,\r",
									"        \"channels\": [\r",
									"            \"Email\"\r",
									"        ],\r",
									"        \"resources\": [\r",
									"            {\r",
									"                \"type\": \"hostgroup\",\r",
									"                \"count\": 2\r",
									"            },\r",
									"            {\r",
									"                \"type\": \"servicegroup\",\r",
									"                \"count\": 2\r",
									"            }\r",
									"        ],\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        }\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification4Id\")),\r",
									"        \"is_activated\": false,\r",
									"        \"name\": pm.collectionVariables.get(\"Notification4Name\"),\r",
									"        \"user_count\": 3,\r",
									"        \"channels\": [\r",
									"            \"Email\"\r",
									"        ],\r",
									"        \"resources\": [\r",
									"            {\r",
									"                \"type\": \"hostgroup\",\r",
									"                \"count\": 1\r",
									"            },\r",
									"            {\r",
									"                \"type\": \"servicegroup\",\r",
									"                \"count\": 2\r",
									"            }\r",
									"        ],\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user R/W user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)",
									"uuid": "57da3091-4788-4b50-9087-15fb3ffe198e"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server",
									"uuid": "40bc7367-533e-4013-8932-8da834caf85a"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server",
									"uuid": "fff9cec8-4166-4fa7-903c-6475b597c187"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API",
									"uuid": "81f8bd54-c57e-4be7-8acf-97b703c3026c"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "0103 - Notification by user R/W with filters",
			"item": [
				{
					"name": "Login with user R/W with filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW_filters'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a fifth notification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The notification has been successfully created, because the user does not have access to all resources.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"Invalid ID provided for resource.ids\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"notif-5\",\r\n    \"timeperiod_id\": 1,\r\n    \"resources\": [\r\n    {\r\n        \"type\": \"hostgroup\",\r\n        \"events\": 5,\r\n        \"ids\": [ {{HostGroup1Id}}, {{HostGroup2Id}} ],\r\n        \"extra\": {\r\n        \"event_services\": 2\r\n        }\r\n    },\r\n    {\r\n        \"type\": \"servicegroup\",\r\n        \"events\": 5,\r\n        \"ids\": [ {{ServiceGroup1Id}}, {{ServiceGroup2Id}} ]\r\n    }\r\n    ],\r\n    \"messages\": [\r\n    {\r\n        \"channel\": \"Email\",\r\n        \"subject\": \"Hello world !\",\r\n        \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r\n        \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notification</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r\n    }\r\n    ],\r\n    \"users\": [ {{user1_Id}}, {{user2_Id}} ],\r\n    \"contactgroups\": [ {{Contact_Group_1_Id}}, {{Contact_Group_2_Id}} ],\r\n    \"is_activated\": true\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "List notifications",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All notification are retrieved.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(2);\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification1Id\")),\r",
									"        \"is_activated\": true,\r",
									"        \"name\": pm.collectionVariables.get(\"Notification1Name\"),\r",
									"        \"user_count\": 4,\r",
									"        \"channels\": [\r",
									"            \"Email\"\r",
									"        ],\r",
									"        \"resources\": [],\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        }\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification4Id\")),\r",
									"        \"is_activated\": false,\r",
									"        \"name\": pm.collectionVariables.get(\"Notification4Name\"),\r",
									"        \"user_count\": 3,\r",
									"        \"channels\": [\r",
									"            \"Email\"\r",
									"        ],\r",
									"        \"resources\": [],\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "List notification 1 rule",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The notification rule is retrieved.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.notification_id).to.eql(parseInt(pm.collectionVariables.get(\"Notification4Id\")));\r",
									"    pm.expect(responseJson.channels).to.eql({\r",
									"        \"email\": {\r",
									"            \"subject\": \"Hello world !\",\r",
									"            \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notif</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\",\r",
									"            \"contacts\": [\r",
									"                {\r",
									"                    \"email_address\": \"user1@localhost\",\r",
									"                    \"full_name\": \"user1\"\r",
									"                },\r",
									"                {\r",
									"                    \"email_address\": \"user2@localhost\",\r",
									"                    \"full_name\": \"user2\"\r",
									"                },\r",
									"                {\r",
									"                    \"email_address\": pm.collectionVariables.get('api_login_user_Nothing') + \"@localhost\",\r",
									"                    \"full_name\": pm.collectionVariables.get('api_login_user_Nothing')\r",
									"                },\r",
									"                {\r",
									"                    \"email_address\": pm.collectionVariables.get('api_login_user_RW') + \"@localhost\",\r",
									"                    \"full_name\": pm.collectionVariables.get('api_login_user_RW')\r",
									"                },\r",
									"                {\r",
									"                    \"email_address\": pm.collectionVariables.get('api_login_user_RW_filters') + \"@localhost\",\r",
									"                    \"full_name\":pm.collectionVariables.get('api_login_user_RW_filters')\r",
									"                }\r",
									"            ]\r",
									"        },\r",
									"        \"slack\": null,\r",
									"        \"sms\": null\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications/{{Notification4Id}}/rules",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications",
								"{{Notification4Id}}",
								"rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "List one notification details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The notification details are retrieved.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification4Id\")),\r",
									"        \"name\": pm.collectionVariables.get(\"Notification4Name\"),\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        },\r",
									"        \"is_activated\": false,\r",
									"        \"messages\": [\r",
									"            {\r",
									"                \"channel\": \"Email\",\r",
									"                \"subject\": \"Hello world !\",\r",
									"                \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r",
									"                \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notif</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r",
									"            }\r",
									"        ],\r",
									"        \"users\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"user1_Id\")),\r",
									"                \"name\": pm.collectionVariables.get(\"api_login_user1\")\r",
									"            },\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"user2_Id\")),\r",
									"                \"name\": pm.collectionVariables.get(\"api_login_user2\")\r",
									"            }\r",
									"        ],\r",
									"        \"contactgroups\": [\r",
									"            {\r",
									"                \"id\": parseInt(pm.collectionVariables.get(\"Contact_Group_1_Id\")),\r",
									"                \"name\": \"contact_group_1\"\r",
									"            }\r",
									"        ],\r",
									"        \"resources\": [\r",
									"            {\r",
									"                \"type\": \"hostgroup\",\r",
									"                \"events\": 1,\r",
									"                \"ids\": [],\r",
									"                \"extra\": {\r",
									"                    \"event_services\": 4\r",
									"                }\r",
									"            },\r",
									"            {\r",
									"                \"type\": \"servicegroup\",\r",
									"                \"events\": 4,\r",
									"                \"ids\": []\r",
									"            }\r",
									"        ]\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications/{{Notification4Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications",
								"{{Notification4Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a notification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The notification has been successfully updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_activated\": true\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications/{{Notification4Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications",
								"{{Notification4Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List notifications",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All notification are retrieved.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.result.length).to.eql(2);\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification1Id\")),\r",
									"        \"is_activated\": true,\r",
									"        \"name\": pm.collectionVariables.get(\"Notification1Name\"),\r",
									"        \"user_count\": 4,\r",
									"        \"channels\": [\r",
									"            \"Email\"\r",
									"        ],\r",
									"        \"resources\": [],\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        }\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Notification4Id\")),\r",
									"        \"is_activated\": true,\r",
									"        \"name\": pm.collectionVariables.get(\"Notification4Name\"),\r",
									"        \"user_count\": 3,\r",
									"        \"channels\": [\r",
									"            \"Email\"\r",
									"        ],\r",
									"        \"resources\": [],\r",
									"        \"timeperiod\": {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"24x7\"\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user R/W user with filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)",
									"uuid": "fe52e34f-6be6-4c18-9ac9-d8909eb071f4"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server",
									"uuid": "38260288-912e-4881-bb66-354c4a1f84e0"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server",
									"uuid": "0f623a65-7e41-43a1-affe-db5b49c39f53"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API",
									"uuid": "8eda9eda-1b6a-410c-97d4-749abaac1c41"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "0104 - Notification by user without rights",
			"item": [
				{
					"name": "Login with user Nothing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Nothing'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Nothing}}\",\r\n      \"password\": \"{{api_password_user_Nothing}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a notification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Notification1Name\", \"notif_1\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The notification has not been created, because the user does not have sufficient rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to add a notification configuration\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Notification1Name}}\",\r\n    \"timeperiod_id\": 1,\r\n    \"resources\": [\r\n    {\r\n        \"type\": \"hostgroup\",\r\n        \"events\": 5,\r\n        \"ids\": [ {{HostGroup1Id}}, {{HostGroup2Id}} ],\r\n        \"extra\": {\r\n        \"event_services\": 2\r\n        }\r\n    },\r\n    {\r\n        \"type\": \"servicegroup\",\r\n        \"events\": 5,\r\n        \"ids\": [ {{ServiceGroup1Id}}, {{ServiceGroup2Id}} ]\r\n    }\r\n    ],\r\n    \"messages\": [\r\n    {\r\n        \"channel\": \"Email\",\r\n        \"subject\": \"Hello world !\",\r\n        \"message\": \"{\\u0022root\\u0022:{\\u0022children\\u0022:[{\\u0022children\\u0022:[{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Centreon notification\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Notification Type: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{NOTIFICATIONTYPE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Resource: {{NAME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022State: \\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:1,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022{{STATE}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Date\\/Time: {{SHORTDATETIME}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022type\\u0022:\\u0022linebreak\\u0022,\\u0022version\\u0022:1},{\\u0022detail\\u0022:0,\\u0022format\\u0022:0,\\u0022mode\\u0022:\\u0022normal\\u0022,\\u0022style\\u0022:\\u0022\\u0022,\\u0022text\\u0022:\\u0022Additional Info: {{OUTPUT}}\\u0022,\\u0022type\\u0022:\\u0022text\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022paragraph\\u0022,\\u0022version\\u0022:1}],\\u0022direction\\u0022:\\u0022ltr\\u0022,\\u0022format\\u0022:\\u0022\\u0022,\\u0022indent\\u0022:0,\\u0022type\\u0022:\\u0022root\\u0022,\\u0022version\\u0022:1}}\",\r\n        \"formatted_message\": \"<p class=\\\"css-1qf631s-paragraph\\\" dir=\\\"ltr\\\"><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">Centreon notification</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Notification Type: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{NOTIFICATIONTYPE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Resource: {{NAME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">State: </span><b><strong class=\\\"css-1jxftah-bold\\\" style=\\\"white-space: pre-wrap;\\\">{{STATE}}</strong></b><br><br><span style=\\\"white-space: pre-wrap;\\\">Date/Time: {{SHORTDATETIME}}</span><br><br><span style=\\\"white-space: pre-wrap;\\\">Additional Info: {{OUTPUT}}</span></p>\"\r\n    }\r\n    ],\r\n    \"users\": [ {{user1_Id}}, {{user2_Id}} ],\r\n    \"contactgroups\": [ {{Contact_Group_1_Id}}, {{Contact_Group_2_Id}} ],\r\n    \"is_activated\": true\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "List notifications",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The notifications have not been listed, because the user does not have sufficient rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to list notifications configurations\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "List notification 1 rule",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The notification rule has not been displayed, because the user does not have sufficient rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to display the details of the notification\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications/{{Notification4Id}}/rules",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications",
								"{{Notification4Id}}",
								"rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "List one notification details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The notification detail has not been displayed, because the user does not have sufficient rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to display the details of the notification\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications/{{Notification4Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications",
								"{{Notification4Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a notification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The notification rule has not been updated, because the user does not have sufficient rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to partially update a notification configuration\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_activated\": true\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications/{{Notification4Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications",
								"{{Notification4Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a notification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The notification rule has not been deleted, because the user does not have sufficient rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to delete a notification configuration\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications/{{Notification4Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications",
								"{{Notification4Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete multiple notifications",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"console.log(responseJson);\r",
									"pm.test(\"The notification rule has not been deleted, because the user does not have sufficient rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to delete a notification configuration\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [ {{Notification1Id}}, {{Notification4Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications/_delete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications",
								"_delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user Nothing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)",
									"uuid": "5bd21239-dd93-47b9-b56c-beda36bf0fd9"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server",
									"uuid": "4d72931c-7d29-4d46-9eb6-0d575af1687c"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server",
									"uuid": "8a847ca2-173f-4770-9363-8042fa801543"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API",
									"uuid": "050b7fad-8589-4902-8d4e-8ccd86e7ad03"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "0105 - Multiple notification deletion by user R/W",
			"item": [
				{
					"name": "Login with user R/W",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW}}\",\r\n      \"password\": \"{{api_password_user_RW}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete multiple notifications",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"console.log(responseJson);\r",
									"pm.test(\"The notifications have not been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(207);\r",
									"\r",
									"    pm.expect(responseJson.results.length).to.eql(2);\r",
									"\r",
									"    pm.expect(responseJson.results[0]).to.eql({\r",
									"        \"href\": \"/centreon/api/latest/configuration/notifications/\" + pm.collectionVariables.get(\"Notification1Id\"),\r",
									"        \"status\": 204,\r",
									"        \"message\": null\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.results[1]).to.eql({\r",
									"        \"href\": \"/centreon/api/latest/configuration/notifications/\" + pm.collectionVariables.get(\"Notification4Id\"),\r",
									"        \"status\": 204,\r",
									"        \"message\": null\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [ {{Notification1Id}}, {{Notification4Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/notifications/_delete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"notifications",
								"_delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user R/W user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)",
									"uuid": "19e4f2dd-ad75-4892-952d-e642c021836f"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server",
									"uuid": "1bbd7822-c715-452f-a507-8878ce265504"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server",
									"uuid": "bcb25b36-6a8f-409e-898b-ad448363334c"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API",
									"uuid": "2be632af-8cd1-4469-b98f-daf73a286652"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}