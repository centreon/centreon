{
	"info": {
		"_postman_id": "6a58fa90-5bf3-4de8-9738-04c0a45e7799",
		"name": "Host_Group",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16182525",
		"_collection_link": "https://centreon-api-testing.postman.co/workspace/Centreon-Web---API-v2~d8660f05-3c64-4c5b-af73-1a5543bff4e1/collection/16182525-6a58fa90-5bf3-4de8-9738-04c0a45e7799?action=share&source=collection_link&creator=16182525"
	},
	"item": [
		{
			"name": "Log in as Admin  ",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user_with_RW_rights  ",
			"item": [
				{
					"name": "Add user_with_RW_rights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_RW\", \"user_with_RW_rights\");\r",
									"pm.collectionVariables.set(\"api_password_user_RW\", \"Centreon!123\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};{{api_login_user_RW}};{{api_login_user_RW}}@localhost;{{api_password_user_RW}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;RW_ALL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;{{api_login_user_RW}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu RW",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RW right",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Read/Write rights has been successfully.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;1;Configuration\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RW to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user_with_RW_rights_filters  ",
			"item": [
				{
					"name": "Add user_with_RW_rights_filters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_RW_filters\", \"user_with_RW_rights_filters\");\r",
									"pm.collectionVariables.set(\"api_password_user_RW_filters\", \"Centreon!123\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW_filters}};{{api_login_user_RW_filters}};{{api_login_user_RW_filters}}@localhost;{{api_password_user_RW_filters}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW_filters}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW_filters}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RW_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_limited;RW_limited\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RW_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_limited;{{api_login_user_RW_filters}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Resources limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLRESOURCE\",\r\n  \"values\": \"limited;limited\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RW_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_limited;limited\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RW to RW_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_limited;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user_with_R_rights  ",
			"item": [
				{
					"name": "Add user_with_R_rights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_Read\", \"user_with_R_rights\");\r",
									"pm.collectionVariables.set(\"api_password_user_Read\", \"Centreon!123\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read}};{{api_login_user_Read}};{{api_login_user_Read}}@localhost;{{api_password_user_Read}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;RO_ALL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;{{api_login_user_Read}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu RO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RO;RO\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RO right",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Read Only rights has been successfully.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantro\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RO;1;Configuration\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RO to RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;RO\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user_with_R_rights_filters  ",
			"item": [
				{
					"name": "Add user_with_R_rights_filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_Read_filters\", \"user_with_R_rights_filters\");\r",
									"pm.collectionVariables.set(\"api_password_user_Read_filters\", \"Centreon!123\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read_filters}};{{api_login_user_Read_filters}};{{api_login_user_Read_filters}}@localhost;{{api_password_user_Read_filters}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read_filters}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read_filters}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RO_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_limited;RO_limited\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RO_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_limited;{{api_login_user_Read_filters}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RO_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_limited;limited\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RO to RO_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_limited;RO\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user_nothing  ",
			"item": [
				{
					"name": "Add user_nothing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_Nothing\", \"user_nothing\");\r",
									"pm.collectionVariables.set(\"api_password_user_Nothing\", \"Centreon!123\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};{{api_login_user_Nothing}};{{api_login_user_Nothing}}@localhost;{{api_password_user_Nothing}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;{{api_login_user_Nothing}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Nothing to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Host Group by Admin",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a first host category (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host category has been successfully created, with name '\" + pm.collectionVariables.get(\"HostCategory1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostCategory1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host category\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"HostCategory1Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostCategory1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostCategory1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostCategory1Alias\"),\r",
									"        \"is_activated\": false,\r",
									"        \"comment\":\"Created by Admin\"  \r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostCategory1Name\", \"Test_H_Category_1\");\r",
									"pm.collectionVariables.set(\"HostCategory1Alias\", \"I'm a host category!\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"{{HostCategory1Name}}\",\n    \"alias\":\"{{HostCategory1Alias}}\",\n    \"is_activated\": false,\n    \"comment\":\"Created by Admin\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a second host category (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host category has been successfully created, with name '\" + pm.collectionVariables.get(\"HostCategory2Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostCategory2Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host category\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"HostCategory2Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostCategory2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostCategory2Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostCategory2Alias\"),\r",
									"        \"is_activated\": true,\r",
									"        \"comment\":\"Created by Admin\"  \r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostCategory2Name\", \"Test_H_Category_2\");\r",
									"pm.collectionVariables.set(\"HostCategory2Alias\", \"I'm a host category!\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"{{HostCategory2Name}}\",\n    \"alias\":\"{{HostCategory2Alias}}\",\n    \"is_activated\": true,\n    \"comment\":\"Created by Admin\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new host group with all properties defined (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host group has been successfully created, with name '\" + pm.collectionVariables.get(\"HostGroup1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostGroup1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host group\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"HostGroup1Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup1Alias\"),\r",
									"        \"notes\": \"I am Groot\",\r",
									"        \"notes_url\": \"www.google.fr\",\r",
									"        \"action_url\": \"www.google.com\",\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": 3,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"Hello world ! 1\",\r",
									"        \"is_activated\": false\r",
									"    });\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"The Location parameter is in the header.\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostGroup1Name\", \"Test_H_Group_1\");\r",
									"pm.collectionVariables.set(\"HostGroup1Alias\", \"I should be successful !\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{HostGroup1Name}}\",\n    \"alias\": \"{{HostGroup1Alias}}\",\n    \"notes\": \"I am Groot\",\n    \"notes_url\": \"www.google.fr\",\n    \"action_url\": \"www.google.com\",\n    \"icon_id\": null,\n    \"icon_map_id\": null,\n    \"rrd\": 3,\n    \"geo_coords\": \"\",\n    \"comment\": \"Hello world ! 1\",\n    \"is_activated\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available host group (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host group retrieved are listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function() {\r",
									"    // Check the number of host groups (1)\r",
									"    pm.expect(responseJson.result.length).to.eql(1);\r",
									"\r",
									"    // Check the properties of each host group\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup1Alias\"),\r",
									"        \"notes\": \"I am Groot\",\r",
									"        \"notes_url\": \"www.google.fr\",\r",
									"        \"action_url\": \"www.google.com\",\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": 3,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"Hello world ! 1\",\r",
									"        \"is_activated\": false\r",
									"    });\r",
									"    \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new host group with mandatory properties defined (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host group has been successfully created, with name '\" + pm.collectionVariables.get(\"HostGroup2Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host group\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"HostGroup2Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup2Name\"),\r",
									"        \"alias\": null,\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"The Location parameter is in the header.\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostGroup2Name\", \"Test_H_Group_2\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{HostGroup2Name}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available host groups (2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host groups retrieved are listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function () {\r",
									"    // Check the number of host groups (2)\r",
									"    pm.expect(responseJson.result.length).to.eql(2);\r",
									"\r",
									"    // Check the properties of each host group\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup1Alias\"),\r",
									"        \"notes\": \"I am Groot\",\r",
									"        \"notes_url\": \"www.google.fr\",\r",
									"        \"action_url\": \"www.google.com\",\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": 3,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"Hello world ! 1\",\r",
									"        \"is_activated\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup2Name\"),\r",
									"        \"alias\": null,\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new host group without name (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host group has not been created, because the name is mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[name] The property name is required\\n\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"alias\":\"Oh I'm your third group !\", \n\"comment\": \"Hello, I should not work !\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new host group without name (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host group has not been created, because the name can't be empty.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[NewHostGroup::name] The value \\\"\\\" is too short, it should have at least 1 characters, but only has 0 characters\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\":\"\",\n\"alias\":\"Hello, I'm your fourth group!\", \n\"comment\": \"Oh, I should not work too!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new host group without alias (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host group has been successfully created, with name '\" + pm.collectionVariables.get(\"HostGroup3Name\") + \"' and no alias.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host group\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"HostGroup3Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup3Name\"),\r",
									"        \"alias\": null,\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"I'm blue!\",\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"The Location parameter is in the header.\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostGroup3Name\", \"Test_H_Group_3\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"{{HostGroup3Name}}\",\n\"comment\": \"I'm blue!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new host group with wrong type of value (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host group has not been created, because there are values of the wrong type.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[name] Boolean value found, but a string is required\\n[alias] Boolean value found, but a string or a null is required\\n[notes] Integer value found, but a string or a null is required\\n[notes_url] Boolean value found, but a string or a null is required\\n[action_url] Integer value found, but a string or a null is required\\n[icon_id] String value found, but an integer or a null is required\\n[icon_map_id] String value found, but an integer or a null is required\\n[rrd] Boolean value found, but an integer or a null is required\\n[geo_coords] Boolean value found, but a string or a null is required\\n[comment] Integer value found, but a string or a null is required\\n[is_activated] String value found, but a boolean is required\\n\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\":true,\n\"alias\":true,\n\"notes\": 0,\n\"notes_url\": false,\n\"action_url\": 1,\n\"icon_id\": \"8\",\n\"icon_map_id\": \"ç\",\n\"rrd\": true,\n\"geo_coords\": true,\n\"is_activated\":\"true\",\n\"comment\": 3\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new host group with special characters (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host group has been successfully created, with name '\" + pm.collectionVariables.get(\"HostGroup4Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostGroup4Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host group\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"HostGroup4Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup4Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup4Alias\"),\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"The Location parameter is in the header.\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostGroup4Name\", \"Test_H_Grôup_4!\");\r",
									"pm.collectionVariables.set(\"HostGroup4Alias\", \"I want to break free !\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"{{HostGroup4Name}}\",\n\"alias\": \"{{HostGroup4Alias}}\",\n\"comment\":\"   \"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available host groups (4)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host groups retrieved are listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function () {\r",
									"    // Check the number of host groups (4)\r",
									"    pm.expect(responseJson.result.length).to.eql(4);\r",
									"\r",
									"    // Check the properties of each host group\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup1Alias\"),\r",
									"        \"notes\": \"I am Groot\",\r",
									"        \"notes_url\": \"www.google.fr\",\r",
									"        \"action_url\": \"www.google.com\",\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": 3,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"Hello world ! 1\",\r",
									"        \"is_activated\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup2Name\"),\r",
									"        \"alias\": null,\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup3Name\"),\r",
									"        \"alias\": null,\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"I'm blue!\",\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[3]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup4Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup4Alias\"),\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Show one host group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A host group has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host group retrieved is listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function() {\r",
									"\r",
									"    // Check the properties of the host group\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup3Name\"),\r",
									"        \"alias\": null,\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"I'm blue!\",\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup3Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups",
								"{{HostGroup3Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new host linked with HG and HC",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Host1Name\", \"host_001\");\r",
									"pm.collectionVariables.set(\"Host1Alias\", \"I'm the first host created by admin\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Host1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"Host1Id\", response.id);\r",
									"    console.log(response);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Host1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"Host1Alias\"),\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"monitoring_server_id\": 1,\r",
									"        \"snmp_version\": null,\r",
									"        \"timezone_id\": null,\r",
									"        \"severity_id\": null,\r",
									"        \"check_command_id\": null,\r",
									"        \"check_timeperiod_id\": null,\r",
									"        \"note_url\": \"noteUrl-value\",\r",
									"        \"note\": \"note-value\",\r",
									"        \"action_url\": \"actionUrl-value\",\r",
									"        \"max_check_attempts\": 3,\r",
									"        \"normal_check_interval\": 5,\r",
									"        \"retry_check_interval\": 2,\r",
									"        \"active_check_enabled\": 2,\r",
									"        \"passive_check_enabled\": 2,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"notification_options\": null,\r",
									"        \"notification_interval\": null,\r",
									"        \"notification_timeperiod_id\": null,\r",
									"        \"add_inherited_contact_group\": false,\r",
									"        \"add_inherited_contact\": false,\r",
									"        \"first_notification_delay\": null,\r",
									"        \"recovery_notification_delay\": null,\r",
									"        \"acknowledgement_timeout\": null,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"freshness_threshold\": null,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_alternative\": null,\r",
									"        \"comment\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.categories[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostCategory1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostCategory1Name\")\r",
									"    });\r",
									"    pm.expect(response.templates).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.groups[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup1Name\")\r",
									"    });\r",
									"    pm.expect(response.macros).to.be.an('Array').that.is.empty;\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Host1Name}}\",\r\n    \"alias\": \"{{Host1Alias}}\",\r\n    \"address\": \"127.0.0.1\",\r\n    \"monitoring_server_id\": 1,\r\n    \"note_url\": \"noteUrl-value\",\r\n    \"note\": \"note-value\",\r\n    \"action_url\": \"actionUrl-value\",\r\n    \"max_check_attempts\": 3,\r\n    \"normal_check_interval\": 5,\r\n    \"retry_check_interval\": 2,\r\n    \"categories\": [ {{HostCategory1Id}} ],\r\n    \"groups\": [ {{HostGroup1Id}} ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new host linked with HG",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Host2Name\", \"host_002\");\r",
									"pm.collectionVariables.set(\"Host2Alias\", \"I'm the second host created by admin\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Host2Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host2Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"Host2Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Host2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host2Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"Host2Alias\"),\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"monitoring_server_id\": 1,\r",
									"        \"snmp_version\": null,\r",
									"        \"timezone_id\": null,\r",
									"        \"severity_id\": null,\r",
									"        \"check_command_id\": null,\r",
									"        \"check_timeperiod_id\": null,\r",
									"        \"note_url\": \"noteUrl-value\",\r",
									"        \"note\": \"note-value\",\r",
									"        \"action_url\": \"actionUrl-value\",\r",
									"        \"max_check_attempts\": 3,\r",
									"        \"normal_check_interval\": 5,\r",
									"        \"retry_check_interval\": 2,\r",
									"        \"active_check_enabled\": 2,\r",
									"        \"passive_check_enabled\": 2,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"notification_options\": null,\r",
									"        \"notification_interval\": null,\r",
									"        \"notification_timeperiod_id\": null,\r",
									"        \"add_inherited_contact_group\": false,\r",
									"        \"add_inherited_contact\": false,\r",
									"        \"first_notification_delay\": null,\r",
									"        \"recovery_notification_delay\": null,\r",
									"        \"acknowledgement_timeout\": null,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"freshness_threshold\": null,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_alternative\": null,\r",
									"        \"comment\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.templates).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.groups[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup2Name\")\r",
									"    });\r",
									"    pm.expect(response.macros).to.be.an('Array').that.is.empty;\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Host2Name}}\",\r\n    \"alias\": \"{{Host2Alias}}\",\r\n    \"address\": \"127.0.0.1\",\r\n    \"monitoring_server_id\": 1,\r\n    \"note_url\": \"noteUrl-value\",\r\n    \"note\": \"note-value\",\r\n    \"action_url\": \"actionUrl-value\",\r\n    \"max_check_attempts\": 3,\r\n    \"normal_check_interval\": 5,\r\n    \"retry_check_interval\": 2,\r\n    \"groups\": [ {{HostGroup2Id}} ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new host linked with HG and HC",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Host3Name\", \"host_003\");\r",
									"pm.collectionVariables.set(\"Host3Alias\", \"I'm the third host created by admin\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Host3Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host3Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"Host3Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Host3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host3Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"Host3Alias\"),\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"monitoring_server_id\": 1,\r",
									"        \"snmp_version\": null,\r",
									"        \"timezone_id\": null,\r",
									"        \"severity_id\": null,\r",
									"        \"check_command_id\": null,\r",
									"        \"check_timeperiod_id\": null,\r",
									"        \"note_url\": \"noteUrl-value\",\r",
									"        \"note\": \"note-value\",\r",
									"        \"action_url\": \"actionUrl-value\",\r",
									"        \"max_check_attempts\": 3,\r",
									"        \"normal_check_interval\": 5,\r",
									"        \"retry_check_interval\": 2,\r",
									"        \"active_check_enabled\": 2,\r",
									"        \"passive_check_enabled\": 2,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"notification_options\": null,\r",
									"        \"notification_interval\": null,\r",
									"        \"notification_timeperiod_id\": null,\r",
									"        \"add_inherited_contact_group\": false,\r",
									"        \"add_inherited_contact\": false,\r",
									"        \"first_notification_delay\": null,\r",
									"        \"recovery_notification_delay\": null,\r",
									"        \"acknowledgement_timeout\": null,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"freshness_threshold\": null,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_alternative\": null,\r",
									"        \"comment\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.categories[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostCategory2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostCategory2Name\")\r",
									"    });\r",
									"    pm.expect(response.templates).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.groups[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup3Name\")\r",
									"    });\r",
									"    pm.expect(response.macros).to.be.an('Array').that.is.empty;\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Host3Name}}\",\r\n    \"alias\": \"{{Host3Alias}}\",\r\n    \"address\": \"127.0.0.1\",\r\n    \"monitoring_server_id\": 1,\r\n    \"note_url\": \"noteUrl-value\",\r\n    \"note\": \"note-value\",\r\n    \"action_url\": \"actionUrl-value\",\r\n    \"max_check_attempts\": 3,\r\n    \"normal_check_interval\": 5,\r\n    \"retry_check_interval\": 2,\r\n    \"categories\": [ {{HostCategory2Id}} ],\r\n    \"groups\": [ {{HostGroup3Id}} ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available host groups filtered with category 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host groups retrieved are listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function () {\r",
									"    // Check the number of host groups (1)\r",
									"    pm.expect(responseJson.result.length).to.eql(1);\r",
									"\r",
									"    // Check the properties of each host group\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup1Alias\"),\r",
									"        \"notes\": \"I am Groot\",\r",
									"        \"notes_url\": \"www.google.fr\",\r",
									"        \"action_url\": \"www.google.com\",\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": 3,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"Hello world ! 1\",\r",
									"        \"is_activated\": false\r",
									"    });\r",
									"    \r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups/?search={\"hostcategory.id\":{{HostCategory1Id}}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups",
								""
							],
							"query": [
								{
									"key": "search",
									"value": "{\"hostcategory.id\":{{HostCategory1Id}}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available host groups filtered with category 1 or 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host groups retrieved are listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function () {\r",
									"    // Check the number of host groups (2)\r",
									"    pm.expect(responseJson.result.length).to.eql(2);\r",
									"\r",
									"    // Check the properties of each host group\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup1Alias\"),\r",
									"        \"notes\": \"I am Groot\",\r",
									"        \"notes_url\": \"www.google.fr\",\r",
									"        \"action_url\": \"www.google.com\",\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": 3,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"Hello world ! 1\",\r",
									"        \"is_activated\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup3Name\"),\r",
									"        \"alias\": null,\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"I'm blue!\",\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups/?search={ \"$or\":[{\"hostcategory.id\":{{HostCategory1Id}}},{\"hostcategory.id\":{{HostCategory2Id}}}]}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups",
								""
							],
							"query": [
								{
									"key": "search",
									"value": "{ \"$or\":[{\"hostcategory.id\":{{HostCategory1Id}}},{\"hostcategory.id\":{{HostCategory2Id}}}]}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a host group (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host group with name '\" + pm.collectionVariables.get(\"HostGroup1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostGroup1Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"HostGroup1Name\");\r",
									"    pm.collectionVariables.unset(\"HostGroup1Alias\");\r",
									"    pm.collectionVariables.unset(\"HostGroup1Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups",
								"{{HostGroup1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update of a host group (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host group has been successfully updated, with name '\" + pm.collectionVariables.get(\"HostGroup3Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostGroup3Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostGroup3Name\", \"Test_Update_H_Group_3\");\r",
									"pm.collectionVariables.set(\"HostGroup3Alias\", \"I'm a your third group but I changgeeeee!\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{HostGroup3Name}}\",\n    \"alias\": \"{{HostGroup3Alias}}\",\n    \"is_activated\":false,\n    \"comment\":\"Transformmattiooonnnnnn!!!!!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup3Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups",
								"{{HostGroup3Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available host groups (3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host groups retrieved are listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function() {\r",
									"    // Check the number of host groups (3)\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"\r",
									"    // Check the properties of each host group\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup2Name\"),\r",
									"        \"alias\": null,\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup4Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup4Alias\"),\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup3Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup3Alias\"),\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"Transformmattiooonnnnnn!!!!!\",\r",
									"        \"is_activated\": false\r",
									"    });\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload ACL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "Host Group by user R/W without filters",
			"item": [
				{
					"name": "Login with Read/Write user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW}}\",\r\n      \"password\": \"{{api_password_user_RW}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The host with name '\" + pm.collectionVariables.get(\"Host2Name\") + \"' has been successfully updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"categories\": [ {{HostCategory1Id}}, {{HostCategory2Id}} ],\r\n    \"groups\": [ {{HostGroup2Id}} ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/{{Host2Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"{{Host2Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new host group by user Read/Write (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host group has been successfully created, with name '\" + pm.collectionVariables.get(\"HostGroup5Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostGroup5Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host group\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"HostGroup5Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup5Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup5Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup5Alias\"),\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"I was created by the Read/Write user\",\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"The Location parameter is in the header.\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostGroup5Name\", \"Test_H_Group_5\");\r",
									"pm.collectionVariables.set(\"HostGroup5Alias\", \"I'm the fifth successful group !\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\":\"{{HostGroup5Name}}\",\n\"alias\":\"{{HostGroup5Alias}}\",\n\"comment\":\"I was created by the Read/Write user\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available host groups filtered with category 1 or 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host groups retrieved are listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function () {\r",
									"    // Check the number of host groups (2)\r",
									"    pm.expect(responseJson.result.length).to.eql(2);\r",
									"\r",
									"    // Check the properties of each host group\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup2Name\"),\r",
									"        \"alias\": null,\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup3Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup3Alias\"),\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"Transformmattiooonnnnnn!!!!!\",\r",
									"        \"is_activated\": false\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups/?search={ \"$or\":[{\"hostcategory.id\":{{HostCategory1Id}}},{\"hostcategory.id\":{{HostCategory2Id}}}]}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups",
								""
							],
							"query": [
								{
									"key": "search",
									"value": "{ \"$or\":[{\"hostcategory.id\":{{HostCategory1Id}}},{\"hostcategory.id\":{{HostCategory2Id}}}]}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available host groups filtered with category 1 and 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The list is empty.\", function () {\r",
									"    // Check the number of host groups (0)\r",
									"    pm.expect(responseJson.result.length).to.eql(0);\r",
									"\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups/?search={ \"$and\":[{\"hostcategory.id\":{{HostCategory1Id}}},{\"hostcategory.id\":{{HostCategory2Id}}}]}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups",
								""
							],
							"query": [
								{
									"key": "search",
									"value": "{ \"$and\":[{\"hostcategory.id\":{{HostCategory1Id}}},{\"hostcategory.id\":{{HostCategory2Id}}}]}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available host group (4)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host groups retrieved are listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function() {\r",
									"    // Check the number of host groups (4)\r",
									"    pm.expect(responseJson.result.length).to.eql(4);\r",
									"\r",
									"    // Check the properties of each host group\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup2Name\"),\r",
									"        \"alias\": null,\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup4Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup4Alias\"),\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup5Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup5Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup5Alias\"),\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"I was created by the Read/Write user\",\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[3]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup3Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup3Alias\"),\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"Transformmattiooonnnnnn!!!!!\",\r",
									"        \"is_activated\": false\r",
									"    });\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show one host group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host group retrieved is listed with: name, alias, is_activated and comments\", function() {\r",
									"    // Check the properties of the host group\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup4Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup4Alias\"),\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup4Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups",
								"{{HostGroup4Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a host group (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host group with name '\" + pm.collectionVariables.get(\"HostGroup3Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostGroup3Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"HostGroup3Name\");\r",
									"    pm.collectionVariables.unset(\"HostGroup3Alias\");\r",
									"    pm.collectionVariables.unset(\"HostGroup3Id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup3Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups",
								"{{HostGroup3Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update of a host group (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host group has been successfully updated, with name '\" + pm.collectionVariables.get(\"HostGroup4Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostGroup4Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostGroup4Name\", \"Test_H_Update_Group_4\");\r",
									"pm.collectionVariables.set(\"HostGroup4Alias\", \"So many changes\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"{{HostGroup4Name}}\",\n    \"alias\":\"{{HostGroup4Alias}}\",\n    \"notes_url\":\"I was created by the Read/Write user\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup4Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups",
								"{{HostGroup4Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available host group (3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host groups retrieved are listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function() {\r",
									"    // Check the number of host groups (3)\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"\r",
									"    // Check the properties of each host group\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup2Name\"),\r",
									"        \"alias\": null,\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup5Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup5Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup5Alias\"),\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"I was created by the Read/Write user\",\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup4Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup4Alias\"),\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": \"I was created by the Read/Write user\",\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from R/W user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "Host Group by user R/W with filters",
			"item": [
				{
					"name": "Without access to host or host groups",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"The host with name '\" + pm.collectionVariables.get(\"Host3Name\") + \"' has been successfully updated.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [ {{HostCategory1Id}} ],\r\n    \"groups\": [ {{HostGroup5Id}} ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/{{Host3Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"{{Host3Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available host group (0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host groups list retrieved is empty\", function() {\r",
											"    // Check the number of host groups (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available host group filtered with category 2 (0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"An error occured.\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"// pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"// });\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"// const responseJson = pm.response.json();\r",
											"// pm.test(\"The host groups list retrieved is empty\", function() {\r",
											"//     // Check the number of host groups (0)\r",
											"//     pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"// })"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/?search={\"hostcategory.id\":{{HostCategory2Id}}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										""
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostcategory.id\":{{HostCategory2Id}}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show one host group (error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host group not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(responseJson.message).to.eql(\"Host group not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup5Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup5Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update of a host group (error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host group not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(responseJson.message).to.eql(\"Host group not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\":\"Test_H_Group_4\",\n    \"alias\":\"I'm the fourth successful group!\",\n    \"is_activated\":false,\n    \"comment\":\"I was created by the Read/Write user\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup5Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup5Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletion of a host group (error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host group not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(responseJson.message).to.eql(\"Host group not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup5Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup5Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "Without access to host, host group and a filter on host categories",
					"item": [
						{
							"name": "ACL Resources",
							"item": [
								{
									"name": "Login with admin user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
													"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
													"    pm.environment.set(\"token\", responseJson.security.token);\r",
													"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
													"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Show ACLResources",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"A list of ACL Resource has been fetched.\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    var response = JSON.parse(responseBody);",
													"    pm.collectionVariables.set(\"ACLResources\", response.result[1].name);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"show\",\n  \"object\": \"ACLRESOURCE\"\n}"
										},
										"url": {
											"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
											"host": [
												"{{baseUriCentreonCLAPI}}"
											],
											"query": [
												{
													"key": "action",
													"value": "action"
												},
												{
													"key": "object",
													"value": "centreon_clapi"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Grant the Host Category to new ACL Resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"The host category filter has been added to ACL resource.\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"addfilter_hostcategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{HostCategory1Name}}\"\n}"
										},
										"url": {
											"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
											"host": [
												"{{baseUriCentreonCLAPI}}"
											],
											"query": [
												{
													"key": "action",
													"value": "action"
												},
												{
													"key": "object",
													"value": "centreon_clapi"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout from admin user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
													"    pm.environment.unset(\"token\");\r",
													"    pm.environment.unset(\"currentUserName\");\r",
													"    pm.environment.unset(\"currentUserID\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "X-AUTH-TOKEN",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										},
										"description": "Entry point to delete an existing authentication token."
									},
									"response": []
								}
							]
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available host group (0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host groups list retrieved is empty\", function() {\r",
											"    // Check the number of host groups (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available host group filtered with category 2 (0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host groups list retrieved is empty\", function() {\r",
											"    // Check the number of host groups (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/?search={\"hostcategory.id\":{{HostCategory2Id}}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										""
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostcategory.id\":{{HostCategory2Id}}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show one host group (error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host group not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(responseJson.message).to.eql(\"Host group not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup5Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup5Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update of a host group (error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host group not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(responseJson.message).to.eql(\"Host group not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\":\"Test_H_Group_4\",\n    \"alias\":\"I'm the fourth successful group!\",\n    \"is_activated\":false,\n    \"comment\":\"I was created by the Read/Write user\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup5Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup5Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletion of a host group (error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host group not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(responseJson.message).to.eql(\"Host group not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup5Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup5Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "Without access to host, with access to host groups and a filter on host categories",
					"item": [
						{
							"name": "ACL Resources",
							"item": [
								{
									"name": "Login with admin user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
													"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
													"    pm.environment.set(\"token\", responseJson.security.token);\r",
													"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
													"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Grant the Host Group to new ACL Resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"The host group has been granted to ACL resource.\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"addfilter_hostgroup\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{HostGroup5Name}}\"\n}"
										},
										"url": {
											"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
											"host": [
												"{{baseUriCentreonCLAPI}}"
											],
											"query": [
												{
													"key": "action",
													"value": "action"
												},
												{
													"key": "object",
													"value": "centreon_clapi"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout from admin user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
													"    pm.environment.unset(\"token\");\r",
													"    pm.environment.unset(\"currentUserName\");\r",
													"    pm.environment.unset(\"currentUserID\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "X-AUTH-TOKEN",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										},
										"description": "Entry point to delete an existing authentication token."
									},
									"response": []
								}
							]
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creation of a new host group by user Read/Write with filters (successful)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host group has been successfully created, with name '\" + pm.collectionVariables.get(\"HostGroup6Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostGroup6Alias\") + \"'.\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"\r",
											"    // Creation of a variable with the ID of the new host group\r",
											"    var response = pm.response.json();\r",
											"    pm.collectionVariables.set(\"HostGroup6Id\", response.id);\r",
											"\r",
											"    pm.expect(response).to.eql({\r",
											"        \"id\": pm.collectionVariables.get(\"HostGroup6Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostGroup6Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"HostGroup6Alias\"),\r",
											"        \"notes\": null,\r",
											"        \"notes_url\": null,\r",
											"        \"action_url\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_map_id\": null,\r",
											"        \"rrd\": null,\r",
											"        \"geo_coords\": null,\r",
											"        \"comment\": \"I was created by the Read/Write user\",\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"The Location parameter is in the header.\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"HostGroup6Name\", \"Test_H_Group_6\");\r",
											"pm.collectionVariables.set(\"HostGroup6Alias\", \"I'm the sixth successful group!\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\":\"{{HostGroup6Name}}\",\n\"alias\":\"{{HostGroup6Alias}}\",\n\"comment\":\"I was created by the Read/Write user\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available host group (2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host groups retrieved are listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function() {\r",
											"    // Check the number of host groups (2)\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"\r",
											"    // Check the properties of each host group\r",
											"    pm.expect(responseJson.result[0]).to.eql({\r",
											"        \"id\": pm.collectionVariables.get(\"HostGroup5Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostGroup5Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"HostGroup5Alias\"),\r",
											"        \"notes\": null,\r",
											"        \"notes_url\": null,\r",
											"        \"action_url\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_map_id\": null,\r",
											"        \"rrd\": null,\r",
											"        \"geo_coords\": null,\r",
											"        \"comment\": \"I was created by the Read/Write user\",\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.eql({\r",
											"        \"id\": pm.collectionVariables.get(\"HostGroup6Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostGroup6Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"HostGroup6Alias\"),\r",
											"        \"notes\": null,\r",
											"        \"notes_url\": null,\r",
											"        \"action_url\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_map_id\": null,\r",
											"        \"rrd\": null,\r",
											"        \"geo_coords\": null,\r",
											"        \"comment\": \"I was created by the Read/Write user\",\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available host group filtered with category 2 (0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host groups list retrieved is empty\", function() {\r",
											"    // Check the number of host groups (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/?search={\"hostcategory.id\":{{HostCategory2Id}}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										""
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostcategory.id\":{{HostCategory2Id}}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show one host group (error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host group not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(responseJson.message).to.eql(\"Host group not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup4Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup4Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show one host group (successful)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A host group has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host group retrieved is listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function() {\r",
											"    // Check the properties of the host group\r",
											"    pm.expect(responseJson).to.eql({\r",
											"        \"id\": pm.collectionVariables.get(\"HostGroup5Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostGroup5Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"HostGroup5Alias\"),\r",
											"        \"notes\": null,\r",
											"        \"notes_url\": null,\r",
											"        \"action_url\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_map_id\": null,\r",
											"        \"rrd\": null,\r",
											"        \"geo_coords\": null,\r",
											"        \"comment\": \"I was created by the Read/Write user\",\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"  \r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup5Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup5Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update of a host group (error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host group not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(responseJson.message).to.eql(\"Host group not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\":\"Test_H_Group_4\",\n    \"alias\":\"I'm the fourth successful group!\",\n    \"is_activated\":false,\n    \"comment\":\"I was created by the Read/Write user\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup4Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup4Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletion of a host group (error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host group not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(responseJson.message).to.eql(\"Host group not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup4Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup4Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "With access to host, host groups and a filter on host categories",
					"item": [
						{
							"name": "ACL Resources",
							"item": [
								{
									"name": "Login with admin user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
													"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
													"    pm.environment.set(\"token\", responseJson.security.token);\r",
													"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
													"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Grant the Host to new ACL Resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"The host has been granted to ACL resource.\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"grant_host\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{Host3Name}}\"\n}"
										},
										"url": {
											"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
											"host": [
												"{{baseUriCentreonCLAPI}}"
											],
											"query": [
												{
													"key": "action",
													"value": "action"
												},
												{
													"key": "object",
													"value": "centreon_clapi"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout from admin user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
													"    pm.environment.unset(\"token\");\r",
													"    pm.environment.unset(\"currentUserName\");\r",
													"    pm.environment.unset(\"currentUserID\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "X-AUTH-TOKEN",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										},
										"description": "Entry point to delete an existing authentication token."
									},
									"response": []
								}
							]
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available host group (2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host groups retrieved are listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function() {\r",
											"    // Check the number of host groups (2)\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"\r",
											"    // Check the properties of each host group\r",
											"        pm.expect(responseJson.result[0]).to.eql({\r",
											"        \"id\": pm.collectionVariables.get(\"HostGroup5Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostGroup5Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"HostGroup5Alias\"),\r",
											"        \"notes\": null,\r",
											"        \"notes_url\": null,\r",
											"        \"action_url\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_map_id\": null,\r",
											"        \"rrd\": null,\r",
											"        \"geo_coords\": null,\r",
											"        \"comment\": \"I was created by the Read/Write user\",\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    \r",
											"    pm.expect(responseJson.result[1]).to.eql({\r",
											"        \"id\": pm.collectionVariables.get(\"HostGroup6Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostGroup6Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"HostGroup6Alias\"),\r",
											"        \"notes\": null,\r",
											"        \"notes_url\": null,\r",
											"        \"action_url\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_map_id\": null,\r",
											"        \"rrd\": null,\r",
											"        \"geo_coords\": null,\r",
											"        \"comment\": \"I was created by the Read/Write user\",\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    \r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available host group filtered with category 1 (1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host groups retrieved are listed with all of their parameters.\", function() {\r",
											"    // Check the number of host groups (1)\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"\r",
											"    // Check the properties of each host group\r",
											"        pm.expect(responseJson.result[0]).to.eql({\r",
											"        \"id\": pm.collectionVariables.get(\"HostGroup5Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostGroup5Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"HostGroup5Alias\"),\r",
											"        \"notes\": null,\r",
											"        \"notes_url\": null,\r",
											"        \"action_url\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_map_id\": null,\r",
											"        \"rrd\": null,\r",
											"        \"geo_coords\": null,\r",
											"        \"comment\": \"I was created by the Read/Write user\",\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/?search={\"hostcategory.id\":{{HostCategory1Id}}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										""
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostcategory.id\":{{HostCategory1Id}}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show one host group (error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host group not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(responseJson.message).to.eql(\"Host group not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup4Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup4Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show one host group (successful)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A host group has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host group retrieved is listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function() {\r",
											"    // Check the properties of the host group\r",
											"    pm.expect(responseJson).to.eql({\r",
											"        \"id\": pm.collectionVariables.get(\"HostGroup5Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostGroup5Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"HostGroup5Alias\"),\r",
											"        \"notes\": null,\r",
											"        \"notes_url\": null,\r",
											"        \"action_url\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_map_id\": null,\r",
											"        \"rrd\": null,\r",
											"        \"geo_coords\": null,\r",
											"        \"comment\": \"I was created by the Read/Write user\",\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"  \r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup5Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup5Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update of a host group (error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host group not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(responseJson.message).to.eql(\"Host group not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\":\"Test_H_Group_4\",\n    \"alias\":\"I'm the fourth successful group!\",\n    \"is_activated\":false,\n    \"comment\":\"I was created by the Read/Write user\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup4Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup4Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletion of a host group (error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host group not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(responseJson.message).to.eql(\"Host group not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup4Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup4Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Host Group by user Read Only without filters",
			"item": [
				{
					"name": "Login with Read Only user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Read'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Read}}\",\r\n      \"password\": \"{{api_password_user_Read}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new host group (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to create host group.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to perform write operations on host groups\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\":\"Test_H_Group_7\",\n\"alias\":\"I will not be created!\",\n\"comment\":\"My user can't create me\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a host group (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to delete host group\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to perform write operations on host groups\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup4Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups",
								"{{HostGroup4Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update of a host group (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to update host group\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to perform write operations on host groups\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Test_H_Group_5555\",\n    \"alias\":\"I'm the fiffftth successful group!\",\n    \"is_activated\":false,\n    \"comment\":\" \"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup5Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups",
								"{{HostGroup5Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available host group (4)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host groups retrieved are listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function() {\r",
									"    // Check the number of host groups (4)\r",
									"    pm.expect(responseJson.result.length).to.eql(4);\r",
									"\r",
									"    // Check the properties of each host group\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup2Name\"),\r",
									"        \"alias\": null,\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup5Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup5Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup5Alias\"),\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"I was created by the Read/Write user\",\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup6Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup6Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup6Alias\"),\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"I was created by the Read/Write user\",\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"        \r",
									"    pm.expect(responseJson.result[3]).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup4Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup4Alias\"),\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": \"I was created by the Read/Write user\",\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show one host group (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host group retrieved is listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function() {\r",
									"    \r",
									"    // Check the properties of the host group\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup5Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup5Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup5Alias\"),\r",
									"        \"notes\": null,\r",
									"        \"notes_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"I was created by the Read/Write user\",\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup5Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups",
								"{{HostGroup5Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from Read Only user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "Host Group by user Read Only with filters",
			"item": [
				{
					"name": "Without access to host or host groups",
					"item": [
						{
							"name": "ACL Resources filters",
							"item": [
								{
									"name": "Login with admin user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
													"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
													"    pm.environment.set(\"token\", responseJson.security.token);\r",
													"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
													"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the Host Group filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"The host group has been deleted of the ACL resource.\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"delfilter_hostgroup\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{HostGroup5Name}}\"\n}\n"
										},
										"url": {
											"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
											"host": [
												"{{baseUriCentreonCLAPI}}"
											],
											"query": [
												{
													"key": "action",
													"value": "action"
												},
												{
													"key": "object",
													"value": "centreon_clapi"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the Host Group filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"The host group has been deleted of the ACL resource.\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"delfilter_hostgroup\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{HostGroup6Name}}\"\n}\n"
										},
										"url": {
											"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
											"host": [
												"{{baseUriCentreonCLAPI}}"
											],
											"query": [
												{
													"key": "action",
													"value": "action"
												},
												{
													"key": "object",
													"value": "centreon_clapi"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the Host filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"The host group has been deleted of the ACL resource.\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"revoke_host\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{Host2Name}}\"\n}\n"
										},
										"url": {
											"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
											"host": [
												"{{baseUriCentreonCLAPI}}"
											],
											"query": [
												{
													"key": "action",
													"value": "action"
												},
												{
													"key": "object",
													"value": "centreon_clapi"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout from admin user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
													"    pm.environment.unset(\"token\");\r",
													"    pm.environment.unset(\"currentUserName\");\r",
													"    pm.environment.unset(\"currentUserID\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "X-AUTH-TOKEN",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										},
										"description": "Entry point to delete an existing authentication token."
									},
									"response": []
								}
							]
						},
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"The host with name '\" + pm.collectionVariables.get(\"Host2Name\") + \"' has been successfully updated.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [ {{HostCategory1Id}} ],\r\n    \"groups\": [ {{HostGroup5Id}} ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/{{Host3Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"{{Host3Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Read_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Read_filters}}\",\r\n      \"password\": \"{{api_password_user_Read_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creation of a new host group (error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The user does not have the correct rights to create host group.\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"\r",
											"    pm.expect(responseJson.message).to.eql(\"You are not allowed to perform write operations on host groups\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\":\"Test_H_Group_7\",\n\"alias\":\"I will not be created!\",\n\"comment\":\"My user can't create me\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletion of a host group (error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The user does not have the correct rights to delete host group\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.expect(responseJson.message).to.eql(\"You are not allowed to perform write operations on host groups\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup4Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup4Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update of a host group (error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The user does not have the correct rights to update host group\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.expect(responseJson.message).to.eql(\"You are not allowed to perform write operations on host groups\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\":\"Test_H_Group_4\",\n    \"alias\":\"I'm the fourth successful group!\",\n    \"is_activated\":false,\n    \"comment\":\"I was created by the Read/Write user\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup5Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup5Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available host group (0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host groups list retrieved is empty\", function() {\r",
											"    // Check the number of host groups (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available host group filtered with category 2 (0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host groups list retrieved is empty\", function() {\r",
											"    // Check the number of host groups (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/?search={\"hostcategory.id\":{{HostCategory2Id}}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										""
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostcategory.id\":{{HostCategory2Id}}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show one host group (error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host group not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(responseJson.message).to.eql(\"Host group not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup5Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup5Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "Without access to host, host group and a filter on host categories",
					"item": [
						{
							"name": "ACL Resources",
							"item": [
								{
									"name": "Login with admin user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
													"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
													"    pm.environment.set(\"token\", responseJson.security.token);\r",
													"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
													"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Grant the Host Category to the ACL Resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"The host group has been granted to ACL resource.\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"addfilter_hostcategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{HostCategory2Name}}\"\n}"
										},
										"url": {
											"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
											"host": [
												"{{baseUriCentreonCLAPI}}"
											],
											"query": [
												{
													"key": "action",
													"value": "action"
												},
												{
													"key": "object",
													"value": "centreon_clapi"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout from admin user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
													"    pm.environment.unset(\"token\");\r",
													"    pm.environment.unset(\"currentUserName\");\r",
													"    pm.environment.unset(\"currentUserID\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "X-AUTH-TOKEN",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										},
										"description": "Entry point to delete an existing authentication token."
									},
									"response": []
								}
							]
						},
						{
							"name": "Login with Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Read_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Read_filters}}\",\r\n      \"password\": \"{{api_password_user_Read_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available host group (0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host groups list retrieved is empty\", function() {\r",
											"    // Check the number of host groups (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available host group filtered with category 2 (0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host groups list retrieved is empty\", function() {\r",
											"    // Check the number of host groups (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/?search={\"hostcategory.id\":{{HostCategory2Id}}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										""
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostcategory.id\":{{HostCategory2Id}}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show one host group (error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host group not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(responseJson.message).to.eql(\"Host group not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup5Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup5Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "Without access to host, with access to host groups and a filter on host categories",
					"item": [
						{
							"name": "ACL Resources",
							"item": [
								{
									"name": "Login with admin user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
													"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
													"    pm.environment.set(\"token\", responseJson.security.token);\r",
													"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
													"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Grant the Host Group to new ACL Resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"The host group has been granted to ACL resource.\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"addfilter_hostgroup\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{HostGroup5Name}}\"\n}"
										},
										"url": {
											"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
											"host": [
												"{{baseUriCentreonCLAPI}}"
											],
											"query": [
												{
													"key": "action",
													"value": "action"
												},
												{
													"key": "object",
													"value": "centreon_clapi"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout from admin user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
													"    pm.environment.unset(\"token\");\r",
													"    pm.environment.unset(\"currentUserName\");\r",
													"    pm.environment.unset(\"currentUserID\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "X-AUTH-TOKEN",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										},
										"description": "Entry point to delete an existing authentication token."
									},
									"response": []
								}
							]
						},
						{
							"name": "Login with Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Read_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Read_filters}}\",\r\n      \"password\": \"{{api_password_user_Read_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available host group (1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host groups retrieved are listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function() {\r",
											"    // Check the number of host groups (1)\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"\r",
											"    // Check the properties of each host group\r",
											"    pm.expect(responseJson.result[0]).to.eql({\r",
											"        \"id\": pm.collectionVariables.get(\"HostGroup5Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostGroup5Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"HostGroup5Alias\"),\r",
											"        \"notes\": null,\r",
											"        \"notes_url\": null,\r",
											"        \"action_url\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_map_id\": null,\r",
											"        \"rrd\": null,\r",
											"        \"geo_coords\": null,\r",
											"        \"comment\": \"I was created by the Read/Write user\",\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available host group filtered with category 2 (0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host groups list retrieved is empty\", function() {\r",
											"    // Check the number of host groups (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/?search={\"hostcategory.id\":{{HostCategory2Id}}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										""
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostcategory.id\":{{HostCategory2Id}}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show one host group (error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host group not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(responseJson.message).to.eql(\"Host group not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup4Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup4Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show one host group (successful)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A host group has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host group retrieved is listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function() {\r",
											"    // Check the properties of the host group\r",
											"    pm.expect(responseJson).to.eql({\r",
											"        \"id\": pm.collectionVariables.get(\"HostGroup5Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostGroup5Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"HostGroup5Alias\"),\r",
											"        \"notes\": null,\r",
											"        \"notes_url\": null,\r",
											"        \"action_url\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_map_id\": null,\r",
											"        \"rrd\": null,\r",
											"        \"geo_coords\": null,\r",
											"        \"comment\": \"I was created by the Read/Write user\",\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"  \r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup5Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup5Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				},
				{
					"name": "With access to host, host groups and a filter on host categories",
					"item": [
						{
							"name": "ACL Resources",
							"item": [
								{
									"name": "Login with admin user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
													"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
													"    pm.environment.set(\"token\", responseJson.security.token);\r",
													"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
													"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Grant the Host to new ACL Resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"The host group has been granted to ACL resource.\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"grant_host\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{Host3Name}}\"\n}"
										},
										"url": {
											"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
											"host": [
												"{{baseUriCentreonCLAPI}}"
											],
											"query": [
												{
													"key": "action",
													"value": "action"
												},
												{
													"key": "object",
													"value": "centreon_clapi"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout from admin user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
													"    pm.environment.unset(\"token\");\r",
													"    pm.environment.unset(\"currentUserName\");\r",
													"    pm.environment.unset(\"currentUserID\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "X-AUTH-TOKEN",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										},
										"description": "Entry point to delete an existing authentication token."
									},
									"response": []
								}
							]
						},
						{
							"name": "Login with Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Read_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Read_filters}}\",\r\n      \"password\": \"{{api_password_user_Read_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available host group (1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host groups retrieved are listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function() {\r",
											"    // Check the number of host groups (1)\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"\r",
											"    // Check the properties of each host group\r",
											"        pm.expect(responseJson.result[0]).to.eql({\r",
											"        \"id\": pm.collectionVariables.get(\"HostGroup5Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostGroup5Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"HostGroup5Alias\"),\r",
											"        \"notes\": null,\r",
											"        \"notes_url\": null,\r",
											"        \"action_url\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_map_id\": null,\r",
											"        \"rrd\": null,\r",
											"        \"geo_coords\": null,\r",
											"        \"comment\": \"I was created by the Read/Write user\",\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    \r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available host group filtered with category 1 (1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of host groups has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host groups retrieved are listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function() {\r",
											"    // Check the number of host groups (1)\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"\r",
											"    // Check the properties of each host group\r",
											"        pm.expect(responseJson.result[0]).to.eql({\r",
											"        \"id\": pm.collectionVariables.get(\"HostGroup5Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostGroup5Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"HostGroup5Alias\"),\r",
											"        \"notes\": null,\r",
											"        \"notes_url\": null,\r",
											"        \"action_url\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_map_id\": null,\r",
											"        \"rrd\": null,\r",
											"        \"geo_coords\": null,\r",
											"        \"comment\": \"I was created by the Read/Write user\",\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/?search={\"hostcategory.id\":{{HostCategory1Id}}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										""
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostcategory.id\":{{HostCategory1Id}}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show one host group (error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host group not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(responseJson.message).to.eql(\"Host group not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup4Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup4Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show one host group (successful)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A host group has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host group retrieved is listed with: id, name, alias, notes, notes_url, action_url, icon_id, icon_map_id, rrd, geo_coords, comment and is_activated\", function() {\r",
											"    // Check the properties of the host group\r",
											"    pm.expect(responseJson).to.eql({\r",
											"        \"id\": pm.collectionVariables.get(\"HostGroup5Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"HostGroup5Name\"),\r",
											"        \"alias\": pm.collectionVariables.get(\"HostGroup5Alias\"),\r",
											"        \"notes\": null,\r",
											"        \"notes_url\": null,\r",
											"        \"action_url\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_map_id\": null,\r",
											"        \"rrd\": null,\r",
											"        \"geo_coords\": null,\r",
											"        \"comment\": \"I was created by the Read/Write user\",\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"  \r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup5Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups",
										"{{HostGroup5Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Host Group By User with No Access",
			"item": [
				{
					"name": "Login with user with no access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Nothing'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Nothing}}\",\r\n      \"password\": \"{{api_password_user_Nothing}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new host group (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The host group has not been  created, because the user does have the corrects rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to perform write operations on host groups\");\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\":\"Test_H_Group_1234567\",\n\"alias\":\"I will not be created !\",\n\"comment\":\"My user can't do anything\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a host group (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to delete host group\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to perform write operations on host groups\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup5Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups",
								"{{HostGroup5Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update of a host group (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to update host group\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to perform write operations on host groups\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Test_H_Group_55555\",\n    \"alias\":\"I'm the X successful group!\",\n    \"is_activated\":false,\n    \"comment\":\"I was created by the Read/Write user\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup5Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups",
								"{{HostGroup5Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available host groups (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to list host group\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to access host groups\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show one host group (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to list host group\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to access host groups\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup5Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups",
								"{{HostGroup5Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user with no access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}