{
	"info": {
		"_postman_id": "57a4cb10-e276-46a1-bf48-10552dbbab41",
		"name": "04 - OpenID Provider Configuration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16182525",
		"_collection_link": "https://centreon-api-testing.postman.co/workspace/Migration-of-%2522behat%2522-tests~e335ae07-f9ab-4b8d-bc6c-19b9f0078df4/collection/16182525-57a4cb10-e276-46a1-bf48-10552dbbab41?action=share&source=collection_link&creator=16182525"
	},
	"item": [
		{
			"name": "0401 - Update and retrieve OpenId Provider Configuration",
			"item": [
				{
					"name": "Login with admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a contact template (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new contact template has been created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACTTPL\",\r\n  \"values\": \"contact_template_1;contact_template_1;contact_template@localhost;0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Contact template ID (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The contact template is successfully displayed.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.collectionVariables.set(\"ContactTemplateId\", responseJson.result[0].id);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"CONTACTTPL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve default OpenId Provider Configuration information (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All the OpenId Provider informations are displayed and correct.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"is_active\": false,\r",
									"        \"is_forced\": false,\r",
									"        \"base_url\": null,\r",
									"        \"authorization_endpoint\": null,\r",
									"        \"token_endpoint\": null,\r",
									"        \"introspection_token_endpoint\": null,\r",
									"        \"userinfo_endpoint\": null,\r",
									"        \"endsession_endpoint\": null,\r",
									"        \"connection_scopes\": [],\r",
									"        \"login_claim\": null,\r",
									"        \"client_id\": null,\r",
									"        \"client_secret\": null,\r",
									"        \"authentication_type\": \"client_secret_post\",\r",
									"        \"verify_peer\": true,\r",
									"        \"auto_import\": false,\r",
									"        \"contact_template\": null,\r",
									"        \"email_bind_attribute\": null,\r",
									"        \"fullname_bind_attribute\": null,\r",
									"        \"roles_mapping\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"apply_only_first_role\": false,\r",
									"            \"attribute_path\": \"\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"introspection_endpoint\",\r",
									"                \"custom_endpoint\": \"\"\r",
									"            },\r",
									"            \"relations\": []\r",
									"        },\r",
									"        \"authentication_conditions\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"attribute_path\": \"\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"introspection_endpoint\",\r",
									"                \"custom_endpoint\": null\r",
									"            },\r",
									"            \"authorized_values\": [],\r",
									"            \"trusted_client_addresses\": [],\r",
									"            \"blacklist_client_addresses\": []\r",
									"        },\r",
									"        \"groups_mapping\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"attribute_path\": \"\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"introspection_endpoint\",\r",
									"                \"custom_endpoint\": null\r",
									"            },\r",
									"            \"relations\": []\r",
									"        },\r",
									"        \"redirect_url\": null\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with PUT OpenId Provider Configuration informations by admin (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The OpenId Provider informations have been correctly updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": true,\r\n    \"is_forced\": false,\r\n    \"base_url\": \"https://localhost:8080\",\r\n    \"authorization_endpoint\": \"/authorize\",\r\n    \"token_endpoint\": \"/token\",\r\n    \"introspection_token_endpoint\": null,\r\n    \"userinfo_endpoint\": \"/userinfo\",\r\n    \"endsession_endpoint\": \"/logout\",\r\n    \"connection_scopes\": [\"openid\", \"offline_access\"],\r\n    \"login_claim\": \"given_name\",\r\n    \"client_id\": \"user2\",\r\n    \"client_secret\": \"Centreon!2021\",\r\n    \"authentication_type\": \"client_secret_post\",\r\n    \"verify_peer\": false,\r\n    \"auto_import\": true,\r\n    \"contact_template\": {\r\n        \"id\": {{ContactTemplateId}},\r\n        \"name\": \"contact_template\"\r\n    },\r\n    \"email_bind_attribute\": \"email\",\r\n    \"fullname_bind_attribute\": \"given_name\",\r\n    \"authentication_conditions\": {\r\n        \"is_enabled\": true,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint/auth\"\r\n        },\r\n        \"authorized_values\": [\"status2\"],\r\n        \"trusted_client_addresses\": [\"127.0.0.1\"],\r\n        \"blacklist_client_addresses\": [\"10.0.0.1\", \"10.0.0.2\"]\r\n    },\r\n    \"roles_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"user_information_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint/roles\"\r\n        },\r\n        \"apply_only_first_role\": true,\r\n        \"relations\": [{\r\n            \"claim_value\": \"status1\",\r\n            \"priority\": 1,\r\n            \"access_group_id\": 1\r\n        }]\r\n    },\r\n    \"groups_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"introspection_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint/groups\"\r\n        },\r\n        \"relations\": [\r\n        ]\r\n    },\r\n    \"redirect_url\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve OpenId Provider Configuration information with updated values by admin (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All the OpenId Provider informations are displayed and correct.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.include({\r",
									"        \"is_active\": true,\r",
									"        \"is_forced\": false,\r",
									"        \"base_url\": \"https://localhost:8080\",\r",
									"        \"authorization_endpoint\": \"/authorize\",\r",
									"        \"token_endpoint\": \"/token\",\r",
									"        \"introspection_token_endpoint\": null,\r",
									"        \"userinfo_endpoint\": \"/userinfo\",\r",
									"        \"endsession_endpoint\": \"/logout\",\r",
									"        \"login_claim\": \"given_name\",\r",
									"        \"client_id\": \"user2\",\r",
									"        \"client_secret\": \"Centreon!2021\",\r",
									"        \"authentication_type\": \"client_secret_post\",\r",
									"        \"verify_peer\": false,\r",
									"        \"auto_import\": true,\r",
									"        \"email_bind_attribute\": \"email\",\r",
									"        \"fullname_bind_attribute\": \"given_name\",\r",
									"        \"redirect_url\": null\r",
									"    });\r",
									"    pm.expect(responseJson.connection_scopes).to.include(\"openid\", \"offline_access\");\r",
									"    pm.expect(responseJson.contact_template).to.include({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"ContactTemplateId\")),\r",
									"        \"name\": \"contact_template\"\r",
									"    });\r",
									"    pm.expect(responseJson.roles_mapping).to.include({\r",
									"        \"is_enabled\": false,\r",
									"        \"apply_only_first_role\": true,\r",
									"        \"attribute_path\": \"users.roles.info.status\"\r",
									"    });\r",
									"    pm.expect(responseJson.roles_mapping.endpoint).to.include({\r",
									"        \"type\": \"user_information_endpoint\",\r",
									"        \"custom_endpoint\": \"/my/custom/endpoint/roles\"\r",
									"    });\r",
									"    pm.expect(responseJson.roles_mapping.relations[0]).to.include({\r",
									"        \"claim_value\": \"status1\",\r",
									"        \"priority\": 1,\r",
									"    });\r",
									"    pm.expect(responseJson.roles_mapping.relations[0].access_group).to.include({\r",
									"        \"id\": 1,\r",
									"        \"name\": \"ALL\"\r",
									"    });\r",
									"    pm.expect(responseJson.authentication_conditions).to.include({\r",
									"        \"is_enabled\": true,\r",
									"        \"attribute_path\": \"users.roles.info.status\"\r",
									"    });\r",
									"    pm.expect(responseJson.authentication_conditions.endpoint).to.include({\r",
									"        \"type\": \"custom_endpoint\",\r",
									"        \"custom_endpoint\": \"/my/custom/endpoint/auth\"\r",
									"    });    \r",
									"    pm.expect(responseJson.authentication_conditions.authorized_values).to.include(\"status2\");\r",
									"    pm.expect(responseJson.authentication_conditions.trusted_client_addresses).to.include(\"127.0.0.1\");\r",
									"    pm.expect(responseJson.authentication_conditions.blacklist_client_addresses).to.include(\"10.0.0.1\", \"10.0.0.2\");\r",
									"    pm.expect(responseJson.groups_mapping).to.include({\r",
									"        \"is_enabled\": false,\r",
									"        \"attribute_path\": \"users.roles.info.status\"\r",
									"    });\r",
									"    pm.expect(responseJson.groups_mapping.endpoint).to.include({\r",
									"        \"type\": \"introspection_endpoint\",\r",
									"        \"custom_endpoint\": \"/my/custom/endpoint/groups\"\r",
									"    });\r",
									"    pm.expect(responseJson.groups_mapping.relations).to.be.an('Array').that.is.empty;\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with PATCH OpenId Provider Configuration informations by admin (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The OpenId Provider informations have been successfully updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": false,\r\n    \"is_forced\": false,\r\n    \"base_url\": null,\r\n    \"authorization_endpoint\": null,\r\n    \"token_endpoint\": null,\r\n    \"introspection_token_endpoint\": null,\r\n    \"userinfo_endpoint\": null,\r\n    \"endsession_endpoint\": null,\r\n    \"connection_scopes\": [],\r\n    \"login_claim\": null,\r\n    \"client_id\": null,\r\n    \"client_secret\": null,\r\n    \"authentication_type\": \"client_secret_post\",\r\n    \"verify_peer\": true,\r\n    \"auto_import\": false,\r\n    \"email_bind_attribute\": null,\r\n    \"fullname_bind_attribute\": null,\r\n    \"authentication_conditions\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"\",\r\n        \"endpoint\": {\r\n            \"type\": \"introspection_endpoint\",\r\n            \"custom_endpoint\": null\r\n        },\r\n        \"authorized_values\": [],\r\n        \"trusted_client_addresses\": [],\r\n        \"blacklist_client_addresses\": []\r\n    },\r\n    \"groups_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"\",\r\n        \"endpoint\": {\r\n            \"type\": \"introspection_endpoint\",\r\n            \"custom_endpoint\": null\r\n        },\r\n        \"relations\": []\r\n    },\r\n    \"redirect_url\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve OpenId Provider Configuration information with updated values by PATCH(successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All the OpenId Provider informations are displayed and correct.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"is_active\": false,\r",
									"        \"is_forced\": false,\r",
									"        \"base_url\": null,\r",
									"        \"authorization_endpoint\": null,\r",
									"        \"token_endpoint\": null,\r",
									"        \"introspection_token_endpoint\": null,\r",
									"        \"userinfo_endpoint\": null,\r",
									"        \"endsession_endpoint\": null,\r",
									"        \"connection_scopes\": [],\r",
									"        \"login_claim\": null,\r",
									"        \"client_id\": null,\r",
									"        \"client_secret\": null,\r",
									"        \"authentication_type\": \"client_secret_post\",\r",
									"        \"verify_peer\": true,\r",
									"        \"auto_import\": false,\r",
									"        \"contact_template\": {\r",
									"            \"id\": parseInt(pm.collectionVariables.get(\"ContactTemplateId\")),\r",
									"            \"name\": \"contact_template\"\r",
									"        },\r",
									"        \"email_bind_attribute\": null,\r",
									"        \"fullname_bind_attribute\": null,\r",
									"        \"roles_mapping\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"apply_only_first_role\": true,\r",
									"            \"attribute_path\": \"users.roles.info.status\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"user_information_endpoint\",\r",
									"                \"custom_endpoint\": \"/my/custom/endpoint/roles\"\r",
									"            },\r",
									"            \"relations\": [{\r",
									"                \"claim_value\": \"status1\",\r",
									"                \"access_group\": {\r",
									"                    \"id\": 1,\r",
									"                    \"name\": \"ALL\"\r",
									"                },\r",
									"                \"priority\": 1\r",
									"            }]\r",
									"        },\r",
									"        \"authentication_conditions\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"attribute_path\": \"\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"introspection_endpoint\",\r",
									"                \"custom_endpoint\": null\r",
									"            },\r",
									"            \"authorized_values\": [],\r",
									"            \"trusted_client_addresses\": [],\r",
									"            \"blacklist_client_addresses\": []\r",
									"        },\r",
									"        \"groups_mapping\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"attribute_path\": \"\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"introspection_endpoint\",\r",
									"                \"custom_endpoint\": null\r",
									"            },\r",
									"            \"relations\": []\r",
									"        },\r",
									"        \"redirect_url\": null\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "0402 - Update OpenId Provider Configuration with invalid information",
			"item": [
				{
					"name": "PUT required property missing (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The OpenId Provider informations have not been updated because there's missing properties.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[is_active] The property is_active is required\\n[is_forced] The property is_forced is required\\n[base_url] The property base_url is required\\n[authorization_endpoint] The property authorization_endpoint is required\\n[token_endpoint] The property token_endpoint is required\\n[introspection_token_endpoint] The property introspection_token_endpoint is required\\n[userinfo_endpoint] The property userinfo_endpoint is required\\n[endsession_endpoint] The property endsession_endpoint is required\\n[connection_scopes] The property connection_scopes is required\\n[login_claim] The property login_claim is required\\n[client_id] The property client_id is required\\n[client_secret] The property client_secret is required\\n[authentication_type] The property authentication_type is required\\n[verify_peer] The property verify_peer is required\\n[auto_import] The property auto_import is required\\n[contact_template] The property contact_template is required\\n[email_bind_attribute] The property email_bind_attribute is required\\n[fullname_bind_attribute] The property fullname_bind_attribute is required\\n[authentication_conditions] The property authentication_conditions is required\\n[groups_mapping] The property groups_mapping is required\\n[roles_mapping] The property roles_mapping is required\\n[redirect_url] The property redirect_url is required\\n\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT invalid value type passed to a property (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The OpenId Provider informations have not been updated because there's values of the wrong type.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[is_active] Integer value found, but a boolean is required\\n[is_forced] String value found, but a boolean is required\\n[base_url] Boolean value found, but a string or a null is required\\n[authorization_endpoint] Integer value found, but a string or a null is required\\n[token_endpoint] Integer value found, but a string or a null is required\\n[introspection_token_endpoint] Integer value found, but a string or a null is required\\n[userinfo_endpoint] Boolean value found, but a string or a null is required\\n[endsession_endpoint] Boolean value found, but a string or a null is required\\n[connection_scopes[0]] Boolean value found, but a string is required\\n[connection_scopes[1]] Integer value found, but a string is required\\n[login_claim] Integer value found, but a string or a null is required\\n[client_id] Boolean value found, but a string or a null is required\\n[client_secret] Integer value found, but a string or a null is required\\n[authentication_type] Does not have a value in the enumeration [\\\"client_secret_post\\\",\\\"client_secret_basic\\\"]\\n[verify_peer] String value found, but a boolean is required\\n[auto_import] String value found, but a boolean is required\\n[contact_template.id] String value found, but a number is required\\n[contact_template.name] Integer value found, but a string is required\\n[email_bind_attribute] Integer value found, but a string or a null is required\\n[fullname_bind_attribute] Integer value found, but a string or a null is required\\n[authentication_conditions.is_enabled] String value found, but a boolean is required\\n[authentication_conditions.attribute_path] Boolean value found, but a string is required\\n[authentication_conditions.endpoint.type] Does not have a value in the enumeration [\\\"introspection_endpoint\\\",\\\"user_information_endpoint\\\",\\\"custom_endpoint\\\"]\\n[authentication_conditions.endpoint.custom_endpoint] Integer value found, but a string or a null is required\\n[authentication_conditions.authorized_values[0]] Boolean value found, but a string is required\\n[authentication_conditions.trusted_client_addresses[0]] Integer value found, but a string is required\\n[authentication_conditions.blacklist_client_addresses[0]] Integer value found, but a string is required\\n[groups_mapping.is_enabled] String value found, but a boolean is required\\n[groups_mapping.attribute_path] Integer value found, but a string is required\\n[groups_mapping.endpoint.type] Does not have a value in the enumeration [\\\"introspection_endpoint\\\",\\\"user_information_endpoint\\\",\\\"custom_endpoint\\\"]\\n[groups_mapping.endpoint.custom_endpoint] Boolean value found, but a string or a null is required\\n[groups_mapping.relations[0]] String value found, but an object is required\\n[roles_mapping.is_enabled] Integer value found, but a boolean is required\\n[roles_mapping.apply_only_first_role] String value found, but a boolean is required\\n[roles_mapping.attribute_path] Integer value found, but a string or a null is required\\n[roles_mapping.endpoint.type] Integer value found, but a string is required\\n[roles_mapping.endpoint.type] Does not have a value in the enumeration [\\\"introspection_endpoint\\\",\\\"user_information_endpoint\\\",\\\"custom_endpoint\\\"]\\n[roles_mapping.endpoint.custom_endpoint] Integer value found, but a string or a null is required\\n[roles_mapping.relations[0].claim_value] Integer value found, but a string is required\\n[roles_mapping.relations[0].access_group_id] String value found, but an integer is required\\n[roles_mapping.relations[0].priority] String value found, but an integer is required\\n[redirect_url] Integer value found, but a string or a null is required\\n\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"is_active\": 1,\r\n        \"is_forced\": \"false\",\r\n        \"base_url\": true,\r\n        \"authorization_endpoint\": 1,\r\n        \"token_endpoint\": 0,\r\n        \"introspection_token_endpoint\": 1,\r\n        \"userinfo_endpoint\": false,\r\n        \"endsession_endpoint\": true,\r\n        \"connection_scopes\": [true, 1],\r\n        \"login_claim\": 3,\r\n        \"client_id\": false,\r\n        \"client_secret\": 123,\r\n        \"authentication_type\": true,\r\n        \"verify_peer\": \"false\",\r\n        \"auto_import\": \"true\",\r\n        \"contact_template\": {\r\n          \"id\": \"19\",\r\n          \"name\": 1\r\n        },\r\n        \"email_bind_attribute\": 0,\r\n        \"fullname_bind_attribute\": 2,\r\n        \"authentication_conditions\": {\r\n            \"is_enabled\": \"true\",\r\n            \"attribute_path\": true,\r\n            \"endpoint\": {\r\n              \"type\": 1,\r\n              \"custom_endpoint\": 2\r\n            },\r\n            \"authorized_values\": [true],\r\n            \"trusted_client_addresses\": [1],\r\n            \"blacklist_client_addresses\": [3]\r\n        },\r\n        \"roles_mapping\": {\r\n          \"is_enabled\": 0,\r\n          \"attribute_path\": 1,\r\n          \"endpoint\": {\r\n              \"type\": 3,\r\n              \"custom_endpoint\": 1\r\n          },\r\n          \"apply_only_first_role\": \"false\",\r\n          \"relations\": [{\r\n            \"claim_value\": 1,\r\n            \"priority\": \"1\",\r\n            \"access_group_id\": \"1\"\r\n          }]\r\n        },\r\n        \"groups_mapping\": {\r\n          \"is_enabled\": \"false\",\r\n          \"attribute_path\": 0,\r\n          \"endpoint\": {\r\n              \"type\": 1,\r\n              \"custom_endpoint\": true\r\n          },\r\n          \"relations\": [\"coucou\"]\r\n        },\r\n        \"redirect_url\": 1\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT invalid value passed to \"trusted_client_addresses\" (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The OpenId Provider informations have not been updated because there's values of the wrong type.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[AuthenticationConditions::trustedClientAddresses] The value \\\".@\\\" was expected to be a valid ip address or domain name\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": true,\r\n    \"is_forced\": false,\r\n    \"base_url\": \"https://localhost:8080\",\r\n    \"authorization_endpoint\": \"/authorize\",\r\n    \"token_endpoint\": \"/token\",\r\n    \"introspection_token_endpoint\": null,\r\n    \"userinfo_endpoint\": \"/userinfo\",\r\n    \"endsession_endpoint\": \"/logout\",\r\n    \"connection_scopes\": [\"openid\", \"offline_access\"],\r\n    \"login_claim\": \"given_name\",\r\n    \"client_id\": \"user2\",\r\n    \"client_secret\": \"Centreon!2021\",\r\n    \"authentication_type\": \"client_secret_post\",\r\n    \"verify_peer\": false,\r\n    \"auto_import\": true,\r\n    \"contact_template\": {\r\n        \"id\": {{ContactTemplateId}},\r\n        \"name\": \"contact_template\"\r\n    },\r\n    \"email_bind_attribute\": \"email\",\r\n    \"fullname_bind_attribute\": \"given_name\",\r\n    \"authentication_conditions\": {\r\n        \"is_enabled\": true,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"authorized_values\": [\"status2\"],\r\n        \"trusted_client_addresses\": [\".@\"],\r\n        \"blacklist_client_addresses\": []\r\n    },\r\n    \"roles_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"apply_only_first_role\": false,\r\n        \"relations\": [{\r\n        \"claim_value\": \"status1\",\r\n        \"priority\": 1,\r\n        \"access_group_id\": 1\r\n        }]\r\n    },\r\n    \"groups_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"relations\": [\r\n        ]\r\n    },\r\n    \"redirect_url\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT invalid value passed to \"blacklist_client_addresses\" (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The OpenId Provider informations have not been updated because there's values of the wrong type.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[AuthenticationConditions::blacklistClientAddresses] The value \\\".@\\\" was expected to be a valid ip address or domain name\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": true,\r\n    \"is_forced\": false,\r\n    \"base_url\": \"https://localhost:8080\",\r\n    \"authorization_endpoint\": \"/authorize\",\r\n    \"token_endpoint\": \"/token\",\r\n    \"introspection_token_endpoint\": null,\r\n    \"userinfo_endpoint\": \"/userinfo\",\r\n    \"endsession_endpoint\": \"/logout\",\r\n    \"connection_scopes\": [\"openid\", \"offline_access\"],\r\n    \"login_claim\": \"given_name\",\r\n    \"client_id\": \"user2\",\r\n    \"client_secret\": \"Centreon!2021\",\r\n    \"authentication_type\": \"client_secret_post\",\r\n    \"verify_peer\": false,\r\n    \"auto_import\": true,\r\n    \"contact_template\": {\r\n        \"id\": {{ContactTemplateId}},\r\n        \"name\": \"contact_template\"\r\n    },\r\n    \"email_bind_attribute\": \"email\",\r\n    \"fullname_bind_attribute\": \"given_name\",\r\n    \"authentication_conditions\": {\r\n        \"is_enabled\": true,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"authorized_values\": [\"status2\"],\r\n        \"trusted_client_addresses\": [],\r\n        \"blacklist_client_addresses\": [\".@\"]\r\n    },\r\n    \"roles_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"apply_only_first_role\": false,\r\n        \"relations\": [{\r\n        \"claim_value\": \"status1\",\r\n        \"priority\": 1,\r\n        \"access_group_id\": 1\r\n        }]\r\n    },\r\n    \"groups_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"relations\": [\r\n        ]\r\n    },\r\n    \"redirect_url\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH invalid value type passed to a property (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The OpenId Provider informations have not been updated because there's values of the wrong type.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[is_active] Integer value found, but a boolean is required\\n[is_forced] String value found, but a boolean is required\\n[base_url] Boolean value found, but a string or a null is required\\n[authorization_endpoint] Integer value found, but a string or a null is required\\n[token_endpoint] Integer value found, but a string or a null is required\\n[introspection_token_endpoint] Integer value found, but a string or a null is required\\n[userinfo_endpoint] Boolean value found, but a string or a null is required\\n[endsession_endpoint] Boolean value found, but a string or a null is required\\n[connection_scopes[0]] Boolean value found, but a string is required\\n[connection_scopes[1]] Integer value found, but a string is required\\n[login_claim] Integer value found, but a string or a null is required\\n[client_id] Boolean value found, but a string or a null is required\\n[client_secret] Integer value found, but a string or a null is required\\n[authentication_type] Does not have a value in the enumeration [\\\"client_secret_post\\\",\\\"client_secret_basic\\\"]\\n[verify_peer] String value found, but a boolean is required\\n[auto_import] String value found, but a boolean is required\\n[contact_template.id] String value found, but a number is required\\n[contact_template.name] Integer value found, but a string is required\\n[email_bind_attribute] Integer value found, but a string or a null is required\\n[fullname_bind_attribute] Integer value found, but a string or a null is required\\n[authentication_conditions.is_enabled] String value found, but a boolean is required\\n[authentication_conditions.attribute_path] Boolean value found, but a string is required\\n[authentication_conditions.endpoint.type] Does not have a value in the enumeration [\\\"introspection_endpoint\\\",\\\"user_information_endpoint\\\",\\\"custom_endpoint\\\"]\\n[authentication_conditions.endpoint.custom_endpoint] Integer value found, but a string or a null is required\\n[authentication_conditions.authorized_values[0]] Boolean value found, but a string is required\\n[authentication_conditions.trusted_client_addresses[0]] Integer value found, but a string is required\\n[authentication_conditions.blacklist_client_addresses[0]] Integer value found, but a string is required\\n[groups_mapping.is_enabled] String value found, but a boolean is required\\n[groups_mapping.attribute_path] Integer value found, but a string is required\\n[groups_mapping.endpoint.type] Does not have a value in the enumeration [\\\"introspection_endpoint\\\",\\\"user_information_endpoint\\\",\\\"custom_endpoint\\\"]\\n[groups_mapping.endpoint.custom_endpoint] Boolean value found, but a string or a null is required\\n[groups_mapping.relations[0]] String value found, but an object is required\\n[roles_mapping.is_enabled] Integer value found, but a boolean is required\\n[roles_mapping.apply_only_first_role] String value found, but a boolean is required\\n[roles_mapping.attribute_path] Integer value found, but a string or a null is required\\n[roles_mapping.endpoint.type] Integer value found, but a string is required\\n[roles_mapping.endpoint.type] Does not have a value in the enumeration [\\\"introspection_endpoint\\\",\\\"user_information_endpoint\\\",\\\"custom_endpoint\\\"]\\n[roles_mapping.endpoint.custom_endpoint] Integer value found, but a string or a null is required\\n[roles_mapping.relations[0].claim_value] Integer value found, but a string is required\\n[roles_mapping.relations[0].access_group_id] String value found, but an integer is required\\n[roles_mapping.relations[0].priority] String value found, but an integer is required\\n[redirect_url] Integer value found, but a string or a null is required\\n\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"is_active\": 1,\r\n        \"is_forced\": \"false\",\r\n        \"base_url\": true,\r\n        \"authorization_endpoint\": 1,\r\n        \"token_endpoint\": 0,\r\n        \"introspection_token_endpoint\": 1,\r\n        \"userinfo_endpoint\": false,\r\n        \"endsession_endpoint\": true,\r\n        \"connection_scopes\": [true, 1],\r\n        \"login_claim\": 3,\r\n        \"client_id\": false,\r\n        \"client_secret\": 123,\r\n        \"authentication_type\": true,\r\n        \"verify_peer\": \"false\",\r\n        \"auto_import\": \"true\",\r\n        \"contact_template\": {\r\n          \"id\": \"19\",\r\n          \"name\": 1\r\n        },\r\n        \"email_bind_attribute\": 0,\r\n        \"fullname_bind_attribute\": 2,\r\n        \"authentication_conditions\": {\r\n            \"is_enabled\": \"true\",\r\n            \"attribute_path\": true,\r\n            \"endpoint\": {\r\n              \"type\": 1,\r\n              \"custom_endpoint\": 2\r\n            },\r\n            \"authorized_values\": [true],\r\n            \"trusted_client_addresses\": [1],\r\n            \"blacklist_client_addresses\": [3]\r\n        },\r\n        \"roles_mapping\": {\r\n          \"is_enabled\": 0,\r\n          \"attribute_path\": 1,\r\n          \"endpoint\": {\r\n              \"type\": 3,\r\n              \"custom_endpoint\": 1\r\n          },\r\n          \"apply_only_first_role\": \"false\",\r\n          \"relations\": [{\r\n            \"claim_value\": 1,\r\n            \"priority\": \"1\",\r\n            \"access_group_id\": \"1\"\r\n          }]\r\n        },\r\n        \"groups_mapping\": {\r\n          \"is_enabled\": \"false\",\r\n          \"attribute_path\": 0,\r\n          \"endpoint\": {\r\n              \"type\": 1,\r\n              \"custom_endpoint\": true\r\n          },\r\n          \"relations\": [\"coucou\"]\r\n        },\r\n        \"redirect_url\": 1\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH invalid value passed to \"trusted_client_addresses\" (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The OpenId Provider informations have not been updated because there's values of the wrong type.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[AuthenticationConditions::trustedClientAddresses] The value \\\".@\\\" was expected to be a valid ip address or domain name\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": true,\r\n    \"is_forced\": false,\r\n    \"base_url\": \"https://localhost:8080\",\r\n    \"authorization_endpoint\": \"/authorize\",\r\n    \"token_endpoint\": \"/token\",\r\n    \"introspection_token_endpoint\": null,\r\n    \"userinfo_endpoint\": \"/userinfo\",\r\n    \"endsession_endpoint\": \"/logout\",\r\n    \"connection_scopes\": [\"openid\", \"offline_access\"],\r\n    \"login_claim\": \"given_name\",\r\n    \"client_id\": \"user2\",\r\n    \"client_secret\": \"Centreon!2021\",\r\n    \"authentication_type\": \"client_secret_post\",\r\n    \"verify_peer\": false,\r\n    \"auto_import\": true,\r\n    \"contact_template\": {\r\n        \"id\": {{ContactTemplateId}},\r\n        \"name\": \"contact_template\"\r\n    },\r\n    \"email_bind_attribute\": \"email\",\r\n    \"fullname_bind_attribute\": \"given_name\",\r\n    \"authentication_conditions\": {\r\n        \"is_enabled\": true,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"authorized_values\": [\"status2\"],\r\n        \"trusted_client_addresses\": [\".@\"],\r\n        \"blacklist_client_addresses\": []\r\n    },\r\n    \"roles_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"apply_only_first_role\": false,\r\n        \"relations\": [{\r\n        \"claim_value\": \"status1\",\r\n        \"priority\": 1,\r\n        \"access_group_id\": 1\r\n        }]\r\n    },\r\n    \"groups_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"relations\": [\r\n        ]\r\n    },\r\n    \"redirect_url\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH invalid value passed to \"blacklist_client_addresses\" (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The OpenId Provider informations have not been updated because there's values of the wrong type.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[AuthenticationConditions::blacklistClientAddresses] The value \\\".@\\\" was expected to be a valid ip address or domain name\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": true,\r\n    \"is_forced\": false,\r\n    \"base_url\": \"https://localhost:8080\",\r\n    \"authorization_endpoint\": \"/authorize\",\r\n    \"token_endpoint\": \"/token\",\r\n    \"introspection_token_endpoint\": null,\r\n    \"userinfo_endpoint\": \"/userinfo\",\r\n    \"endsession_endpoint\": \"/logout\",\r\n    \"connection_scopes\": [\"openid\", \"offline_access\"],\r\n    \"login_claim\": \"given_name\",\r\n    \"client_id\": \"user2\",\r\n    \"client_secret\": \"Centreon!2021\",\r\n    \"authentication_type\": \"client_secret_post\",\r\n    \"verify_peer\": false,\r\n    \"auto_import\": true,\r\n    \"contact_template\": {\r\n        \"id\": {{ContactTemplateId}},\r\n        \"name\": \"contact_template\"\r\n    },\r\n    \"email_bind_attribute\": \"email\",\r\n    \"fullname_bind_attribute\": \"given_name\",\r\n    \"authentication_conditions\": {\r\n        \"is_enabled\": true,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"authorized_values\": [\"status2\"],\r\n        \"trusted_client_addresses\": [],\r\n        \"blacklist_client_addresses\": [\".@\"]\r\n    },\r\n    \"roles_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"apply_only_first_role\": false,\r\n        \"relations\": [{\r\n        \"claim_value\": \"status1\",\r\n        \"priority\": 1,\r\n        \"access_group_id\": 1\r\n        }]\r\n    },\r\n    \"groups_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"relations\": [\r\n        ]\r\n    },\r\n    \"redirect_url\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "0403 - Update and retrieve OpenId Provider Configuration information as logged non-admin user without Reach API rights",
			"item": [
				{
					"name": "Add user without reach_api rights (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"user-test;user-test;user-test@localhost;Centreon!1234;0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with user-test (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(\"user-test\");\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"user-test\",\r\n      \"password\": \"Centreon!1234\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with PUT OpenId Provider Configuration informations by user without reach_api (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The OpenId Provider informations have not been updated, because the user doesn't have reach_api rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": true,\r\n    \"is_forced\": false,\r\n    \"base_url\": \"https://localhost:8080\",\r\n    \"authorization_endpoint\": \"/authorize\",\r\n    \"token_endpoint\": \"/token\",\r\n    \"introspection_token_endpoint\": null,\r\n    \"userinfo_endpoint\": \"/userinfo\",\r\n    \"endsession_endpoint\": \"/logout\",\r\n    \"connection_scopes\": [\"openid\", \"offline_access\"],\r\n    \"login_claim\": \"given_name\",\r\n    \"client_id\": \"user2\",\r\n    \"client_secret\": \"Centreon!2021\",\r\n    \"authentication_type\": \"client_secret_post\",\r\n    \"verify_peer\": false,\r\n    \"auto_import\": true,\r\n    \"contact_template\": {\r\n        \"id\": {{ContactTemplateId}},\r\n        \"name\": \"contact_template\"\r\n    },\r\n    \"email_bind_attribute\": \"email\",\r\n    \"fullname_bind_attribute\": \"given_name\",\r\n    \"authentication_conditions\": {\r\n        \"is_enabled\": true,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"authorized_values\": [\"status2\"],\r\n        \"trusted_client_addresses\": [],\r\n        \"blacklist_client_addresses\": []\r\n    },\r\n    \"roles_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"apply_only_first_role\": false,\r\n        \"relations\": [{\r\n        \"claim_value\": \"status1\",\r\n        \"priority\": 1,\r\n        \"access_group_id\": 1\r\n        }]\r\n    },\r\n    \"groups_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"relations\": [\r\n        ]\r\n    },\r\n    \"redirect_url\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with PATCH OpenId Provider Configuration informations by user without reach_api (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The OpenId Provider informations have not been updated, because the user doesn't have reach_api rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": true,\r\n    \"is_forced\": false,\r\n    \"base_url\": \"https://localhost:8080\",\r\n    \"authorization_endpoint\": \"/authorize\",\r\n    \"token_endpoint\": \"/token\",\r\n    \"introspection_token_endpoint\": null,\r\n    \"userinfo_endpoint\": \"/userinfo\",\r\n    \"endsession_endpoint\": \"/logout\",\r\n    \"connection_scopes\": [\"openid\", \"offline_access\"],\r\n    \"login_claim\": \"given_name\",\r\n    \"client_id\": \"user2\",\r\n    \"client_secret\": \"Centreon!2021\",\r\n    \"authentication_type\": \"client_secret_post\",\r\n    \"verify_peer\": false,\r\n    \"auto_import\": true,\r\n    \"contact_template\": {\r\n        \"id\": {{ContactTemplateId}},\r\n        \"name\": \"contact_template\"\r\n    },\r\n    \"email_bind_attribute\": \"email\",\r\n    \"fullname_bind_attribute\": \"given_name\",\r\n    \"authentication_conditions\": {\r\n        \"is_enabled\": true,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"authorized_values\": [\"status2\"],\r\n        \"trusted_client_addresses\": [],\r\n        \"blacklist_client_addresses\": []\r\n    },\r\n    \"roles_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"apply_only_first_role\": false,\r\n        \"relations\": [{\r\n        \"claim_value\": \"status1\",\r\n        \"priority\": 1,\r\n        \"access_group_id\": 1\r\n        }]\r\n    },\r\n    \"groups_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"relations\": [\r\n        ]\r\n    },\r\n    \"redirect_url\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve OpenId Provider Configuration information with updated values by user without reach_api (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The OpenId Provider informations have not been listed, because the user doesn't have reach_api rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user-test (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "0404 - Update and retrieve OpenId Provider Configuration information as logged non-admin user with Reach API rights",
			"item": [
				{
					"name": "Login with admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"user-test;reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to ALL (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ALL;user-test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"Authentication-user;Authentication-user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RW right (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n\"values\": \"Authentication-user;1;Administration\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Authentication-user to ALL (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ALL;Authentication-user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with user-test (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(\"user-test\");\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"user-test\",\r\n      \"password\": \"Centreon!1234\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with PUT OpenId Provider Configuration informations by user with reach_api (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The OpenId Provider informations have been correctly updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": true,\r\n    \"is_forced\": true,\r\n    \"base_url\": \"https://localhost:8181\",\r\n    \"authorization_endpoint\": \"/authorize\",\r\n    \"token_endpoint\": \"/token\",\r\n    \"introspection_token_endpoint\": null,\r\n    \"userinfo_endpoint\": \"/userinfo\",\r\n    \"endsession_endpoint\": \"/logout\",\r\n    \"connection_scopes\": [\"openid\", \"offline_access\"],\r\n    \"login_claim\": \"given_name\",\r\n    \"client_id\": \"user1\",\r\n    \"client_secret\": \"Centreon!2021\",\r\n    \"authentication_type\": \"client_secret_post\",\r\n    \"verify_peer\": false,\r\n    \"auto_import\": true,\r\n    \"contact_template\": {\r\n        \"id\": {{ContactTemplateId}},\r\n        \"name\": \"contact_template\"\r\n    },\r\n    \"email_bind_attribute\": \"email\",\r\n    \"fullname_bind_attribute\": \"given_name\",\r\n    \"authentication_conditions\": {\r\n        \"is_enabled\": true,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint/auth\"\r\n        },\r\n        \"authorized_values\": [\"status123\"],\r\n        \"trusted_client_addresses\": [\"127.0.0.2\"],\r\n        \"blacklist_client_addresses\": [\"10.0.0.3\", \"10.0.0.4\"]\r\n    },\r\n    \"roles_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"user_information_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint/roles\"\r\n        },\r\n        \"apply_only_first_role\": true,\r\n        \"relations\": [{\r\n            \"claim_value\": \"status456\",\r\n            \"priority\": 2,\r\n            \"access_group_id\": 1\r\n        }]\r\n    },\r\n    \"groups_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"introspection_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint/groups\"\r\n        },\r\n        \"relations\": [\r\n        ]\r\n    },\r\n    \"redirect_url\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve OpenId Provider Configuration information by user with reach_api (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All the OpenId Provider informations are displayed and correct.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"is_active\": true,\r",
									"        \"is_forced\": true,\r",
									"        \"base_url\": \"https://localhost:8181\",\r",
									"        \"authorization_endpoint\": \"/authorize\",\r",
									"        \"token_endpoint\": \"/token\",\r",
									"        \"introspection_token_endpoint\": null,\r",
									"        \"userinfo_endpoint\": \"/userinfo\",\r",
									"        \"endsession_endpoint\": \"/logout\",\r",
									"        \"connection_scopes\": [\r",
									"            \"openid\",\r",
									"            \"offline_access\"\r",
									"        ],\r",
									"        \"login_claim\": \"given_name\",\r",
									"        \"client_id\": \"user1\",\r",
									"        \"client_secret\": \"Centreon!2021\",\r",
									"        \"authentication_type\": \"client_secret_post\",\r",
									"        \"verify_peer\": false,\r",
									"        \"auto_import\": true,\r",
									"        \"contact_template\": {\r",
									"            \"id\": parseInt(pm.collectionVariables.get(\"ContactTemplateId\")),\r",
									"            \"name\": \"contact_template\"\r",
									"        },\r",
									"        \"email_bind_attribute\": \"email\",\r",
									"        \"fullname_bind_attribute\": \"given_name\",\r",
									"        \"roles_mapping\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"apply_only_first_role\": true,\r",
									"            \"attribute_path\": \"users.roles.info.status\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"user_information_endpoint\",\r",
									"                \"custom_endpoint\": \"/my/custom/endpoint/roles\"\r",
									"            },\r",
									"            \"relations\": [{\r",
									"                \"claim_value\": \"status456\",\r",
									"                \"access_group\": {\r",
									"                    \"id\": 1,\r",
									"                    \"name\": \"ALL\"\r",
									"                },\r",
									"                \"priority\": 2\r",
									"            }]\r",
									"        },\r",
									"        \"authentication_conditions\": {\r",
									"            \"is_enabled\": true,\r",
									"            \"attribute_path\": \"users.roles.info.status\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"custom_endpoint\",\r",
									"                \"custom_endpoint\": \"/my/custom/endpoint/auth\"\r",
									"            },\r",
									"            \"authorized_values\": [\"status123\"],\r",
									"            \"trusted_client_addresses\": [\"127.0.0.2\"],\r",
									"            \"blacklist_client_addresses\": [\r",
									"                \"10.0.0.3\",\r",
									"                \"10.0.0.4\"\r",
									"            ]\r",
									"        },\r",
									"        \"groups_mapping\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"attribute_path\": \"users.roles.info.status\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"introspection_endpoint\",\r",
									"                \"custom_endpoint\": \"/my/custom/endpoint/groups\"\r",
									"            },\r",
									"            \"relations\": []\r",
									"        },\r",
									"        \"redirect_url\": null\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with PATCH OpenId Provider Configuration informations by user with reach_api (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The OpenId Provider informations have been correctly updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": false,\r\n    \"is_forced\": false,\r\n    \"base_url\": null,\r\n    \"authorization_endpoint\": null,\r\n    \"token_endpoint\": null,\r\n    \"introspection_token_endpoint\": null,\r\n    \"userinfo_endpoint\": null,\r\n    \"endsession_endpoint\": null,\r\n    \"connection_scopes\": [],\r\n    \"login_claim\": null,\r\n    \"client_id\": null,\r\n    \"client_secret\": null,\r\n    \"authentication_type\": \"client_secret_post\",\r\n    \"verify_peer\": true,\r\n    \"auto_import\": false,\r\n    \"contact_template\": null,\r\n    \"email_bind_attribute\": null,\r\n    \"fullname_bind_attribute\": null,\r\n    \"roles_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"apply_only_first_role\": false,\r\n        \"attribute_path\": \"\",\r\n        \"endpoint\": {\r\n            \"type\": \"introspection_endpoint\",\r\n            \"custom_endpoint\": \"\"\r\n        },\r\n        \"relations\": []\r\n    },\r\n    \"authentication_conditions\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"\",\r\n        \"endpoint\": {\r\n            \"type\": \"introspection_endpoint\",\r\n            \"custom_endpoint\": null\r\n        },\r\n        \"authorized_values\": [],\r\n        \"trusted_client_addresses\": [],\r\n        \"blacklist_client_addresses\": []\r\n    },\r\n    \"groups_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"\",\r\n        \"endpoint\": {\r\n            \"type\": \"introspection_endpoint\",\r\n            \"custom_endpoint\": null\r\n        },\r\n        \"relations\": []\r\n    },\r\n    \"redirect_url\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Provider Configuration information with updated values by PATCH by user with reach_api(successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All the OpenId Provider informations are displayed and correct.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"is_active\": false,\r",
									"        \"is_forced\": false,\r",
									"        \"base_url\": null,\r",
									"        \"authorization_endpoint\": null,\r",
									"        \"token_endpoint\": null,\r",
									"        \"introspection_token_endpoint\": null,\r",
									"        \"userinfo_endpoint\": null,\r",
									"        \"endsession_endpoint\": null,\r",
									"        \"connection_scopes\": [],\r",
									"        \"login_claim\": null,\r",
									"        \"client_id\": null,\r",
									"        \"client_secret\": null,\r",
									"        \"authentication_type\": \"client_secret_post\",\r",
									"        \"verify_peer\": true,\r",
									"        \"auto_import\": false,\r",
									"        \"contact_template\": null,\r",
									"        \"email_bind_attribute\": null,\r",
									"        \"fullname_bind_attribute\": null,\r",
									"        \"roles_mapping\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"apply_only_first_role\": false,\r",
									"            \"attribute_path\": \"\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"introspection_endpoint\",\r",
									"                \"custom_endpoint\": \"\"\r",
									"            },\r",
									"            \"relations\": []\r",
									"        },\r",
									"        \"authentication_conditions\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"attribute_path\": \"\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"introspection_endpoint\",\r",
									"                \"custom_endpoint\": null\r",
									"            },\r",
									"            \"authorized_values\": [],\r",
									"            \"trusted_client_addresses\": [],\r",
									"            \"blacklist_client_addresses\": []\r",
									"        },\r",
									"        \"groups_mapping\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"attribute_path\": \"\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"introspection_endpoint\",\r",
									"                \"custom_endpoint\": null\r",
									"            },\r",
									"            \"relations\": []\r",
									"        },\r",
									"        \"redirect_url\": null\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user-test (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}