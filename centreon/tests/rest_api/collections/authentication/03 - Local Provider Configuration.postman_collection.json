{
	"info": {
		"_postman_id": "ebcbd1dd-32c1-4290-a61c-b426ec57fffd",
		"name": "03 - Local Provider Configuration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16182525",
		"_collection_link": "https://centreon-api-v2-configuration.postman.co/workspace/Migration-of-%2522behat%2522-tests~e335ae07-f9ab-4b8d-bc6c-19b9f0078df4/collection/16182525-ebcbd1dd-32c1-4290-a61c-b426ec57fffd?action=share&source=collection_link&creator=16182525"
	},
	"item": [
		{
			"name": "0301 - Update and retrieve Local Provider Configuration information",
			"item": [
				{
					"name": "Login with admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve default Local Provider Configuration information (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All the Local Provider informations are displayed and correct.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.password_security_policy).to.eql({\r",
									"        \"password_min_length\": 12,\r",
									"        \"has_uppercase\": true,\r",
									"        \"has_lowercase\": true,\r",
									"        \"has_number\": true,\r",
									"        \"has_special_character\": true,\r",
									"        \"attempts\": 5,\r",
									"        \"blocking_duration\": 900,\r",
									"        \"password_expiration\": {\r",
									"            \"expiration_delay\": 15552000,\r",
									"            \"excluded_users\": [\r",
									"                \"centreon-gorgone\"\r",
									"            ]\r",
									"        },\r",
									"        \"can_reuse_passwords\": false,\r",
									"        \"delay_before_new_password\": 3600\r",
									"    }\r",
									"    );\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Local Provider Configuration informations by admin (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Local Provider informations have been correctly updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n        \"password_min_length\": 13,\r\n        \"has_uppercase\": true,\r\n        \"has_lowercase\": false,\r\n        \"has_number\": true,\r\n        \"has_special_character\": false,\r\n        \"attempts\": 9,\r\n        \"blocking_duration\": 1200,\r\n        \"password_expiration\": {\r\n        \"expiration_delay\": 25552000,\r\n        \"excluded_users\": [\r\n            \"admin\"\r\n        ]\r\n        },\r\n        \"can_reuse_passwords\": true,\r\n        \"delay_before_new_password\": 7200\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Local Provider Configuration information with updated values by admin (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All the Local Provider informations are displayed and correct.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.password_security_policy).to.eql({\r",
									"        \"password_min_length\": 13,\r",
									"        \"has_uppercase\": true,\r",
									"        \"has_lowercase\": false,\r",
									"        \"has_number\": true,\r",
									"        \"has_special_character\": false,\r",
									"        \"attempts\": 9,\r",
									"        \"blocking_duration\": 1200,\r",
									"        \"password_expiration\": {\r",
									"            \"expiration_delay\": 25552000,\r",
									"            \"excluded_users\": [\r",
									"                \"admin\"\r",
									"            ]\r",
									"        },\r",
									"        \"can_reuse_passwords\": true,\r",
									"        \"delay_before_new_password\": 7200\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user with new password policy (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The new user has not been created, because his password doesn't match the password security policy.\", function () {\r",
									"  pm.response.to.have.status(500);\r",
									"\r",
									"  pm.expect(responseJson).to.be.eql(\"Your password must be 13 characters long and must contain : uppercase characters, numbers.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"user-test;user-test;user-test@localhost;Centreon!123;0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "0302 - Update Local Provider Configuration information with invalid properties",
			"item": [
				{
					"name": "Missing properties during update (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The Local Provider informations have not been updated because there's missing properties.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[password_security_policy.password_min_length] The property password_min_length is required\\n[password_security_policy.has_uppercase] The property has_uppercase is required\\n[password_security_policy.has_lowercase] The property has_lowercase is required\\n[password_security_policy.has_number] The property has_number is required\\n[password_security_policy.has_special_character] The property has_special_character is required\\n[password_security_policy.attempts] The property attempts is required\\n[password_security_policy.blocking_duration] The property blocking_duration is required\\n[password_security_policy.password_expiration] The property password_expiration is required\\n[password_security_policy.can_reuse_passwords] The property can_reuse_passwords is required\\n[password_security_policy.delay_before_new_password] The property delay_before_new_password is required\\n\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "password_min_length is lower than minimum allowed value (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The Local Provider informations have not been updated because password_min_length is lower than minimum allowed value.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[password_security_policy.password_min_length] Must have a minimum value of 8\\n\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n        \"password_min_length\": 7,\r\n        \"has_uppercase\": true,\r\n        \"has_lowercase\": false,\r\n        \"has_number\": true,\r\n        \"has_special_character\": false,\r\n        \"attempts\": 9,\r\n        \"blocking_duration\": 1200,\r\n        \"password_expiration\": {\r\n        \"expiration_delay\": 25552000,\r\n        \"excluded_users\": [\r\n            \"admin\"\r\n        ]\r\n        },\r\n        \"can_reuse_passwords\": true,\r\n        \"delay_before_new_password\": 7200\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "password_min_length is greater than maximum allowed value (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The Local Provider informations have not been updated because password_min_length is greater than maximum allowed value.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[password_security_policy.password_min_length] Must have a maximum value of 128\\n\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n        \"password_min_length\": 129,\r\n        \"has_uppercase\": true,\r\n        \"has_lowercase\": false,\r\n        \"has_number\": true,\r\n        \"has_special_character\": false,\r\n        \"attempts\": 9,\r\n        \"blocking_duration\": 1200,\r\n        \"password_expiration\": {\r\n        \"expiration_delay\": 25552000,\r\n        \"excluded_users\": [\r\n            \"admin\"\r\n        ]\r\n        },\r\n        \"can_reuse_passwords\": true,\r\n        \"delay_before_new_password\": 7200\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "attempts is lower than allowed value (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The Local Provider informations have not been updated because attemps is lower than allowed value.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[password_security_policy.attempts] Must have a minimum value of 1\\n\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n        \"password_min_length\": 128,\r\n        \"has_uppercase\": true,\r\n        \"has_lowercase\": false,\r\n        \"has_number\": true,\r\n        \"has_special_character\": false,\r\n        \"attempts\": 0,\r\n        \"blocking_duration\": 1200,\r\n        \"password_expiration\": {\r\n        \"expiration_delay\": 25552000,\r\n        \"excluded_users\": [\r\n            \"admin\"\r\n        ]\r\n        },\r\n        \"can_reuse_passwords\": true,\r\n        \"delay_before_new_password\": 7200\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "attempts is greater than allowed value (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The Local Provider informations have not been updated because attemps is greater than allowed value.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[password_security_policy.attempts] Must have a maximum value of 10\\n\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n        \"password_min_length\": 128,\r\n        \"has_uppercase\": true,\r\n        \"has_lowercase\": false,\r\n        \"has_number\": true,\r\n        \"has_special_character\": false,\r\n        \"attempts\": 11,\r\n        \"blocking_duration\": 1200,\r\n        \"password_expiration\": {\r\n        \"expiration_delay\": 25552000,\r\n        \"excluded_users\": [\r\n            \"admin\"\r\n        ]\r\n        },\r\n        \"can_reuse_passwords\": true,\r\n        \"delay_before_new_password\": 7200\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "blocking duration exceeds the allowed value (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The Local Provider informations have not been updated because blocking duration exceeds the allowed value.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[password_security_policy.blocking_duration] Must have a maximum value of 604800\\n\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n        \"password_min_length\": 128,\r\n        \"has_uppercase\": true,\r\n        \"has_lowercase\": false,\r\n        \"has_number\": true,\r\n        \"has_special_character\": false,\r\n        \"attempts\": 10,\r\n        \"blocking_duration\": 604801,\r\n        \"password_expiration\": {\r\n        \"expiration_delay\": 25552000,\r\n        \"excluded_users\": [\r\n            \"admin\"\r\n        ]\r\n        },\r\n        \"can_reuse_passwords\": true,\r\n        \"delay_before_new_password\": 7200\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "expiration_delay is lower than the allowed value (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The Local Provider informations have not been updated because expiration_delay is lower than the allowed value.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[password_security_policy.password_expiration.expiration_delay] Must have a minimum value of 604800\\n\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n        \"password_min_length\": 128,\r\n        \"has_uppercase\": true,\r\n        \"has_lowercase\": false,\r\n        \"has_number\": true,\r\n        \"has_special_character\": false,\r\n        \"attempts\": 10,\r\n        \"blocking_duration\": 604800,\r\n        \"password_expiration\": {\r\n        \"expiration_delay\": 604799,\r\n        \"excluded_users\": [\r\n            \"admin\"\r\n        ]\r\n        },\r\n        \"can_reuse_passwords\": true,\r\n        \"delay_before_new_password\": 7200\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "expiration_delay is exceeds the allowed value (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The Local Provider informations have not been updated because expiration_delay is exceeds the allowed value.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[password_security_policy.password_expiration.expiration_delay] Must have a maximum value of 31536000\\n\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n        \"password_min_length\": 128,\r\n        \"has_uppercase\": true,\r\n        \"has_lowercase\": false,\r\n        \"has_number\": true,\r\n        \"has_special_character\": false,\r\n        \"attempts\": 10,\r\n        \"blocking_duration\": 604800,\r\n        \"password_expiration\": {\r\n        \"expiration_delay\": 31536001,\r\n        \"excluded_users\": [\r\n            \"admin\"\r\n        ]\r\n        },\r\n        \"can_reuse_passwords\": true,\r\n        \"delay_before_new_password\": 7200\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "delay_before_new_password is lower than the allowed value (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The Local Provider informations have not been updated because delay_before_new_password is lower than the allowed value.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[password_security_policy.delay_before_new_password] Must have a minimum value of 3600\\n\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n        \"password_min_length\": 128,\r\n        \"has_uppercase\": true,\r\n        \"has_lowercase\": false,\r\n        \"has_number\": true,\r\n        \"has_special_character\": false,\r\n        \"attempts\": 10,\r\n        \"blocking_duration\": 604800,\r\n        \"password_expiration\": {\r\n        \"expiration_delay\": 31536000,\r\n        \"excluded_users\": [\r\n            \"admin\"\r\n        ]\r\n        },\r\n        \"can_reuse_passwords\": true,\r\n        \"delay_before_new_password\": 3599\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "delay_before_new_password exceeds the allowed value (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The Local Provider informations have not been updated because delay_before_new_password exceeds the allowed value.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[password_security_policy.delay_before_new_password] Must have a maximum value of 604800\\n\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n        \"password_min_length\": 128,\r\n        \"has_uppercase\": true,\r\n        \"has_lowercase\": false,\r\n        \"has_number\": true,\r\n        \"has_special_character\": false,\r\n        \"attempts\": 10,\r\n        \"blocking_duration\": 604800,\r\n        \"password_expiration\": {\r\n        \"expiration_delay\": 31536000,\r\n        \"excluded_users\": [\r\n            \"admin\"\r\n        ]\r\n        },\r\n        \"can_reuse_passwords\": true,\r\n        \"delay_before_new_password\": 604801\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Local Provider Configuration information after wrong values(successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All the Local Provider informations are displayed and correct.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.password_security_policy).to.eql({\r",
									"        \"password_min_length\": 13,\r",
									"        \"has_uppercase\": true,\r",
									"        \"has_lowercase\": false,\r",
									"        \"has_number\": true,\r",
									"        \"has_special_character\": false,\r",
									"        \"attempts\": 9,\r",
									"        \"blocking_duration\": 1200,\r",
									"        \"password_expiration\": {\r",
									"            \"expiration_delay\": 25552000,\r",
									"            \"excluded_users\": [\r",
									"                \"admin\"\r",
									"            ]\r",
									"        },\r",
									"        \"can_reuse_passwords\": true,\r",
									"        \"delay_before_new_password\": 7200\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "0303 - Update and retrieve Local Provider Configuration information as logged non-admin user without Reach API rights",
			"item": [
				{
					"name": "Add user without reach_api rights (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"user-test;user-test;user-test@localhost;Centreon!1234;0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with user-test (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(\"user-test\");\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"user-test\",\r\n      \"password\": \"Centreon!1234\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Local Provider Configuration informations by user without reach_api (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Local Provider informations have not been updated, because the user doesn't have reach_api rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n        \"password_min_length\": 8,\r\n        \"has_uppercase\": true,\r\n        \"has_lowercase\": true,\r\n        \"has_number\": true,\r\n        \"has_special_character\": true,\r\n        \"attempts\": 6,\r\n        \"blocking_duration\": 1200,\r\n        \"password_expiration\": {\r\n        \"expiration_delay\": 25552000,\r\n        \"excluded_users\": [\r\n            \"admin\"\r\n        ]\r\n        },\r\n        \"can_reuse_passwords\": true,\r\n        \"delay_before_new_password\": 3600\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Local Provider Configuration information with updated values by user without reach_api (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Local Provider informations have not been listed, because the user doesn't have reach_api rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user-test (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "0304 - Update and retrieve Local Provider Configuration information as logged non-admin user with Reach API rights",
			"item": [
				{
					"name": "Login with admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"user-test;reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to ALL (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ALL;user-test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"Authentication-user;Authentication-user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RW right (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n\"values\": \"Authentication-user;1;Administration\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Authentication-user to ALL (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ALL;Authentication-user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with user-test (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(\"user-test\");\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"user-test\",\r\n      \"password\": \"Centreon!1234\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Local Provider Configuration informations by user with reach_api (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Local Provider informations have been correctly updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n        \"password_min_length\": 8,\r\n        \"has_uppercase\": true,\r\n        \"has_lowercase\": true,\r\n        \"has_number\": true,\r\n        \"has_special_character\": true,\r\n        \"attempts\": 6,\r\n        \"blocking_duration\": 1200,\r\n        \"password_expiration\": {\r\n        \"expiration_delay\": 25552000,\r\n        \"excluded_users\": [\r\n            \"admin\"\r\n        ]\r\n        },\r\n        \"can_reuse_passwords\": true,\r\n        \"delay_before_new_password\": 3600\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Local Provider Configuration information by user with rech_api (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All the Local Provider informations are displayed and correct.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson.password_security_policy).to.eql({\r",
									"        \"password_min_length\": 8,\r",
									"        \"has_uppercase\": true,\r",
									"        \"has_lowercase\": true,\r",
									"        \"has_number\": true,\r",
									"        \"has_special_character\": true,\r",
									"        \"attempts\": 6,\r",
									"        \"blocking_duration\": 1200,\r",
									"        \"password_expiration\": {\r",
									"        \"expiration_delay\": 25552000,\r",
									"        \"excluded_users\": [\r",
									"            \"admin\"\r",
									"        ]\r",
									"        },\r",
									"        \"can_reuse_passwords\": true,\r",
									"        \"delay_before_new_password\": 3600\r",
									"    }\r",
									"    );\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user-test (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}