# ABU 2023-09-11
# Import of test-lib file instead of including it.
# The purpose is to temporary disable rules which are not mandatory from a php point of view.
# This will allow us to put phpstan faster in the CI, to increase quality of code.
# When phpstan will be propagated to a sufficient number of namespaces, we will (if always a thing)
# restore the less important rules commented below.
#includes:
#    - vendor/centreon/centreon-test-lib/src/PHPStan/phpstan.neon
rules:
    - Centreon\PHPStan\CustomRules\MiscRules\VariableLengthCustomRule
    - Centreon\PHPStan\CustomRules\MiscRules\StringBackquotesCustomRule
    - Centreon\PHPStan\CustomRules\LoggerRules\LogMethodInCatchCustomRule
    - Centreon\PHPStan\CustomRules\LoggerRules\LoggerUseCaseCustomRule
    - Centreon\PHPStan\CustomRules\RepositoryRules\RepositoryImplementsInterfaceCustomRule
    - Centreon\PHPStan\CustomRules\ArchitectureRules\DomainCallNamespacesCustomRule
    - Centreon\PHPStan\CustomRules\ArchitectureRules\FinalClassCustomRule
    - Centreon\PHPStan\CustomRules\ArchitectureRules\ExceptionInUseCaseCustomRule
# The following rules are not mandatory for high quality code and they are too widely not respected.
#    - Centreon\PHPStan\CustomRules\RepositoryRules\RepositoryNameCustomRule
#    - Centreon\PHPStan\CustomRules\RepositoryRules\RepositoryInterfaceNameCustomRule
#    - Centreon\PHPStan\CustomRules\RepositoryRules\RepositoryNameValidationByInterfaceCustomRule
services:
    -
        class: Centreon\PHPStan\CustomRules\Collectors\MethodCallCollector
        tags:
            - phpstan.collector
    -
        class: Centreon\PHPStan\CustomRules\Collectors\UseUseCollector
        tags:
            - phpstan.collector

parameters:
    level: max
    paths:
        - src/Core
        - tests/php/Core
    ignoreErrors:
        -
            message: '#^Undefined variable: \$this$#'
            path: tests/php/Core
        -
            message: '#^Call to an undefined method Pest#'
            path: tests/php/Core

        - # [CENTREON-RULE] Our try catch block logging rule cannot handle nested try catch.
            message: '#Exception thrown in UseCase should be in a try catch block, and must be caught.#'
            paths:
                - src/Core/Notification/Application/UseCase/AddNotification/AddNotification.php
                - src/Core/Notification/Application/UseCase/UpdateNotification/UpdateNotification.php

        - # [CENTREON-RULE]: The logging is already done in a parent try catch block.
            message: '#Catch block must contain a Logger trait method call.#'
            paths:
                - src/Core/Security/Authentication/Application/UseCase/Login/Login.php
